[{"path":"https://galah.ala.org.au/R/articles/download-data-reproducibly.html","id":"the-trade-off-of-new-data","dir":"Articles","previous_headings":"","what":"The trade-off of new data","title":"Download data reproducibly","text":"default, galah downloads data directly Living Atlas API. default means galah automatically downloads --date data available (yay!). Living Atlases, however, constantly ingesting data. new data may within last week, last year, last hundred years, depending source. result, even run query, data download today may return different result data downloaded yesterday! Frequent data ingestion means although galah useful downloads latest data, galah won’t necessarily return data every time run query. can preserve result returned query query always changes? recommend take two steps ensure data stable: download data specified location can find re-use later request DOI download can request needed (cite correctly!) steps independent, can choose whether enact none, one, workflow. show .","code":""},{"path":"https://galah.ala.org.au/R/articles/download-data-reproducibly.html","id":"generate-a-data-doi","dir":"Articles","previous_headings":"","what":"Generate a data DOI","title":"Download data reproducibly","text":"make data downloads reproducible, galah allows us mint unique DOI (Digital Object Identifier) specific query subsequent result. DOI works similarly url, holds content accessed using specific link. However, url can “break” url renamed content found certain url moved new url. contrast, DOI persistent always direct user content, even url changes. persistence DOIs valuable long-term reproducibility content. galah, can also add DOI download query. just need add mint_doi = TRUE atlas_occurrences(). unique DOI assigned resulting object query run. Please note DOI generation reload currently supported queries Atlas Living Australia. GBIF provides DOI every download, time writing, don’t provide API use DOI download dataset second time. atlases don’t support DOIs (yet). galah preserves lots information object’s attributes, many used construct API query sent specified Living Atlas. can view new DOI assigned occs checking attributes. can also view information cite dataset: need reload data locally, can simply calling read_zip(): importantly, though, now persistent link data download. paste DOI browser, can see additional information query, including breakdown data providers licensing. plot chunk atlas-support","code":"library(galah) galah_config(email = \"your-email-here\",              directory = \"ALA_downloads\")  # download bandicoot occurrence records from 2003 occs <- galah_call() |>   identify(\"perameles\") |>   filter(year == 2003) |>   atlas_occurrences(mint_doi = TRUE,                  # add DOI                     file = \"bandicoots_2003_data.zip\" # specify filename                     )  occs |> print(n = 5) ## # A tibble: 201 × 8 ##   recordID    scientificName taxonConceptID decimalLatitude decimalLongitude ##   <chr>       <chr>          <chr>                    <dbl>            <dbl> ## 1 00300a96-e… Perameles nas… https://biodi…           -33.7             151. ## 2 0134472a-2… Perameles nas… https://biodi…           -34.7             151. ## 3 01e7b99e-9… Perameles gun… https://biodi…           -42.9             147. ## 4 029c49f0-b… Perameles nas… https://biodi…           -35.1             151. ## 5 0345dbe1-9… Perameles nas… https://biodi…           -35.5             150. ## # ℹ 196 more rows ## # ℹ 3 more variables: eventDate <dttm>, occurrenceStatus <chr>, ## #   dataResourceName <chr> attributes(occs)$doi ## [1] \"https://doi.org/10.26197/ala.7605ea98-e90f-46d4-998c-1b6673c48d34\" atlas_citation(occs) ## The citation for this dataset is: ##  ## Atlas of Living Australia (7 February 2025) Occurrence download ## https://doi.org/10.26197/ala.7605ea98-e90f-46d4-998c-1b6673c48d34 ##  ## Please consider citing R & galah, in addition to your dataset: ##  ## R Core Team (2024). _R: A Language and Environment for Statistical ## Computing_. R Foundation for Statistical Computing, Vienna, Austria. ## <https://www.R-project.org/>. ##  ## Westgate M, Kellie D, Stevenson M & Newman P (2025): _galah: Biodiversity ## Data from the GBIF Node Network_. R package version 2.1.1. doi: ## 10.32614/CRAN.package.galah read_zip(\"./ALA_downloads/bandicoots_2003_data.zip\") |>   print(n = 5) ## # A tibble: 201 × 8 ##   recordID    scientificName taxonConceptID decimalLatitude decimalLongitude ##   <chr>       <chr>          <chr>                    <dbl>            <dbl> ## 1 00300a96-e… Perameles nas… https://biodi…           -33.7             151. ## 2 0134472a-2… Perameles nas… https://biodi…           -34.7             151. ## 3 01e7b99e-9… Perameles gun… https://biodi…           -42.9             147. ## 4 029c49f0-b… Perameles nas… https://biodi…           -35.1             151. ## 5 0345dbe1-9… Perameles nas… https://biodi…           -35.5             150. ## # ℹ 196 more rows ## # ℹ 3 more variables: eventDate <dttm>, occurrenceStatus <chr>, ## #   dataResourceName <chr>"},{"path":"https://galah.ala.org.au/R/articles/download-data-reproducibly.html","id":"download-data-using-a-doi","dir":"Articles","previous_headings":"","what":"Download data using a DOI","title":"Download data reproducibly","text":"use DOI return results query , ’ll use galah_filter(). can specify like filter results records returned DOI. query reproduces records original query! like examples, use DOI method reproducibly download data throughout Cleaning Biodiversity Data R book.","code":"occs_again <- galah_call() |>   filter(doi == attributes(occs)$doi) |> # filter by doi   atlas_occurrences()  occs_again |> print(n = 5) ## # A tibble: 201 × 8 ##   recordID    scientificName taxonConceptID decimalLatitude decimalLongitude ##   <chr>       <chr>          <chr>                    <dbl>            <dbl> ## 1 00300a96-e… Perameles nas… https://biodi…           -33.7             151. ## 2 0134472a-2… Perameles nas… https://biodi…           -34.7             151. ## 3 01e7b99e-9… Perameles gun… https://biodi…           -42.9             147. ## 4 029c49f0-b… Perameles nas… https://biodi…           -35.1             151. ## 5 0345dbe1-9… Perameles nas… https://biodi…           -35.5             150. ## # ℹ 196 more rows ## # ℹ 3 more variables: eventDate <dttm>, occurrenceStatus <chr>, ## #   dataResourceName <chr>"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"record-counts","dir":"Articles","previous_headings":"","what":"Record counts","title":"Download data","text":"atlas_counts() provides summary counts records specified atlas without needing download records first. Group summarise record counts specific fields using galah_group_by().","code":"galah_config(atlas = \"Australia\") # Total number of records in the ALA atlas_counts() ## # A tibble: 1 × 1 ##       count ##       <int> ## 1 146185520 galah_call() |>   galah_group_by(kingdom) |>   atlas_counts() ## # A tibble: 12 × 2 ##    kingdom           count ##    <chr>             <int> ##  1 Animalia      113408280 ##  2 Plantae        27572183 ##  3 Fungi           2448600 ##  4 Chromista       1057157 ##  5 Protista         316541 ##  6 Bacteria         113480 ##  7 Archaea            4120 ##  8 Virus              2382 ##  9 Bamfordvirae        210 ## 10 Orthornavirae       138 ## 11 Viroid              104 ## 12 Shotokuvirae         41"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"species-lists","dir":"Articles","previous_headings":"","what":"Species lists","title":"Download data","text":"common use case atlas data identify species occur specified region, time period, taxonomic group. atlas_species() similar search_taxa(), returns taxonomic information unique identifiers, differs returning information species far flexible supporting filtering.","code":"species <- galah_call() |>   galah_identify(\"Rodentia\") |>   galah_filter(stateProvince == \"Northern Territory\") |>   atlas_species()    species |> head() ## # A tibble: 6 × 11 ##   taxon_concept_id species_name scientific_name_auth…¹ taxon_rank kingdom phylum class order family genus vernacular_name ##   <chr>            <chr>        <chr>                  <chr>      <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>           ## 1 https://biodive… Pseudomys d… (Gould, 1842)          species    Animal… Chord… Mamm… Rode… Murid… Pseu… Delicate Mouse  ## 2 https://biodive… Mesembriomy… (J.E. Gray, 1843)      species    Animal… Chord… Mamm… Rode… Murid… Mese… Black-footed T… ## 3 https://biodive… Zyzomys arg… (Thomas, 1889)         species    Animal… Chord… Mamm… Rode… Murid… Zyzo… Common Rock-rat ## 4 https://biodive… Pseudomys h… (Waite, 1896)          species    Animal… Chord… Mamm… Rode… Murid… Pseu… Sandy Inland M… ## 5 https://biodive… Melomys bur… (Ramsay, 1887)         species    Animal… Chord… Mamm… Rode… Murid… Melo… Grassland Melo… ## 6 https://biodive… Notomys ale… Thomas, 1922           species    Animal… Chord… Mamm… Rode… Murid… Noto… Spinifex Hoppi… ## # ℹ abbreviated name: ¹​scientific_name_authorship"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"occurrence-data","dir":"Articles","previous_headings":"","what":"Occurrence data","title":"Download data","text":"download occurrence data need specify email galah_config() registered account selected GBIF node. See information config section. Download occurrence records Eolophus roseicapilla.","code":"galah_config(email = \"your_email@email.com\", atlas = \"Australia\") occ <- galah_call() |>   galah_identify(\"Eolophus roseicapilla\") |>   galah_filter(     stateProvince == \"Australian Capital Territory\",     year >= 2010,     profile = \"ALA\"   ) |>   galah_select(institutionID, group = \"basic\") |>   atlas_occurrences() ## Retrying in 1 seconds. ## Retrying in 2 seconds. ## Retrying in 4 seconds. occ |> head() ## # A tibble: 6 × 9 ##   recordID            scientificName taxonConceptID decimalLatitude decimalLongitude eventDate           occurrenceStatus ##   <chr>               <chr>          <chr>                    <dbl>            <dbl> <dttm>              <chr>            ## 1 0000a928-d756-42eb… Eolophus rose… https://biodi…           -35.6             149. 2017-04-19 09:11:00 PRESENT          ## 2 0001bc78-d2e9-48aa… Eolophus rose… https://biodi…           -35.2             149. 2019-08-13 15:13:00 PRESENT          ## 3 0002064f-08ea-425b… Eolophus rose… https://biodi…           -35.3             149. 2014-03-16 06:48:00 PRESENT          ## 4 00022dd2-9f85-4802… Eolophus rose… https://biodi…           -35.3             149. 2022-05-08 08:20:00 PRESENT          ## 5 0002cc35-8d5a-4d20… Eolophus rose… https://biodi…           -35.3             149. 2015-11-01 08:00:00 PRESENT          ## 6 00030a8c-082f-44f0… Eolophus rose… https://biodi…           -35.3             149. 2022-01-06 11:47:00 PRESENT          ## # ℹ 2 more variables: dataResourceName <chr>, institutionID <lgl>"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"media-metadata","dir":"Articles","previous_headings":"","what":"Media metadata","title":"Download data","text":"addition text data describing individual occurrences attributes, ALA stores images, sounds videos associated given record. Metadata records can downloaded using atlas_media(). actually download media files computer, use [collect_media()].","code":"media_data <- galah_call() |>   galah_identify(\"Eolophus roseicapilla\") |>   galah_filter(     year == 2020,     cl22 == \"Australian Capital Territory\") |>   atlas_media()    media_data |> head() ## # A tibble: 6 × 19 ##   media_id   recordID scientificName taxonConceptID decimalLatitude decimalLongitude eventDate           occurrenceStatus ##   <chr>      <chr>    <chr>          <chr>                    <dbl>            <dbl> <dttm>              <chr>            ## 1 ff8322d0-… 003a192… Eolophus rose… https://biodi…           -35.3             149. 2020-09-12 16:11:00 PRESENT          ## 2 c66fc819-… 015ee7c… Eolophus rose… https://biodi…           -35.4             149. 2020-08-09 15:11:00 PRESENT          ## 3 fe6d7b94-… 05e86b7… Eolophus rose… https://biodi…           -35.4             149. 2020-11-13 22:29:00 PRESENT          ## 4 2f4d32c0-… 063bb0f… Eolophus rose… https://biodi…           -35.6             149. 2020-08-04 11:50:00 PRESENT          ## 5 73407414-… 063bb0f… Eolophus rose… https://biodi…           -35.6             149. 2020-08-04 11:50:00 PRESENT          ## 6 89171c49-… 063bb0f… Eolophus rose… https://biodi…           -35.6             149. 2020-08-04 11:50:00 PRESENT          ## # ℹ 11 more variables: dataResourceName <chr>, multimedia <chr>, images <chr>, sounds <lgl>, videos <lgl>, ## #   creator <chr>, license <chr>, mimetype <chr>, width <int>, height <int>, image_url <chr> media_data |>   collect_media()"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"taxonomic-trees","dir":"Articles","previous_headings":"","what":"Taxonomic trees","title":"Download data","text":"atlas_taxonomy() provides way build taxonomic trees one clade another using GBIF node’s internal taxonomy. Specify taxonomic level tree go galah_filter() using rank argument.","code":"galah_call() |>   galah_identify(\"chordata\") |>   galah_filter(rank == class) |>   atlas_taxonomy() ## # A tibble: 19 × 4 ##    name            rank      parent_taxon_concept_id                                                   taxon_concept_id   ##    <chr>           <chr>     <chr>                                                                     <chr>              ##  1 Chordata        phylum    <NA>                                                                      https://biodivers… ##  2 Cephalochordata subphylum https://biodiversity.org.au/afd/taxa/065f1da4-53cd-40b8-a396-80fa5c74dedd https://biodivers… ##  3 Tunicata        subphylum https://biodiversity.org.au/afd/taxa/065f1da4-53cd-40b8-a396-80fa5c74dedd https://biodivers… ##  4 Appendicularia  class     https://biodiversity.org.au/afd/taxa/1c20ed62-d918-4e42-b625-8b86d533cc51 https://biodivers… ##  5 Ascidiacea      class     https://biodiversity.org.au/afd/taxa/1c20ed62-d918-4e42-b625-8b86d533cc51 https://biodivers… ##  6 Thaliacea       class     https://biodiversity.org.au/afd/taxa/1c20ed62-d918-4e42-b625-8b86d533cc51 https://biodivers… ##  7 Vertebrata      subphylum https://biodiversity.org.au/afd/taxa/065f1da4-53cd-40b8-a396-80fa5c74dedd https://biodivers… ##  8 Agnatha         informal  https://biodiversity.org.au/afd/taxa/5d6076b1-b7c7-487f-9d61-0fea0111cc7e https://biodivers… ##  9 Myxini          informal  https://biodiversity.org.au/afd/taxa/66db22c8-891d-4b16-a1a2-b66feaeaa3e0 https://biodivers… ## 10 Petromyzontida  informal  https://biodiversity.org.au/afd/taxa/66db22c8-891d-4b16-a1a2-b66feaeaa3e0 https://biodivers… ## 11 Gnathostomata   informal  https://biodiversity.org.au/afd/taxa/5d6076b1-b7c7-487f-9d61-0fea0111cc7e https://biodivers… ## 12 Amphibia        class     https://biodiversity.org.au/afd/taxa/ef5515fd-a0a2-4e16-b61a-0f19f8900f76 https://biodivers… ## 13 Aves            class     https://biodiversity.org.au/afd/taxa/ef5515fd-a0a2-4e16-b61a-0f19f8900f76 https://biodivers… ## 14 Mammalia        class     https://biodiversity.org.au/afd/taxa/ef5515fd-a0a2-4e16-b61a-0f19f8900f76 https://biodivers… ## 15 Reptilia        class     https://biodiversity.org.au/afd/taxa/ef5515fd-a0a2-4e16-b61a-0f19f8900f76 https://biodivers… ## 16 Pisces          informal  https://biodiversity.org.au/afd/taxa/ef5515fd-a0a2-4e16-b61a-0f19f8900f76 https://biodivers… ## 17 Actinopterygii  class     https://biodiversity.org.au/afd/taxa/e22efeb4-2cb5-4250-8d71-61c48bdaa051 https://biodivers… ## 18 Chondrichthyes  class     https://biodiversity.org.au/afd/taxa/e22efeb4-2cb5-4250-8d71-61c48bdaa051 https://biodivers… ## 19 Sarcopterygii   class     https://biodiversity.org.au/afd/taxa/e22efeb4-2cb5-4250-8d71-61c48bdaa051 https://biodivers…"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"configuring-galah","dir":"Articles","previous_headings":"","what":"Configuring galah","title":"Download data","text":"Various aspects galah package can customized.","code":""},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"email","dir":"Articles","previous_headings":"Configuring galah","what":"Email","title":"Download data","text":"download occurrence records, species lists media, need provide email address registered service want use (e.g. ALA can create account ). email registered, stored config:","code":"galah_config(email = \"myemail@gmail.com\")"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"setting-your-directory","dir":"Articles","previous_headings":"Configuring galah","what":"Setting your directory","title":"Download data","text":"default, galah stores downloads temporary folder, meaning local files automatically deleted R session ended. behaviour can altered downloaded files preserved setting directory non-temporary location.","code":"galah_config(directory = \"example/dir\")"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"setting-the-download-reason","dir":"Articles","previous_headings":"Configuring galah","what":"Setting the download reason","title":"Download data","text":"ALA requires provide reason downloading occurrence data (via galah atlas_occurrences() function). reason set “scientific research” default, can change using galah_config(). See show_all(reasons) valid download reasons.","code":"galah_config(download_reason_id = your_reason_id)"},{"path":"https://galah.ala.org.au/R/articles/download_data.html","id":"debugging","dir":"Articles","previous_headings":"Configuring galah","what":"Debugging","title":"Download data","text":"things aren’t working expected, detail (particularly web requests caching behaviour) can obtained setting verbose = TRUE.","code":"galah_config(verbose = TRUE)"},{"path":"https://galah.ala.org.au/R/articles/look_up_information.html","id":"show_all_-subfunctions","dir":"Articles","previous_headings":"","what":"show_all_ subfunctions","title":"Look up information","text":"show_all useful variety cases, can still call underlying subfunctions prefer. Functions prefix show_all_ exactly ; show possible values category specified.","code":"show_all_atlases() ## # A tibble: 10 × 4 ##    region         institution                                                             acronym url                     ##    <chr>          <chr>                                                                   <chr>   <chr>                   ##  1 Australia      Atlas of Living Australia                                               ALA     https://www.ala.org.au  ##  2 Austria        Biodiversitäts-Atlas Österreich                                         BAO     https://biodiversityat… ##  3 Brazil         Sistemas de Informações sobre a Biodiversidade Brasileira               SiBBr   https://sibbr.gov.br    ##  4 France         Portail français d'accès aux données d'observation sur les espèces      OpenObs https://openobs.mnhn.fr ##  5 Global         Global Biodiversity Information Facility                                GBIF    https://gbif.org        ##  6 Guatemala      Sistema Nacional de Información sobre Diversidad Biológica de Guatemala SNIBgt  https://snib.conap.gob… ##  7 Portugal       GBIF Portugal                                                           GBIF.pt https://www.gbif.pt     ##  8 Spain          GBIF Spain                                                              GBIF.es https://gbif.es         ##  9 Sweden         Swedish Biodiversity Data Infrastructure                                SBDI    https://biodiversityda… ## 10 United Kingdom National Biodiversity Network                                           NBN     https://nbn.org.uk show_all_reasons() ## # A tibble: 13 × 2 ##       id name                             ##    <int> <chr>                            ##  1     1 biosecurity management/planning  ##  2    11 citizen science                  ##  3     5 collection management            ##  4     0 conservation management/planning ##  5     7 ecological research              ##  6     3 education                        ##  7     2 environmental assessment         ##  8    12 restoration/remediation          ##  9     4 scientific research              ## 10     8 systematic research/taxonomy     ## 11    13 species modelling                ## 12     6 other                            ## 13    10 testing"},{"path":"https://galah.ala.org.au/R/articles/look_up_information.html","id":"search_-subfunctions","dir":"Articles","previous_headings":"","what":"search_ subfunctions","title":"Look up information","text":"can also call subfunctions use search_ prefix lookup information. search_ subfunctions differ show_all_ require query work, useful search detailed information can’t summarised across whole atlas. search_taxa() especially useful function galah. let’s search single taxon multiple taxa name. Alternatively, search_identifiers() partner function search_taxa(). already know taxonomic identifier, can search taxa identifier belongs .","code":"search_taxa(\"reptilia\") ## # A tibble: 1 × 9 ##   search_term scientific_name taxon_concept_id                               rank  match_type kingdom phylum class issues ##   <chr>       <chr>           <chr>                                          <chr> <chr>      <chr>   <chr>  <chr> <chr>  ## 1 reptilia    REPTILIA        https://biodiversity.org.au/afd/taxa/682e1228… class exactMatch Animal… Chord… Rept… noIss… search_taxa(\"reptilia\", \"aves\", \"mammalia\", \"pisces\") ## # A tibble: 1 × 9 ##   search_term scientific_name taxon_concept_id                               rank  match_type kingdom phylum class issues ##   <chr>       <chr>           <chr>                                          <chr> <chr>      <chr>   <chr>  <chr> <chr>  ## 1 reptilia    REPTILIA        https://biodiversity.org.au/afd/taxa/682e1228… class exactMatch Animal… Chord… Rept… noIss… search_identifiers(\"urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b3c-45ff-833b-550efd40c399\") ## # A tibble: 1 × 15 ##   search_term     success scientific_name taxon_concept_id rank  rank_id   lft   rgt match_type kingdom kingdom_id phylum ##   <chr>           <lgl>   <chr>           <chr>            <chr>   <int> <int> <int> <chr>      <chr>   <chr>      <chr>  ## 1 urn:lsid:biodi… TRUE    REPTILIA        https://biodive… class    3000 33626 36658 taxonIdMa… Animal… https://b… Chord… ## # ℹ 3 more variables: phylum_id <chr>, class <chr>, class_id <chr>"},{"path":"https://galah.ala.org.au/R/articles/look_up_information.html","id":"show_values-search_values","dir":"Articles","previous_headings":"","what":"show_values() & search_values()","title":"Look up information","text":"desired field found, can use show_values() understand information contained within field. example, can show values contained field basisOfRecord. Use information pass meaningful queries galah_filter(). works types query, data profiles:","code":"search_all(fields, \"basisOfRecord\") |> show_values() ## ! Search returned 2 matched fields. ## • Showing values for 'basisOfRecord'. ## # A tibble: 9 × 1 ##   basisOfRecord       ##   <chr>               ## 1 HUMAN_OBSERVATION   ## 2 PRESERVED_SPECIMEN  ## 3 MACHINE_OBSERVATION ## 4 OCCURRENCE          ## 5 OBSERVATION         ## 6 MATERIAL_SAMPLE     ## 7 LIVING_SPECIMEN     ## 8 MATERIAL_CITATION   ## 9 FOSSIL_SPECIMEN galah_call() |>    galah_filter(basisOfRecord == \"LIVING_SPECIMEN\") |>    atlas_counts() ## # A tibble: 1 × 1 ##    count ##    <int> ## 1 126135 search_all(profiles, \"ALA\") |>    show_values() |>    head() ## • Showing values for 'ALA'. ## # A tibble: 6 × 5 ##      id enabled description                                                                           filter displayOrder ##   <int> <lgl>   <chr>                                                                                 <chr>         <int> ## 1    94 TRUE    \"Exclude all records where spatial validity is \\\"false\\\"\"                             \"-spa…            1 ## 2    96 TRUE    \"Exclude all records with an assertion that the scientific name provided does not ma… \"-ass…            1 ## 3    97 TRUE    \"Exclude all records with an assertion that the scientific name provided is not stru… \"-ass…            2 ## 4    98 TRUE    \"Exclude all records with an assertion that the name and classification supplied can… \"-ass…            3 ## 5    99 TRUE    \"Exclude all records with an assertion that kingdom provided doesn't match a known k… \"-ass…            4 ## 6   100 TRUE    \"Exclude all records with an assertion that the scientific name provided in the reco… \"-ass…            5"},{"path":"https://galah.ala.org.au/R/articles/narrow_your_results.html","id":"search_taxa-identify","dir":"Articles","previous_headings":"","what":"search_taxa & identify","title":"Narrow your results","text":"Perhaps unsurprisingly, search_taxa() searches taxonomic information. search_taxa() uses fuzzy-matching work lot like search bar Atlas Living Australia website, can use search taxa scientific name. Finding desired taxon search_taxa() important step using taxonomic information download data. example, search reptiles, first need identify whether correct query: want specific, can provide tibble (data.frame) providing additional taxonomic information. know search matches correct taxon taxa, can use identify() narrow results query. ’re using international atlas, search_taxa() automatically switch using local name-matching service. example, Portugal uses GBIF taxonomic backbone, integrates seamlessly standard workflow. Conversely, UK’s National Biodiversity Network (NBN), taxonomic backbone, supported using function call.","code":"search_taxa(\"Reptilia\") ## # A tibble: 1 × 9 ##   search_term scientific_name taxon_concept_id                               rank  match_type kingdom phylum class issues ##   <chr>       <chr>           <chr>                                          <chr> <chr>      <chr>   <chr>  <chr> <chr>  ## 1 Reptilia    REPTILIA        https://biodiversity.org.au/afd/taxa/682e1228… class exactMatch Animal… Chord… Rept… noIss… search_taxa(tibble(genus = \"Eolophus\", kingdom = \"Aves\")) ## # A tibble: 1 × 13 ##   search_term  scientific_name scientific_name_auth…¹ taxon_concept_id rank  match_type kingdom phylum class order family ##   <chr>        <chr>           <chr>                  <chr>            <chr> <chr>      <chr>   <chr>  <chr> <chr> <chr>  ## 1 Eolophus_Av… Eolophus        Bonaparte, 1854        https://biodive… genus exactMatch Animal… Chord… Aves  Psit… Cacat… ## # ℹ abbreviated name: ¹​scientific_name_authorship ## # ℹ 2 more variables: genus <chr>, issues <chr> galah_call() |>   identify(\"Reptilia\") |>   atlas_counts() ## # A tibble: 1 × 1 ##     count ##     <int> ## 1 1841182 galah_config(atlas = \"Portugal\") ## Atlas selected: GBIF Portugal (GBIF.pt) [Portugal] galah_call() |>    identify(\"Lepus\") |>    group_by(species) |>    atlas_counts() ## # A tibble: 5 × 2 ##   species           count ##   <chr>             <int> ## 1 Lepus granatensis  1378 ## 2 Lepus microtis       64 ## 3 Lepus europaeus      10 ## 4 Lepus saxatilis       2 ## 5 Lepus capensis        1 galah_config(atlas = \"United Kingdom\") ## Atlas selected: National Biodiversity Network (NBN) [United Kingdom] galah_call() |>    filter(genus == \"Bufo\") |>    group_by(species) |>    atlas_counts() ## # A tibble: 3 × 2 ##   species       count ##   <chr>         <int> ## 1 Bufo bufo     77009 ## 2 Bufo spinosus   143 ## 3 Bufo marinus      1"},{"path":"https://galah.ala.org.au/R/articles/narrow_your_results.html","id":"filter","dir":"Articles","previous_headings":"","what":"filter","title":"Narrow your results","text":"Perhaps important function galah filter(), used filter rows queries. find available fields corresponding valid values, use field lookup functions show_all(fields), search_all(fields) & show_values(). galah_filter() can also used make complex taxonomic queries possible using search_taxa(). using taxonConceptID field, possible build queries exclude certain taxa, example. can useful filter paraphyletic concepts invertebrates. addition single filters, atlases (currently Australia, Sweden & Spain) also support ‘data profiles’. effectively pre-formed sets filters designed remove records suspect way. feature ’ function, apply_profile(): see full list data profiles, use show_all(profiles).","code":"galah_config(atlas = \"Australia\") ## Atlas selected: Atlas of Living Australia (ALA) [Australia] # Get total record count since 2000 galah_call() |>   filter(year > 2000) |>   atlas_counts() ## # A tibble: 1 × 1 ##       count ##       <int> ## 1 104768572 # Get total record count for iNaturalist in 2021 galah_call() |>   filter(     year > 2000,     dataResourceName == \"iNaturalist Australia\") |>   atlas_counts() ## # A tibble: 1 × 1 ##     count ##     <int> ## 1 8085678 galah_call() |>   filter(      taxonConceptID == search_taxa(\"Animalia\")$taxon_concept_id,      taxonConceptID != search_taxa(\"Chordata\")$taxon_concept_id   ) |>   group_by(class) |>   atlas_counts() ## # A tibble: 70 × 2 ##    class          count ##    <chr>          <int> ##  1 Insecta      6636702 ##  2 Gastropoda   1079236 ##  3 Arachnida     880799 ##  4 Maxillopoda   701466 ##  5 Malacostraca  667094 ##  6 Polychaeta    278997 ##  7 Bivalvia      238787 ##  8 Anthozoa      228733 ##  9 Cephalopoda   150198 ## 10 Demospongiae  119207 ## # ℹ 60 more rows galah_call() |>   filter(year > 2000) |>   apply_profile(ALA) |>   atlas_counts() ## # A tibble: 1 × 1 ##      count ##      <int> ## 1 91982400"},{"path":"https://galah.ala.org.au/R/articles/narrow_your_results.html","id":"group_by","dir":"Articles","previous_headings":"","what":"group_by","title":"Narrow your results","text":"Use group_by() group summarise record counts specified fields.","code":"# Get record counts since 2010, grouped by year and basis of record galah_call() |>   filter(year > 2015 & year <= 2020) |>   group_by(year, basisOfRecord) |>   atlas_counts() ## # A tibble: 35 × 3 ##    year  basisOfRecord         count ##    <chr> <chr>                 <int> ##  1 2020  HUMAN_OBSERVATION   6859463 ##  2 2020  OCCURRENCE           188090 ##  3 2020  PRESERVED_SPECIMEN    87730 ##  4 2020  MACHINE_OBSERVATION   39642 ##  5 2020  OBSERVATION            4417 ##  6 2020  MATERIAL_SAMPLE        2104 ##  7 2020  LIVING_SPECIMEN          62 ##  8 2019  HUMAN_OBSERVATION   6104069 ##  9 2019  PRESERVED_SPECIMEN   166446 ## 10 2019  OCCURRENCE            93853 ## # ℹ 25 more rows"},{"path":"https://galah.ala.org.au/R/articles/narrow_your_results.html","id":"select","dir":"Articles","previous_headings":"","what":"select","title":"Narrow your results","text":"Use select() choose columns returned downloading records. can also use dplyr functions work within dplyr::select().","code":"Return columns 'kingdom', 'eventDate' & `species` only occurrences <- galah_call() |>   identify(\"reptilia\") |>   filter(year == 1930) |>   select(kingdom, species, eventDate) |>   atlas_occurrences()  occurrences |> head() ## # A tibble: 6 × 3 ##   kingdom  species               eventDate ##   <chr>    <chr>                 <dttm> ## 1 Animalia Drysdalia coronoides  1930-06-16 00:00:00 ## 2 Animalia Antaresia maculosa    1930-01-01 00:00:00 ## 3 Animalia NA                    1930-04-23 00:00:00 ## 4 Animalia Stegonotus australis  1930-01-01 00:00:00 ## 5 Animalia Oxyuranus scutellatus 1930-01-01 00:00:00 ## 6 Animalia Lerista wilkinsi      1930-01-01 00:00:00 occurrences <- galah_call() |>   identify(\"reptilia\") |>   filter(year == 1930) |>   select(starts_with(\"accepted\") | ends_with(\"record\")) |>   atlas_occurrences() ## Retrying in 1 seconds. occurrences |> head() ## # A tibble: 6 × 6 ##   acceptedNameUsage acceptedNameUsageID basisOfRecord      raw_basisOfRecord OCCURRENCE_STATUS_INFE…¹ userDuplicateRecord ##   <chr>             <lgl>               <chr>              <chr>             <lgl>                    <lgl>               ## 1 <NA>              NA                  HUMAN_OBSERVATION  HumanObservation  FALSE                    FALSE               ## 2 <NA>              NA                  PRESERVED_SPECIMEN PreservedSpecimen FALSE                    FALSE               ## 3 <NA>              NA                  PRESERVED_SPECIMEN PreservedSpecimen FALSE                    FALSE               ## 4 <NA>              NA                  HUMAN_OBSERVATION  HumanObservation  FALSE                    FALSE               ## 5 <NA>              NA                  PRESERVED_SPECIMEN PreservedSpecimen FALSE                    FALSE               ## 6 <NA>              NA                  PRESERVED_SPECIMEN PreservedSpecimen FALSE                    FALSE               ## # ℹ abbreviated name: ¹​OCCURRENCE_STATUS_INFERRED_FROM_BASIS_OF_RECORD"},{"path":"https://galah.ala.org.au/R/articles/narrow_your_results.html","id":"geolocate","dir":"Articles","previous_headings":"","what":"geolocate","title":"Narrow your results","text":"Use geolocate() specify geographic area region limit search. geolocate() also accepts shapefiles. complex shapefiles may need simplified first (e.g., using rmapshaper::ms_simplify())","code":"# Get list of perameles species in area specified: # (Note: This can also be specified by a shapefile) wkt <- \"POLYGON((131.36328125 -22.506468769126,135.23046875 -23.396716654542,134.17578125 -27.287832521411,127.40820312499 -26.661206402316,128.111328125 -21.037340349154,131.36328125 -22.506468769126))\"  galah_call() |>   identify(\"perameles\") |>   geolocate(wkt) |>   atlas_species() ## # A tibble: 1 × 11 ##   taxon_concept_id species_name scientific_name_auth…¹ taxon_rank kingdom phylum class order family genus vernacular_name ##   <chr>            <chr>        <chr>                  <chr>      <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>           ## 1 https://biodive… Perameles e… Spencer, 1897          species    Animal… Chord… Mamm… Pera… Peram… Pera… Desert Bandico… ## # ℹ abbreviated name: ¹​scientific_name_authorship"},{"path":"https://galah.ala.org.au/R/articles/object_oriented_programming.html","id":"advanced-query-building","dir":"Articles","previous_headings":"","what":"Advanced query building","title":"Object-Oriented Programming","text":"usual way begin query request data galah using galah_call(). However, function now calls one three types request_ functions. prefer, can begin pipe one dedicated request_ functions (rather galah_call()) depending type data want collect. example, want download occurrences, use request_data(): ’ll notice query differs slightly query structure used earlier versions galah. desired data type, \"occurrences\", specified beginning query within request_data() rather end using atlas_occurrences(). Specifying data type start allows users make use advanced query building using three newly implemented stages query building: collapse(), compute() collect(). stages mirror existing functions dplyr querying databases, act following way: collapse() converts object query. allows users inspect API calls sent. Depending request, function may also call ‘supplementary’ APIs collect required information, Taxon Concept Identifiers field names. compute() intended send query question requested API processing. particularly important occurrences, can useful submit query retrieve later time. compute() stage required, however, compute() simply converts query new class (computed_query). collect() retrieves requested data workspace, returning tibble. can use sequence, just leap ahead stage want: benefit using collapse(), compute() collect() queries modular. particularly useful large data requests galah. Users can send query using compute(), download data query finished — downloading collect() later — rather waiting request finish within R. Additionally, functions modular generally easier interrogate debug. Previously functions several different things, making difficult know APIs called, , purpose. Partitioning queries three distinct stages much transparent, allows users check query construction prior sending request. example, query constructed following information, returned collapse(). collapse() stage includes additional argument (.expand) , set TRUE, shows APIs called construct user-requested query. especially useful debugging.","code":"x <- request_data(\"occurrences\") |> # note that \"occurrences\" is the default `type`   filter(species == \"Crinia tinnula\",           year == 2010) |>   collect() x <- request_data() |>   filter(genus == \"Crinia\", year == 2020) |>   group_by(species) |>   arrange(species) |>   count()  collapse(x) ## Object of class query with type data/occurrences-count-groupby  ## url: https://api.ala.org.au/occurrences/occurrences/facets?fq=%28genus%3A%2...  ## arrange: species (ascending) compute(x) ## Object of class computed_query with type data/occurrences-count-groupby  ## url: https://api.ala.org.au/occurrences/occurrences/facets?fq=%28genus%3A%2...  ## arrange: species (ascending) collect(x) |> head() ## # A tibble: 6 × 2 ##   species              count ##   <chr>                <int> ## 1 Crinia bilingua         74 ## 2 Crinia deserticola     253 ## 3 Crinia flindersensis     3 ## 4 Crinia georgiana      1509 ## 5 Crinia glauerti       3111 ## 6 Crinia insignifera     530 # Create and send query to be calculated server-side request <- request_data() |>   identify(\"perameles\") |>   filter(year > 1900) |>   compute()    # Download data request |>   collect() request_data() |>   identify(\"perameles\") |>   filter(year > 1900) |>   collapse() ## Object of class query with type data/occurrences  ## url: https://api.ala.org.au/occurrences/occurrences/offline/download?fq=%28..."},{"path":"https://galah.ala.org.au/R/articles/object_oriented_programming.html","id":"object-classes","dir":"Articles","previous_headings":"","what":"Object classes","title":"Object-Oriented Programming","text":"hood, different query-building verbs amend supplied object new class: collapse() returns class query, list containing type slot one urls compute() returns single object class computed_query collect() returns tibble can called directly, via method type arguments galah_call(), specify dedicated request_ function data type return. demonstrate mean, take following calls, despite using different syntax, return number records available year 2020: Another example list available fields selected atlas: show values states territories: request_metadata() modular show_all(), little benefit using applications. However, cases, larger databases like GBIF return huge data.frames metadata called via show_all(). Using request_metdata() allows users specify slice_head() line within pipe get around issue.","code":"# new syntax request_data() |>   filter(year == 2020) |>   count() |>   collect()  # similar, but using `galah_call()` galah_call(method = \"data\",            type = \"occurrences-count\") |>   filter(year == 2020) |>   collect()  # original syntax galah_call() |>   galah_filter(year == 2020) |>   atlas_counts() request_metadata(type = \"fields\") |>   collect()  galah_call(method = \"metadata\",             type = \"fields\") |>   collect()  show_all(fields) request_metadata() |>   filter(field == \"cl22\") |>   unnest() |>   collect()  galah_call(method = \"metadata\",             type = \"fields-unnest\") |>   galah_filter(id == \"cl22\") |>   collect()  search_all(fields, \"cl22\") |>   show_values()"},{"path":"https://galah.ala.org.au/R/articles/object_oriented_programming.html","id":"which-syntax-should-i-prefer","dir":"Articles","previous_headings":"","what":"Which syntax should I prefer?","title":"Object-Oriented Programming","text":"Despite benefits, plans require users call masked functions. Functions prefixed galah_ atlas_ going away. Indeed, perfect redundancy old new syntax cases, others serve different purposes. atlas_media() example, several calls made joined way reduces number steps required user. hood, however, atlas_ functions now entirely built using syntax.","code":""},{"path":"https://galah.ala.org.au/R/articles/quick_start_guide.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Quick start guide","text":"install CRAN: install development version GitHub: Load package","code":"install.packages(\"galah\") install.packages(\"remotes\") remotes::install_github(\"AtlasOfLivingAustralia/galah\") library(galah)"},{"path":"https://galah.ala.org.au/R/articles/quick_start_guide.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"Quick start guide","text":"default, galah downloads information Atlas Living Australia (ALA). show full list organisations currently supported galah, use show_all(atlases). Use galah_config() set node organisation using region, name, acronym. set, galah automatically populate server configuration selected GBIF node. download occurrence records chosen GBIF node, need register account (using website), provide registration email galah. download GBIF, need provide email, username, password. can find full list configuration options running ?galah_config.","code":"show_all(atlases) ## # A tibble: 10 × 4 ##    region         institution                                                             acronym url                     ##    <chr>          <chr>                                                                   <chr>   <chr>                   ##  1 Australia      Atlas of Living Australia                                               ALA     https://www.ala.org.au  ##  2 Austria        Biodiversitäts-Atlas Österreich                                         BAO     https://biodiversityat… ##  3 Brazil         Sistemas de Informações sobre a Biodiversidade Brasileira               SiBBr   https://sibbr.gov.br    ##  4 France         Portail français d'accès aux données d'observation sur les espèces      OpenObs https://openobs.mnhn.fr ##  5 Global         Global Biodiversity Information Facility                                GBIF    https://gbif.org        ##  6 Guatemala      Sistema Nacional de Información sobre Diversidad Biológica de Guatemala SNIBgt  https://snib.conap.gob… ##  7 Portugal       GBIF Portugal                                                           GBIF.pt https://www.gbif.pt     ##  8 Spain          GBIF Spain                                                              GBIF.es https://gbif.es         ##  9 Sweden         Swedish Biodiversity Data Infrastructure                                SBDI    https://biodiversityda… ## 10 United Kingdom National Biodiversity Network                                           NBN     https://nbn.org.uk galah_config(atlas = \"GBIF\",              username = \"user1\",              email = \"email@email.com\",              password = \"my_password\")"},{"path":"https://galah.ala.org.au/R/articles/quick_start_guide.html","id":"basic-syntax","dir":"Articles","previous_headings":"","what":"Basic syntax","title":"Quick start guide","text":"standard method construct queries galah via piped functions. Pipes galah start galah_call() function, typically end collect(), though collapse() compute() also supported. development team use base pipe default (|>), magrittr pipe (%>%) work . pass complex queries, can use additional dplyr functions filter(), select(), group_by(). GBIF node allows query using set -built fields. can investigate fields available using show_all() search_all():","code":"galah_config(atlas = \"ALA\",              verbose = FALSE) galah_call() |>   count() |>   collect() ## # A tibble: 1 × 1 ##       count ##       <int> ## 1 146185520 galah_call() |>    filter(year >= 2020) |>    count() |>   collect() ## # A tibble: 1 × 1 ##      count ##      <int> ## 1 40200358 search_all(fields, \"australian states\") ## # A tibble: 2 × 3 ##   id     description                            type   ##   <chr>  <chr>                                  <chr>  ## 1 cl2013 ASGS Australian States and Territories fields ## 2 cl22   Australian States and Territories      fields"},{"path":"https://galah.ala.org.au/R/articles/quick_start_guide.html","id":"taxonomic-searches","dir":"Articles","previous_headings":"","what":"Taxonomic searches","title":"Quick start guide","text":"narrow search particular taxonomic group, use identify(). Note function accepts scientific names case sensitive. ’s good practice first use search_taxa() check taxa provide returns correct taxonomic results. want query something number records, modify type argument galah_call(). ’ll query number species:","code":"search_taxa(\"reptilia\") # Check whether taxonomic info is correct ## # A tibble: 1 × 9 ##   search_term scientific_name taxon_concept_id                               rank  match_type kingdom phylum class issues ##   <chr>       <chr>           <chr>                                          <chr> <chr>      <chr>   <chr>  <chr> <chr>  ## 1 reptilia    REPTILIA        https://biodiversity.org.au/afd/taxa/682e1228… class exactMatch Animal… Chord… Rept… noIss… galah_call() |>   identify(\"reptilia\") |>    filter(year >= 2020) |>    count() |>   collect() ## # A tibble: 1 × 1 ##    count ##    <int> ## 1 338434 galah_call(type = \"species\") |>   identify(\"reptilia\") |>    filter(year >= 2020) |>    count() |>   collect() ## # A tibble: 1 × 1 ##   count ##   <int> ## 1   883"},{"path":"https://galah.ala.org.au/R/articles/quick_start_guide.html","id":"download","dir":"Articles","previous_headings":"","what":"Download","title":"Quick start guide","text":"download records—rather find many records available—simply remove count() function pipe. Check vignettes detail use functions.","code":"result <- galah_call() |>   identify(\"Litoria\") |>   filter(year >= 2020, cl22 == \"Tasmania\") |>   select(basisOfRecord, group = \"basic\") |>   collect() ## Retrying in 1 seconds. result |> head() ## # A tibble: 6 × 9 ##   recordID            scientificName taxonConceptID decimalLatitude decimalLongitude eventDate           occurrenceStatus ##   <chr>               <chr>          <chr>                    <dbl>            <dbl> <dttm>              <chr>            ## 1 00052544-d943-42e9… Litoria ewing… https://biodi…           -42.9             147. 2022-09-19 00:00:00 PRESENT          ## 2 00168ca6-84d0-4af1… Litoria ranif… https://biodi…           -41.2             146. 2023-12-21 10:20:19 PRESENT          ## 3 001a43fe-8586-4064… Litoria ewing… https://biodi…           -43.0             147. 2021-08-07 00:00:00 PRESENT          ## 4 00250163-ec50-4eda… Litoria ranif… https://biodi…           -41.2             147. 2023-08-23 11:49:28 PRESENT          ## 5 003e0f63-9f95-4af9… Litoria ewing… https://biodi…           -42.9             148. 2022-12-24 06:27:00 PRESENT          ## 6 0070521f-bb45-46fb… Litoria ewing… https://biodi…           -43.1             147. 2023-12-20 14:29:23 PRESENT          ## # ℹ 2 more variables: dataResourceName <chr>, basisOfRecord <chr>"},{"path":"https://galah.ala.org.au/R/articles/spatial_filtering.html","id":"contextual-and-spatial-layers","dir":"Articles","previous_headings":"","what":"Contextual and spatial layers","title":"Spatial filtering","text":"Often want filter results commonly defined spatial regions, states, LGAs IBRA/IMCRA regions. ALA contains large range (>100) contextual spatial layers, -built searchable queriable fields. denoted names beginning \"cl\", followed identifying number may 6 digits long. fields based shapefiles, contain names regions layers record lies . strongly recommend using search_fields() check whether contextual layer already exists ALA matches require proceeding methods spatial filtering. fields able queried filter()generally easier use. Suppose interested querying records Red-Necked Avocet (Recurvirostra novaehollandiae) Coorong wetlands South Australia. can search ALA fields wetlands. search identifies layer cl901 seems match looking . can either view possible values field show_values(), search particular field. can filter occurrences exact matches value, \"Lake Eyre\". galah query can built follows:","code":"library(galah) library(dplyr) library(gt) library(sf) galah_config(email = \"your_email_here\", verbose = FALSE) search_fields(\"wetlands\") ## # A tibble: 2 × 3 ##   id      description                       type   ##   <chr>   <chr>                             <chr>  ## 1 cl901   Directory of Important Wetlands   fields ## 2 cl11192 Ramsar_Wetlands_of_AustraliaWGS84 fields search_fields(\"cl901\") |> search_values(\"coorong\") ## • Showing values for 'cl901'. ## # A tibble: 1 × 1 ##   cl901                                       ##   <chr>                                       ## 1 The Coorong, Lake Alexandrina & Lake Albert galah_call() |>   identify(\"Recurvirostra novaehollandiae\") |>   filter(cl901 == \"The Coorong, Lake Alexandrina & Lake Albert\") |>   collect() |>   head(5) |>   gt::gt() ## Retrying in 1 seconds. ## Retrying in 2 seconds. ## Retrying in 4 seconds."},{"path":"https://galah.ala.org.au/R/articles/spatial_filtering.html","id":"filtering-data-to-a-polygon","dir":"Articles","previous_headings":"","what":"Filtering data to a polygon","title":"Spatial filtering","text":"server-side spatial information useful, likely cases shapefile region wish query pre-loaded contextual layer ALA. case, shapefiles can introduced filtering process using {sf} package geolocate() function. Shapefiles can provided sf object, whether importing sf::st_read() taking POLYGON MULTIPOLYGON character string transforming sf::st_as_sfc(). instance, might interested species occurrences King George Square, Brisbane. can take MULTIPOLYGON object square (sourced Brisbane City Council) transform sfc sf objects. can provide MULTIPOLYGON filter argument geolocate() assess species recorded King George Square. second argument geolocate() called type, defaults value \"polygon\". setting type argument \"bbox\", provided POLYGON MULTIPOLYGON converted smallest bounding box (rectangle) contains POLYGON. case, records included may exactly lie inside provided shape.","code":"king_george_sq <- \"MULTIPOLYGON(((153.0243 -27.46886, 153.0242 -27.46896, 153.0236 -27.46837, 153.0239 -27.46814, 153.0239 -27.46813, 153.0242 -27.46789, 153.0244 -27.46805, 153.0245 -27.46821, 153.0246 -27.46828, 153.0247 -27.46835, 153.0248 -27.46848, 153.0246 -27.4686, 153.0246 -27.46862, 153.0245 -27.46871, 153.0243 -27.46886)))\" |>   sf::st_as_sfc() |>    sf::st_as_sf() galah_call() |>   geolocate(king_george_sq) |>   select(decimalLatitude,           decimalLongitude,           eventDate,           scientificName,           vernacularName) |>   collect() |>    head(10) |>   gt::gt() galah_call() |>   geolocate(king_george_sq, type = \"bbox\") |>   select(decimalLatitude,           decimalLongitude,           eventDate,           scientificName,           vernacularName) |>   collect() |>   head(10) |>   gt::gt() ## Data returned for bounding box: ## xmin = 153.0236 xmax = 153.0248 ymin = -27.46896 ymax = -27.46789"},{"path":"https://galah.ala.org.au/R/articles/spatial_filtering.html","id":"large-shapefiles","dir":"Articles","previous_headings":"Filtering data to a polygon","what":"Large shapefiles","title":"Spatial filtering","text":"type argument option \"bbox\" provided sf objects >500 vertices accepted ALA. event large shapefile, using type = \"bbox\" least enable initial reduction data downloaded, finer filtering actual shapefile obtain desired set occurrences. Alternatively, one can also perform \"bbox\" reduction passing shape geolocate() using sf::st_bbox(). common situation occur shapefile multiple shapes provided, interested grouping results shape. mock workflow using subset shapefile 2,184 Brisbane parks. Let’s say interested knowing parks Brisbane postcode 4075 occurrences Scaly-Breasted Lorikeet (Trichoglossus chlorolepidotus) since 2020. can download entire shapefile link , perform filtering summarising follows: shapefiles cover large geographic areas caveat even bounding box doesn’t restrict number records value can downloaded easily. case, recommend nuances detailed methods can performed using looping techniques. One ALA Labs blog posts, Hex maps species occurrence data, written detailing approach larger problems .","code":"brisbane_parks <- sf::st_read(\"path/to/Park___Locations.shp\") |>   sf::st_make_valid() |>   filter(POST_CODE == 4075) # Convert shapefile to a bounding box brisbane_parks_bbox <- brisbane_parks |> sf::st_bbox()  # Find all occurrences of Trichoglossus chlorolepidotus in the bounding box in 2022 lorikeet_brisbane <- galah_call() |>   filter(scientificName == \"Trichoglossus chlorolepidotus\",           year >= 2020) |>   geolocate(brisbane_parks_bbox, type = \"bbox\") |>   collect() ## Data returned for bounding box: ## xmin = 152.96331 xmax = 152.99668 ymin = -27.57737 ymax = -27.51606 ## Retrying in 1 seconds. # Filter records down to only those in the shapefile polygons lorikeet_brisbane |>   # Create a point geometry based on the occurrence coordinates   sf::st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"), crs = sf::st_crs(brisbane_parks), remove = FALSE) |>   # identify which park each occurrence sits in with st_intersects()   mutate(intersection = sf::st_intersects(geometry, brisbane_parks) |> as.integer(),          park = ifelse(is.na(intersection), NA, brisbane_parks$PARK_NAME[intersection])) |>   # Filter out occurrences that did not occur in a park   filter(!is.na(park)) |>   # Drop the geometry column   sf::st_drop_geometry() |>   # Summarise the top 10 parks for lorikeet sightings in 2022   group_by(park) |>   summarise(counts = n()) |>   arrange(desc(counts)) |>   head(10) ## # A tibble: 10 × 2 ##    park                           counts ##    <chr>                           <int> ##  1 NYUNDARE-BA PARK                  552 ##  2 SHERWOOD ARBORETUM                472 ##  3 FAULKNER PARK                      64 ##  4 FORT ROAD BUSHLAND                 46 ##  5 STRICKLAND TERRACE PARK            44 ##  6 BENARRAWA RESERVE                  34 ##  7 GRACEVILLE RIVERSIDE PARKLANDS     32 ##  8 NOSWORTHY PARK                     17 ##  9 HORACE WINDOW RESERVE              14 ## 10 GRACEVILLE AVENUE PARK              7"},{"path":"https://galah.ala.org.au/R/articles/taxonomic_filtering.html","id":"search_taxa","dir":"Articles","previous_headings":"","what":"search_taxa()","title":"Taxonomic filtering","text":"search_taxa() enables users look taxonomic names downloading data, allows disambiguating homonyms checking search term matches taxon name ALA . search_taxa() returns scientific name, authorship, rank, full classification taxon matched provided search term.","code":"search_taxa(\"Petroica boodang\") |> gt::gt() # Muscicapa chrysoptera is a synonym for the Flame Robin, Petroica phoenicea # Guniibuu is the Yuwaalaraay Indigenous name for the Red-Capped Robin, Petroica goodenovii search_taxa(\"Muscicapa chrysoptera\", \"Guniibuu\") |> gt::gt() search_taxa(\"Morganella\") |> gt::gt() ## Warning: Search returned multiple taxa due to a homonym issue. ## ℹ Please provide another rank in your search to clarify taxa. ## ℹ Use a `tibble` to clarify taxa, see `?search_taxa`. ## ✖ Homonym issue with \"Morganella\". search_taxa(tibble(kingdom = \"Fungi\", genus = \"Morganella\")) |> gt::gt()"},{"path":"https://galah.ala.org.au/R/articles/taxonomic_filtering.html","id":"identify","dir":"Articles","previous_headings":"","what":"identify()","title":"Taxonomic filtering","text":"identify() similar search_taxa(), except can used within piped workflow retrieve counts, species, records e.g.","code":"galah_call() |>   identify(\"Petroica boodang\") |>   count() |>   collect() ## # A tibble: 1 × 1 ##    count ##    <int> ## 1 132981 galah_call(type = \"species\") |>   identify(\"Muscicapa chrysoptera\", \"Guniibuu\") |>   collect() |>    gt::gt() galah_call() |>   identify(tibble(kingdom = \"Fungi\", genus = \"Morganella\")) |>   collect() |>   head() |>    gt::gt() ## Retrying in 1 seconds."},{"path":"https://galah.ala.org.au/R/articles/taxonomic_filtering.html","id":"filter","dir":"Articles","previous_headings":"","what":"filter()","title":"Taxonomic filtering","text":"filter() subsets records searching exact matches expression, may also used taxonomic filtering e.g. Alternatively, use filter() first checking taxonomy search_taxa(), place identify(): also possible specify several species using filter(): can useful searching paraphyletic polyphyletic groups, done using identify(). example, get counts non-chordates:","code":"galah_call() |>   filter(species == \"Petroica boodang\") |>   count() |>   collect() ## # A tibble: 1 × 1 ##    count ##    <int> ## 1 132981 robins <- search_taxa(\"Muscicapa chrysoptera\", \"Guniibuu\")   galah_call() |>   filter(taxonConceptID == robins$taxon_concept_id) |>   count() |>   collect() ## # A tibble: 1 × 1 ##   count ##   <int> ## 1 88434 aus_petroica <- c(\"Petroica boodang\", \"Petroica goodenovii\",                    \"Petroica phoenicea\", \"Petroica rosea\",                   \"Petroica rodinogaster\", \"Petroica multicolor\")  galah_call() |>   filter(species %in% aus_petroica) |>   group_by(species, vernacularName) |>   count() |>    collect() |>   gt::gt() galah_call() |>   filter(kingdom == \"Animalia\", phylum != \"Chordata\") |>   group_by(phylum) |>   count() |>   collect() |>   head() |>    gt::gt()"},{"path":"https://galah.ala.org.au/R/articles/taxonomic_filtering.html","id":"filter-identify-and-taxonomic-ranks","dir":"Articles","previous_headings":"","what":"filter(), identify(), and taxonomic ranks","title":"Taxonomic filtering","text":"Deciding using filter() identify() query comes record classified, whether correct unique name classification taxa interest. ALA fields primary taxonomic ranks (kingdom, phylum, class, order, family, genus, species) secondary ranks (e.g. subfamily, subgenus), may used galah_filter() galah_identify(). Additionally, field named scientificName, refers lowest taxonomic rank record identified e.g. , instance, correct species subspecies name, searching matches species subspecies fields, respectively, provide precise results. field scientificName may include subgenera. ’ve used search_taxa() get ALA-matched name taxon want records identified particular level classification, searching matches scientificName recommended. Paraphyletic polyphyletic groups may contain taxa identified different taxonomic levels. case, simpler use search_taxa() identify() rather filter(). example , search_taxa() matches terms one genus, three species, two subspecies. can used piped workflow identify().","code":"galah_call() |>   identify(tibble(genus = \"Pitta\")) |>   group_by(scientificName, taxonRank) |>   count() |>   collect() |>   filter(!is.na(scientificName)) |>   gt::gt() tas_endemic <- c(\"Sarcophilus\", # Tasmanian Devil                  \"Bettongia gaimardi\", # Tasmanian Bettong                  \"Melanodryas vittata\", # Dusky Robin                  \"Platycercus caledonicus\",# Green Rosella                  \"Aquila audax fleayi\", # Tasmanian Wedge-Tailed Eagle                  \"Tyto novaehollandiae castanops\") # Tasmanian Masked Owl  search_taxa(tas_endemic) |> gt::gt() galah_call() |>   identify(tas_endemic) |>   group_by(scientificName) |>   count() |>   collect() |>   arrange(scientificName) |>   gt::gt()"},{"path":"https://galah.ala.org.au/R/articles/temporal_filtering.html","id":"year-month-and-day","dir":"Articles","previous_headings":"","what":"Year, Month and Day","title":"Temporal filtering","text":"ALA contains -built year, month, day fields every record. queried numeric fields (.e. July = 7) can used quick data exploration filtering. fields useful date limits query can easily defined year, month /day. instance, can get monthly counts amphibians 2021 using year month fields. also important observe outputted month column type character even though values numeric. case year, month day fields. However, can queried either numeric character values within filter(). One limitation using fields queries filter() independence; used query within windows bounded two dates day month filters applied universally. instance, consider native perennial Australian wildflower Chamaescilla corymbosa, whose known growth flowering times August–October. might interested number records species first week spring (.e. September) last 10 years. following query provide results 1/9/2013 7/9/2023. Rather, return results fall within 3 windows .","code":"library(galah) library(tidyverse) library(gt) library(lubridate) galah_config(email = \"your_email_here\", verbose = FALSE) galah_call() |>   filter(class == \"Amphibia\", year == 2021) |>   group_by(month) |>   count() |>   collect() ## # A tibble: 12 × 2 ##    month count ##    <chr> <int> ##  1 11    83810 ##  2 10    38208 ##  3 12    36578 ##  4 9     27616 ##  5 1     22352 ##  6 8     18758 ##  7 3     17964 ##  8 2     16550 ##  9 7      8945 ## 10 4      7769 ## 11 6      6961 ## 12 5      5996 galah_call() |>   filter(species == \"Chamaescilla corymbosa\",          year >= 2013,           year <= 2023,           month == 9,           day >= 1,           day <= 7) |>   group_by(year) |>   count() |>   collect() |>   arrange(year) ## # A tibble: 11 × 2 ##    year  count ##    <chr> <int> ##  1 2013      8 ##  2 2014     13 ##  3 2015      8 ##  4 2016      7 ##  5 2017      1 ##  6 2018      9 ##  7 2019      6 ##  8 2020     20 ##  9 2021     36 ## 10 2022     26 ## 11 2023     54"},{"path":"https://galah.ala.org.au/R/articles/temporal_filtering.html","id":"occurrence-dates","dir":"Articles","previous_headings":"","what":"Occurrence dates","title":"Temporal filtering","text":"bespoke way query exact dates records, users can use eventDate field. field contains exact date time information records enables specific time windows queried easily. caveat time/date must provided specific format filter() query work. required format dates eventDate ISO 8601 International Date Standard format. requires dates times form “YYYY-MM-DDTHH:MM:SSZ”. Note T middle actual letter “T” delimit date time components, “Z” officially denotes time queried UTC (Greenwich Meridian) time. Timezones can confusing best times, however easiest remember ALA records recorded local time location, times treated effectively UTC times. upshot specific formatting , instance, time writing paragraph, 4:26pm 2nd August 2023, represented \"2023-08-02T16:26:44Z\" ALA, even though officially timezone \"+0930\". eventDate specifies time seconds, recommended greater less queries used rather exact matches. used filter(), can easily identify many records humpback whale (Megaptera novaeangliae) occurred since species removed Australian threatened species list 26/02/2022. can unintuitive provide dates format. Luckily, simple convert standard R dates {lubridate} dates format already required “YYYY-MM-DD” form. took date (26/02/2022), converted form using base R lubridate follows: sending query, outputted eventDate values returned galah query date class \"POSIXct\".","code":"galah_call() |>   filter(species == \"Megaptera novaeangliae\",           eventDate >= \"2022-02-26T00:00:00Z\") |>   count() |>   collect() ## # A tibble: 1 × 1 ##   count ##   <int> ## 1  1240 humpback_date <- \"26/02/2022\" # Base R paste0(as.Date(humpback_date, format = \"%d/%m/%Y\"), \"T00:00:00Z\") ## [1] \"2022-02-26T00:00:00Z\" # lubridate paste0(dmy(humpback_date), \"T00:00:00Z\") ## [1] \"2022-02-26T00:00:00Z\""},{"path":"https://galah.ala.org.au/R/articles/temporal_filtering.html","id":"upload-dates","dir":"Articles","previous_headings":"","what":"Upload dates","title":"Temporal filtering","text":"important date field present ALA pertains date record provided ALA. field called firstLoadedDate formatted exactly manner eventDate. Different data providers provide batches records ALA different intervals. iNaturalist Australia provide weekly uploads data, eBird provides yearly uploads. firstLoadedDate can especially useful finding new records ALA provided since last checked. instance, can use see many observations Sulphur-Crested Cockatoos recorded first week 2023 actually loaded ALA following week: Note lower bound required firstLoadedDate eventDate imposes proxy (records can’t uploaded ’ve occurred).","code":"# Total records of Cactua galerita in Jan 1-7 galah_call() |>   filter(species == \"Cacatua galerita\",          eventDate >= \"2023-01-07T00:00:00Z\",           eventDate < \"2023-01-08T00:00:00Z\") |>   count() |>   collect() ## # A tibble: 1 × 1 ##   count ##   <int> ## 1   407 # Records of Cactua galerita uploaded in Jan 1-14 galah_call() |>   filter(species == \"Cacatua galerita\",          eventDate >= \"2023-01-07T00:00:00Z\",           eventDate < \"2023-01-08T00:00:00Z\",          firstLoadedDate < \"2023-01-15T00:00:00Z\") |>   count() |>   collect() ## # A tibble: 1 × 1 ##   count ##   <int> ## 1     5"},{"path":"https://galah.ala.org.au/R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Westgate. Author, maintainer. Dax Kellie. Author. Matilda Stevenson. Author. Peggy Newman. Author.","code":""},{"path":"https://galah.ala.org.au/R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Westgate M, Kellie D, Stevenson M, Newman P (2025). galah: Biodiversity Data GBIF Node Network. R package version 2.1.2, https://CRAN.R-project.org/package=galah.","code":"@Manual{,   title = {galah: Biodiversity Data from the GBIF Node Network},   author = {Martin Westgate and Dax Kellie and Matilda Stevenson and Peggy Newman},   year = {2025},   note = {R package version 2.1.2},   url = {https://CRAN.R-project.org/package=galah}, }"},{"path":[]},{"path":"https://galah.ala.org.au/R/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Biodiversity Data from the GBIF Node Network","text":"galah R interface biodiversity data hosted Global Biodiversity Information Facility (GBIF) members GBIF node network maintain APIs (.e. ‘living atlases’). organisations collate store observations individual life forms, using ‘Darwin Core’ data standard. galah built maintained Science & Decision Support Team Atlas Living Australia (ALA). galah enables users locate download species occurrence records (observations, specimens, eDNA records, etc.), taxonomic information, associated media images sounds, restrict queries particular taxa locations. Users can specify columns returned query, restrict results occurrences meet particular data-quality criteria. functions return tibble standard format. package named bird name (Eolophus roseicapilla), widely-distributed endemic Australian species. logo designed Ian Brennan. comments, questions suggestions, please contact us.","code":""},{"path":"https://galah.ala.org.au/R/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Biodiversity Data from the GBIF Node Network","text":"quick start guide provides introduction package functions. outline package structure, list available functions, run ?galah view reference page.","code":""},{"path":"https://galah.ala.org.au/R/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Biodiversity Data from the GBIF Node Network","text":"Install CRAN: Install development version GitHub: galah depends sf location-based searches. install galah need make sure system meets sf system requirements, specified .","code":"install.packages(\"galah\") install.packages(\"remotes\") remotes::install_github(\"AtlasOfLivingAustralia/galah-R\")"},{"path":[]},{"path":"https://galah.ala.org.au/R/index.html","id":"citations","dir":"","previous_headings":"","what":"Citations","title":"Biodiversity Data from the GBIF Node Network","text":"generate citation package version using, can run ’re using occurrence data downloaded galah publication, please generate DOI cite . request DOI download occurrence record, set mint_doi = TRUE call atlas_occurrences(). generate citation downloaded occurrence records, pass tibble generated atlas_citation().","code":"citation(package = \"galah\") # Download occurrence records with a DOI  occ <- atlas_occurrences(..., mint_doi = TRUE)  # See DOI attr(occ, \"doi\")  # Generate citation atlas_citation(occ)"},{"path":"https://galah.ala.org.au/R/reference/apply_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a data quality profile — apply_profile","title":"Apply a data quality profile — apply_profile","text":"'profile' group filters pre-applied ALA. Using data profile allows query filtered quickly relevant quality-assured data fit--purpose. example, \"ALA\" profile designed exclude lower quality records, whereas profiles apply filters specific species distribution modelling (e.g. CDSM). Note one profile can loaded time; multiple profiles given, first valid profile used. bespoke editing filters within profile, use filter.data_request().","code":""},{"path":"https://galah.ala.org.au/R/reference/apply_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a data quality profile — apply_profile","text":"","code":"apply_profile(.data, ...)  galah_apply_profile(...)"},{"path":"https://galah.ala.org.au/R/reference/apply_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a data quality profile — apply_profile","text":".data object class data_request ... profile name. string - name abbreviation data quality profile apply query. Valid values can seen using show_all(profiles)","code":""},{"path":"https://galah.ala.org.au/R/reference/apply_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a data quality profile — apply_profile","text":"updated data_request completed data_profile slot.","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/apply_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a data quality profile — apply_profile","text":"","code":"if (FALSE) { # \\dontrun{ # Apply a data quality profile to a query galah_call() |>    identify(\"reptilia\") |>   filter(year == 2021) |>   apply_profile(ALA) |>   atlas_counts() } # }"},{"path":"https://galah.ala.org.au/R/reference/arrange.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — arrange.data_request","title":"Order rows using column values — arrange.data_request","text":"arrange.data_request() arranges rows query server side, meaning query constructed way information arranged query processed. effect used combination count() group_by(). benefit using arrange() within galah_call() pipe sometimes beneficial choose non-default order data delivered , particularly slice_head() also called.","code":""},{"path":"https://galah.ala.org.au/R/reference/arrange.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows using column values — arrange.data_request","text":"","code":"# S3 method for class 'data_request' arrange(.data, ...)  # S3 method for class 'metadata_request' arrange(.data, ...)"},{"path":"https://galah.ala.org.au/R/reference/arrange.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows using column values — arrange.data_request","text":".data object class data_request ... variable arrange resulting tibble . one variables also listed group_by().","code":""},{"path":"https://galah.ala.org.au/R/reference/arrange.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order rows using column values — arrange.data_request","text":"amended data_request completed arrange slot.","code":""},{"path":"https://galah.ala.org.au/R/reference/arrange.data_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — arrange.data_request","text":"","code":"if (FALSE) { # \\dontrun{  # Arrange grouped counts by ascending year galah_call() |>   identify(\"Crinia\") |>   filter(year >= 2020) |>   group_by(year) |>   arrange(year) |>   count() |>   collect()    # Arrange grouped counts by ascending record count galah_call() |>   identify(\"Crinia\") |>   filter(year >= 2020) |>   group_by(year) |>   arrange(count) |>   count() |>   collect()  # Arrange grouped counts by descending year galah_call() |>   identify(\"Crinia\") |>   filter(year >= 2020) |>   group_by(year) |>   arrange(desc(year)) |>   count() |>   collect() } # }"},{"path":"https://galah.ala.org.au/R/reference/atlas_.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a database query — atlas_","title":"Retrieve a database query — atlas_","text":"atlas_ functions retrieve data specified suffix function name (e.g. atlas_counts(), atlas_occurrences()). alternative option using collect() end query pipe. Using atlas_ function collect() end query basically synonymous, atlas_ functions differ two ways: ability accept filter, select etc arguments, rather within pipe; using galah_ forms functions (e.g. galah_filter()). atlas_ functions require specify method type arguments galah_call(), specific data requested.","code":""},{"path":"https://galah.ala.org.au/R/reference/atlas_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a database query — atlas_","text":"","code":"atlas_occurrences(   request = NULL,   identify = NULL,   filter = NULL,   geolocate = NULL,   data_profile = NULL,   select = NULL,   mint_doi = FALSE,   doi = NULL,   file = NULL )  atlas_counts(   request = NULL,   identify = NULL,   filter = NULL,   geolocate = NULL,   data_profile = NULL,   group_by = NULL,   limit = NULL,   type = c(\"occurrences\", \"species\") )  atlas_species(   request = NULL,   identify = NULL,   filter = NULL,   geolocate = NULL,   data_profile = NULL )  atlas_media(   request = NULL,   identify = NULL,   filter = NULL,   select = NULL,   geolocate = NULL,   data_profile = NULL )  atlas_taxonomy(   request = NULL,   identify = NULL,   filter = NULL,   constrain_ids = NULL )"},{"path":"https://galah.ala.org.au/R/reference/atlas_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a database query — atlas_","text":"request optional data_request object: generated call galah_call(). identify tibble: generated call galah_identify(). filter tibble: generated call galah_filter() geolocate string: generated call galah_geolocate() data_profile string: generated call galah_apply_profile() select tibble: generated call galah_select() mint_doi logical: default DOI generated. Set TRUE intend use data publication similar. doi string: (Optional) DOI download. provided overrides arguments. available ALA. file string: (Optional) file name. given, set data date time added. file path (directory) always given galah_config()$package$directory. group_by tibble: generated call galah_group_by(). limit numeric: maximum number categories return, defaulting 100. limit NULL, results returned. categories take . type string: one \"occurrences\" \"species\". Defaults \"occurrences\", returns number records match selected criteria; alternatively returns number species. Formerly accepted arguments (\"records\" \"species\") deprecated remain functional. constrain_ids string: Optional string limit taxon_concept_id's returned. useful restricting taxonomy particular authoritative sources. Default \"biodiversity.org.au\" Australia, infix common National Species List IDs; use NULL suppress source filtering. Regular expressions supported.","code":""},{"path":"https://galah.ala.org.au/R/reference/atlas_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a database query — atlas_","text":"object class tbl_df data.frame (aka tibble). atlas_occurrences() atlas_species(), columns specified select(). atlas_counts(), columns specified group_by().","code":""},{"path":"https://galah.ala.org.au/R/reference/atlas_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a database query — atlas_","text":"Note unless care taken, queries can particularly large. cases simply take long time process, number requested records >50 million, call return data. Users can test whether threshold reached first calling atlas_counts() using arguments intend pass atlas_occurrences(). may also beneficial requesting large number records show progress bar setting verbose = TRUE galah_config(), use compute() run call collecting later collect(). See ?collect_media() information download media files.","code":""},{"path":"https://galah.ala.org.au/R/reference/atlas_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a database query — atlas_","text":"","code":"if (FALSE) { # \\dontrun{ # Best practice is to first calculate the number of records galah_call() |>   filter(year == 2015) |>   atlas_counts()  # Download occurrence records for a specific taxon galah_config(email = \"your_email_here\") # login required for downloads galah_call() |>   identify(\"Reptilia\") |>   atlas_occurrences()  # Download occurrence records in a year range galah_call() |>   identify(\"Litoria\") |>   filter(year >= 2010 & year <= 2020) |>   atlas_occurrences()    # Download occurrences records in a WKT-specified area polygon <- \"POLYGON((146.24960 -34.05930,                      146.37045 -34.05930,                      146.37045 -34.152549,                      146.24960 -34.15254,                      146.24960 -34.05930))\" galah_call() |>    identify(\"Reptilia\") |>   filter(year >= 2010, year <= 2020) |>   st_crop(polygon) |>   atlas_occurrences()    # Get a list of species within genus \"Heleioporus\" # (every row is a species with associated taxonomic data) galah_call() |>   identify(\"Heleioporus\") |>   atlas_species()  # Download Regent Honeyeater records with multimedia attached # Note this returns one row per multimedia file, NOT one per occurrence # See `?collect_media()` for information on how to download media galah_call() |>   identify(\"Regent Honeyeater\") |>   filter(year == 2011) |>   atlas_media()  # Get a taxonomic tree of *Chordata* down to the class level galah_call() |>    identify(\"chordata\") |>   filter(rank == class) |>   atlas_taxonomy() } # }"},{"path":"https://galah.ala.org.au/R/reference/atlas_citation.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a citation for occurrence data — atlas_citation","title":"Generate a citation for occurrence data — atlas_citation","text":"tibble containing occurrences generated using galah (either via collect() atlas_occurrences()), usually contain associated metadata stored attributes() can used build citation dataset. function simply extracts information, formats , invisibly returns formatted citation prints console.","code":""},{"path":"https://galah.ala.org.au/R/reference/atlas_citation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a citation for occurrence data — atlas_citation","text":"","code":"atlas_citation(data)"},{"path":"https://galah.ala.org.au/R/reference/atlas_citation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a citation for occurrence data — atlas_citation","text":"data tibble generated atlas_occurrences() similar","code":""},{"path":"https://galah.ala.org.au/R/reference/atlas_citation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a citation for occurrence data — atlas_citation","text":"Invisibly returns string containing citation dataset. Primarily called side-effect printing string console.","code":""},{"path":"https://galah.ala.org.au/R/reference/atlas_citation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a citation for occurrence data — atlas_citation","text":"","code":"if (FALSE) { # \\dontrun{ x <- galah_call() |>     identify(\"Heleioporus\") |>     filter(year == 2022) |>     collect() atlas_citation(x) } # }"},{"path":"https://galah.ala.org.au/R/reference/collapse.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a query — collapse.data_request","title":"Generate a query — collapse.data_request","text":"collapse() constructs valid query can inspected sent. typically occurs end pipe, traditionally begun galah_call(), used define query. version 2.0, objects class data_request (created using request_data()), metadata_request (request_metadata()) files_request (request_files()) supported collapse(). objects can created using galah_call() via method argument.","code":""},{"path":"https://galah.ala.org.au/R/reference/collapse.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a query — collapse.data_request","text":"","code":"# S3 method for class 'data_request' collapse(x, ..., mint_doi, .expand = FALSE)  # S3 method for class 'metadata_request' collapse(x, .expand = FALSE, ...)  # S3 method for class 'files_request' collapse(x, thumbnail = FALSE, ...)"},{"path":"https://galah.ala.org.au/R/reference/collapse.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a query — collapse.data_request","text":"x object class data_request, metadata_request files_request ... Arguments passed methods mint_doi Logical: DOI minted download? applies type = \"occurrences\" atlas chosen \"ALA\". .expand Logical: query_set returned? object shows requisite data needed process supplied query. Defaults FALSE; TRUE append query_set extra slot query object. thumbnail Logical: thumbnail-size images returned? Defaults FALSE, indicating full-size images required.","code":""},{"path":"https://galah.ala.org.au/R/reference/collapse.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a query — collapse.data_request","text":"object class query, list-like object containing least slots type url.","code":""},{"path":"https://galah.ala.org.au/R/reference/collect.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a database query — collect.data_request","title":"Retrieve a database query — collect.data_request","text":"collect() attempts retrieve result query selected API.","code":""},{"path":"https://galah.ala.org.au/R/reference/collect.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a database query — collect.data_request","text":"","code":"# S3 method for class 'data_request' collect(x, ..., wait = TRUE, file = NULL)  # S3 method for class 'metadata_request' collect(x, ...)  # S3 method for class 'files_request' collect(x, ...)  # S3 method for class 'query' collect(x, ..., wait = TRUE, file = NULL)  # S3 method for class 'computed_query' collect(x, ..., wait = TRUE, file = NULL)"},{"path":"https://galah.ala.org.au/R/reference/collect.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a database query — collect.data_request","text":"x object class data_request, metadata_request files_request (galah_call()); object class query_set query (collapse() compute()) ... Arguments passed methods wait logical; galah wait response? Defaults FALSE. applies type = \"occurrences\" \"species\". file (Optional) file name. given, set data date time added. file path (directory) always given galah_config()$package$directory.","code":""},{"path":"https://galah.ala.org.au/R/reference/collect.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a database query — collect.data_request","text":"cases, collect() returns tibble containing requested data. requested data yet ready (.e. occurrences wait set FALSE), function returns object class query can used recheck download later time.","code":""},{"path":"https://galah.ala.org.au/R/reference/collect_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect media files — collect_media","title":"Collect media files — collect_media","text":"function downloads full-sized thumbnail images media files local directory using information atlas_media()","code":""},{"path":"https://galah.ala.org.au/R/reference/collect_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect media files — collect_media","text":"","code":"collect_media(df, thumbnail = FALSE, path)"},{"path":"https://galah.ala.org.au/R/reference/collect_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect media files — collect_media","text":"df tibble returned atlas_media() pipe starting request_data(type = \"media\"). thumbnail Default FALSE. TRUE download small thumbnail-sized images, rather full size images (default). path Use galah_config(directory = \"path--directory)\" instead. Supply path local folder/directory downloaded media saved .","code":""},{"path":"https://galah.ala.org.au/R/reference/collect_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect media files — collect_media","text":"Invisibly returns tibble listing number files downloaded, grouped HTML status codes. Primarily called side effect downloading available image & media files user local directory.","code":""},{"path":"https://galah.ala.org.au/R/reference/collect_media.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect media files — collect_media","text":"","code":"if (FALSE) { # \\dontrun{ # Use `atlas_media()` to return a `tibble` of records that contain media x <- galah_call() |>    identify(\"perameles\") |>   filter(year == 2015) |>   atlas_media()  # To download media files, add `collect_media()` to the end of a query  galah_config(directory = \"media_files\") collect_media(x)  # Since version 2.0, it is possible to run all steps in sequence # first, get occurrences, making sure to include media fields: occurrences_df <- request_data() |>   identify(\"Regent Honeyeater\") |>   filter(!is.na(images), year == 2011) |>   select(group = \"media\") |>   collect()   # second, get media metadata media_info <- request_metadata() |>   filter(media == occurrences_df) |>   collect()    # the two steps above + `right_join()` are synonymous with `atlas_media()` # third, get images request_files() |>   filter(media == media_info) |>   collect(thumbnail = TRUE) # step three is synonymous with `collect_media()` } # }"},{"path":"https://galah.ala.org.au/R/reference/compute.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a query — compute.data_request","title":"Compute a query — compute.data_request","text":"compute() useful several purposes. original purpose send request data, can processed server retrieved later time (via collect()).","code":""},{"path":"https://galah.ala.org.au/R/reference/compute.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a query — compute.data_request","text":"","code":"# S3 method for class 'data_request' compute(x, ...)  # S3 method for class 'metadata_request' compute(x, ...)  # S3 method for class 'files_request' compute(x, ...)  # S3 method for class 'query' compute(x, ...)"},{"path":"https://galah.ala.org.au/R/reference/compute.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a query — compute.data_request","text":"x object class data_request, metadata_request files_request (.e. constructed using pipe) query (.e. constructed collapse()) ... Arguments passed methods","code":""},{"path":"https://galah.ala.org.au/R/reference/compute.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a query — compute.data_request","text":"object class computed_query, identical class query except occurrence data, also contains information status request.","code":""},{"path":"https://galah.ala.org.au/R/reference/count.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — count.data_request","title":"Count the observations in each group — count.data_request","text":"count() lets quickly count unique values one variables. evaluated lazily.","code":""},{"path":"https://galah.ala.org.au/R/reference/count.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — count.data_request","text":"","code":"# S3 method for class 'data_request' count(x, ..., wt, sort, name)"},{"path":"https://galah.ala.org.au/R/reference/count.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — count.data_request","text":"x object class data_request, created using galah_call() ... currently ignored wt currently ignored sort currently ignored name currently ignored","code":""},{"path":"https://galah.ala.org.au/R/reference/filter.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — filter.data_request","title":"Keep rows that match a condition — filter.data_request","text":"filter() function used subset data, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Unlike 'local' filters act tibble, galah implementations work amending query enacted collect() one atlas_ family functions (atlas_counts() atlas_occurrences()).","code":""},{"path":"https://galah.ala.org.au/R/reference/filter.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — filter.data_request","text":"","code":"# S3 method for class 'data_request' filter(.data, ...)  # S3 method for class 'metadata_request' filter(.data, ...)  # S3 method for class 'files_request' filter(.data, ...)  galah_filter(..., profile = NULL)"},{"path":"https://galah.ala.org.au/R/reference/filter.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — filter.data_request","text":".data object class data_request, metadata_request files_request, created using galah_call() related functions. ... Expressions return logical value, defined terms variables selected atlas (checked using show_all(fields). multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. profile Use galah_apply_profile instead.","code":""},{"path":"https://galah.ala.org.au/R/reference/filter.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep rows that match a condition — filter.data_request","text":"tibble containing filter values.","code":""},{"path":"https://galah.ala.org.au/R/reference/filter.data_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep rows that match a condition — filter.data_request","text":"Syntax filter.data_request() galah_filter() uses non-standard evaluation (NSE), designed compatible possible dplyr::filter() syntax. Permissible examples include: == (e.g. year = 2020) = (consistency dplyr) !=, e.g. year != 2020) > >= (e.g. year >= 2020) < <= (e.g. year <= 2020) statements (e.g. year == 2018 | year == 2020) statements (e.g. year >= 2000 & year <= 2020) general tips: Separating statements comma equivalent statement; Ergo filter(year >= 2010 & year < 2020) _filter(year >= 2010, year < 2020). statements must include field name; filter(year == 2010 | year == 2021) works, filter(year == c(2010, 2021)), filter(year == 2010 | 2021) fails. possible use object specify required values, e.g. year_value <- 2010; filter(year > year_value). solr supports range queries text well numbers; filter(cl22 >= \"Tasmania\") valid. possible filter 'assertions', statements data validity, filter(assertions != c(\"INVALID_SCIENTIFIC_NAME\", \"COORDINATE_INVALID\"). Valid assertions can found using show_all(assertions). Exceptions querying occurrences, species, respective counts (.e. examples), field names checked internally show_all(fields). cases bespoke field names required, follows. requesting data download DOI, field doi valid, .e.: taxonomic metadata, taxa field valid: building taxonomic trees, rank field valid: Media queries involved, break two rules: accept media field, accept tibble rhs equation. example, users wishing break media queries respective API calls begin occurrence query: can use media field request media metadata: finally, metadata tibble can used request files:","code":"galah_call() |>   filter(doi = \"a-long-doi-string\") |>   collect() request_metadata() |>   filter(taxa == \"Chordata\") |>   unnest() request_data() |>   identify(\"Chordata\") |>   filter(rank == \"class\") |>   atlas_taxonomy() occurrences <- galah_call() |>    identify(\"Litoria peronii) |>    select(group = c(\"basic\", \"media\") |>    collect() media_metadata <- galah_call(\"metadata\") |>   filter(media == occurrences) |>   collect() galah_call(\"files\") |>   filter(media == media_metadata) |>   collect()"},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/filter.data_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — filter.data_request","text":"","code":"if (FALSE) { # \\dontrun{ galah_call() |>   filter(year >= 2019,          basisOfRecord == \"HumanObservation\") |>   count() |>   collect() } # }"},{"path":"https://galah.ala.org.au/R/reference/galah.html","id":null,"dir":"Reference","previous_headings":"","what":"Biodiversity Data from the GBIF Node Network — galah","title":"Biodiversity Data from the GBIF Node Network — galah","text":"Global Biodiversity Information Facility (GBIF; https://www.gbif.org) provides tools enable users find, access, combine visualise biodiversity data. galah enables R community directly access data resources hosted GBIF several subsidiary organisations, known 'nodes'. basic unit data stored infrastructures occurrence record, observation biological entity specific time place. However, galah also facilitates access taxonomic information, associated media images sounds, restricting queries particular taxa locations. Users can specify columns returned query, restrict results observations meet particular quality-control criteria. outside Australia, 'galah' common name Eolophus roseicapilla, widely-distributed Australian bird species.","code":""},{"path":"https://galah.ala.org.au/R/reference/galah.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Biodiversity Data from the GBIF Node Network — galah","text":"Getting Started galah_call()/request_() Start build query galah_config() Set package configuration options show_all() & search_all() Data generating filter queries show_values() & search_values() Show search values within fields, profiles, lists, collections, datasets providers Amend query apply_profile()/galah_apply_profile() Restrict data pass predefined checks (ALA ) arrange() Arrange rows query server side count() Request counts specified data type desc() Arrange counts descending order (combined arrange()) filter()/galah_filter() Filter records geolocate()/galah_geolocate() Spatial filtering query group_by()/galah_group_by() Group counts one fields identify()/galah_identify() Search taxonomic identifiers (see also taxonomic_searches) select()/galah_select() Fields report information slice_head() Choose first n rows download unnest() Expand metadata fields, lists, profiles taxa Execute query via API collapse() Convert data_request query compute() Compute query collect()/atlas_()/collect_media() Retrieve database query Miscellaneous functions atlas_citation() Get citation dataset read_zip() read data earlier download print() Print functions galah objects","code":""},{"path":"https://galah.ala.org.au/R/reference/galah.html","id":"terminology","dir":"Reference","previous_headings":"","what":"Terminology","title":"Biodiversity Data from the GBIF Node Network — galah","text":"get value galah, helpful understand terminology. occurrence record contains taxonomic information, usually information observation , location. addition record-specific information, living atlases append contextual information record, particularly data spatial layers reflecting climate gradients political boundaries. also run number quality checks record, resulting assertions attached record. piece information associated given occurrence record stored field, corresponds column imported R data.frame. See show_all(fields) view valid fields, layers assertions, conduct search using search_all(fields). Data fields important provide means filter occurrence records;  .e. return information need, . Consequently, much architecture galah designed make filtering simple possible. easiest way start pipe galah_call() follow relevant dplyr function; starting filter(), also including select(), group_by() others. Functions without relevant dplyr synonym include galah_identify()/identify() choosing taxon, galah_geolocate()/ st_crop() choosing specific location. combining different filters, possible build complex queries return valuable information given problem. notable extension filtering approach remove records low 'quality'. living atlases perform quality control checks records store. checks used generate new fields, can used filter records unsuitable particular applications. However, many possible data quality checks, always clear appropriate given instance. Therefore, galah supports data quality profiles, can passed galah_apply_profile() quickly remove undesirable records. full list data quality profiles returned show_all(profiles). Note service currently available Australian atlas (ALA).","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/galah.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Biodiversity Data from the GBIF Node Network — galah","text":"Maintainer: Martin Westgate martin.westgate@csiro.au Authors: Dax Kellie dax.kellie@csiro.au Matilda Stevenson Peggy Newman peggy.newman@csiro.au","code":""},{"path":"https://galah.ala.org.au/R/reference/galah_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Start building a query — galah_call","title":"Start building a query — galah_call","text":"download data selected atlas, one must construct query. query tells atlas API data download return, well filtered. Using galah_call() allows build piped query download data, way wrangle data dplyr tidyverse.","code":""},{"path":"https://galah.ala.org.au/R/reference/galah_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start building a query — galah_call","text":"","code":"galah_call(method = c(\"data\", \"metadata\", \"files\"), type, ...)  request_data(   type = c(\"occurrences\", \"occurrences-count\", \"occurrences-doi\", \"species\",     \"species-count\"),   ... )  request_metadata(   type = c(\"fields\", \"apis\", \"assertions\", \"atlases\", \"collections\", \"datasets\",     \"licences\", \"lists\", \"media\", \"profiles\", \"providers\", \"ranks\", \"reasons\", \"taxa\",     \"identifiers\") )  request_files(type = \"media\")"},{"path":"https://galah.ala.org.au/R/reference/galah_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start building a query — galah_call","text":"method string: request function called. one \"data\" (default), \"metadata\" \"files\" type string: form data returned? Acceptable values specified corresponding request function ... Zero arguments passed collapse() alter query. Currently mint.doi (occurrences) thumbnail (media downloads) supported. logical.","code":""},{"path":"https://galah.ala.org.au/R/reference/galah_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start building a query — galah_call","text":"sub-function returns different object class: request_data() returns data_request. request_metadata returns metadata_request, request_files() returns files_request. objects list-like contain following slots: filter: edit piping filter() galah_filter(). select: edit piping select galah_select(). group_by: edit piping group_by() galah_group_by(). identify: edit piping identify() galah_identify(). geolocate: edit piping st_crop(), galah_geolocate(), galah_polygon() galah_bbox(). limit: edit piping slice_head(). doi: edit piping filter(doi == \"-doi-\").","code":""},{"path":"https://galah.ala.org.au/R/reference/galah_call.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Start building a query — galah_call","text":"practice, galah_call() wrapper group underlying request_ functions, selected using method argument. functions can begin piped query end collapse(), compute() collect(), optionally one atlas_ family functions. details see object-oriented programming vignette: vignette(\"object_oriented_programming\", package = \"galah\") Accepted values type argument set underlying request_ functions. accepted types can set directly, affected later functions. common example adding count() pipe updates type, converting type = \"occurrences\" type = \"occurrences-count\" (ditto type = \"species\"). underlying request_ functions useful allow galah separate different types requests perform better. example, filter.data_request translates filters R solr, whereas filter.metadata_request searches using search term.","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/galah_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start building a query — galah_call","text":"","code":"if (FALSE) { # \\dontrun{  # Begin your query with `galah_call()`, then pipe using `%>%` or `|>`  # Get number of records of *Aves* from 2001 to 2004 by year galah_call() |>   identify(\"Aves\") |>   filter(year > 2000 & year < 2005) |>   group_by(year) |>   atlas_counts()    # Get information for all species in *Cacatuidae* family galah_call() |>   identify(\"Cacatuidae\") |>   atlas_species()    # Download records of genus *Eolophus* from 2001 to 2004 galah_config(email = \"your-email@email.com\")  galah_call() |>   identify(\"Eolophus\") |>   filter(year > 2000 & year < 2005) |>   atlas_occurrences() # synonymous with `collect()`   # galah_call() is a wrapper to various `request_` functions. # These can be called directly for greater specificity.  # Get number of records of *Aves* from 2001 to 2004 by year request_data() |>   identify(\"Aves\") |>   filter(year > 2000 & year < 2005) |>   group_by(year) |>   count() |>   collect()  # Get information for all species in *Cacatuidae* family request_data(type = \"species\") |>   identify(\"Cacatuidae\") |>   collect()    # Get metadata information about supported atlases in galah request_metadata(type = \"atlases\") |>   collect()  } # }"},{"path":"https://galah.ala.org.au/R/reference/galah_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set configuration options that control galah behaviour — galah_config","title":"Get or set configuration options that control galah behaviour — galah_config","text":"galah package supports large data downloads, also interfaces ALA requires users services provide registered email address reason downloading data. galah_config function provides way manage issues simply possible.","code":""},{"path":"https://galah.ala.org.au/R/reference/galah_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set configuration options that control galah behaviour — galah_config","text":"","code":"galah_config(...)"},{"path":"https://galah.ala.org.au/R/reference/galah_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set configuration options that control galah behaviour — galah_config","text":"... Options can defined using form name = \"value\". Valid arguments : api-key string: registered API key (currently unused). atlas string: Living Atlas point , Australia default. Can organisation name, acronym, region (see show_all_atlases() admissible values) directory string: directory use cache. default temporary directory, means results cached within R session cleared automatically user exits R. user may wish set non-temporary directory caching across sessions. directory must exist file system. download_reason_id numeric string: \"download reason\" required. ALA services, either numeric ID (currently 0–13) string (see show_all(reasons) list valid ID codes names). default NA. ALA services require valid download_reason_id code, either specified directly associated R function. email string: email address registered chosen atlas. ALA, can register address. password string: registered password (GBIF ) run_checks logical: galah run checks filters columns. making lots requests sequentially, checks can slow process lead HTTP 500 errors, turned . Defaults TRUE. send_email logical: receive email query atlas_occurrences()? Defaults FALSE; can useful instances, example tracking DOIs assigned specific downloads later citation. username string: registered username (GBIF ) verbose logical: galah give verbose progress bars? Defaults FALSE.","code":""},{"path":"https://galah.ala.org.au/R/reference/galah_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set configuration options that control galah behaviour — galah_config","text":"galah_config(), list options. galah_config(...) called arguments, nothing returned configuration set.","code":""},{"path":"https://galah.ala.org.au/R/reference/galah_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set configuration options that control galah behaviour — galah_config","text":"","code":"if (FALSE) { # \\dontrun{ # To download occurrence records, enter your email in `galah_config()`.  # This email should be registered with the atlas in question.  galah_config(email = \"your-email@email.com\")   # Turn on caching in your session galah_config(caching = TRUE)   # Some ALA services require that you add a reason for downloading data.  # Add your selected reason using the option `download_reason_id` galah_config(download_reason_id = 0)  # To look up all valid reasons to enter, use `show_all(reasons)` show_all(reasons)  # Make debugging in your session easier by setting `verbose = TRUE` galah_config(verbose = TRUE) } # }"},{"path":"https://galah.ala.org.au/R/reference/geolocate.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a query to within a specified area — geolocate","title":"Narrow a query to within a specified area — geolocate","text":"Restrict results specified area. Areas can specified either polygons bounding boxes, depending type. Alternatively, users can call underlying functions directly via galah_polygon(), galah_bbox() galah_radius(). possible use sf syntax calling st_crop(), synonymous galah_polygon(). Use polygon calling galah_geolocate(), default type \"polygon\", narrows queries within area supplied POLYGON MULTIPOLYGON. Polygons must specified either sf object, 'well-known text' (WKT) string, shapefile. Shapefiles must simple accepted ALA. Use bounding box Alternatively, set type = \"bbox\" narrow queries within bounding box. Bounding boxes can extracted supplied sf object shapefile. bounding box can also supplied bbox object (via sf::st_bbox()) tibble/data.frame. Use point radius Alternatively, set type = \"radius\" narrow queries within circular area around specific point location. Point coordinates can supplied latitude/longitude coordinate numbers sf object (sfc_POINT). Area supplied radius kilometres. Default radius 10 km.","code":""},{"path":"https://galah.ala.org.au/R/reference/geolocate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a query to within a specified area — geolocate","text":"","code":"geolocate(..., type = c(\"polygon\", \"bbox\", \"radius\"))  galah_geolocate(..., type = c(\"polygon\", \"bbox\", \"radius\"))  galah_polygon(...)  galah_bbox(...)  galah_radius(...)  # S3 method for class 'data_request' st_crop(x, y, ...)"},{"path":"https://galah.ala.org.au/R/reference/geolocate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a query to within a specified area — geolocate","text":"... st_crop, additional arguments (currently ignored). Otherwise single sf object, WKT string shapefile. Bounding boxes can supplied tibble/data.frame bbox type string: one c(\"polygon\", \"bbox\"). Defaults \"polygon\". type = \"polygon\", multipolygon built via galah_polygon(). type = \"bbox\", multipolygon built via galah_bbox(). multipolygon used narrow query ALA. x object class data_request, created using galah_call() y valid Well-Known Text string (wkt), POLYGON MULTIPOLYGON","code":""},{"path":"https://galah.ala.org.au/R/reference/geolocate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow a query to within a specified area — geolocate","text":"type = \"polygon\" type = \"bbox\", length-1 string (class character) containing multipolygon WKT string representing area provided. type = \"radius\", list lat, long radius values.","code":""},{"path":"https://galah.ala.org.au/R/reference/geolocate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Narrow a query to within a specified area — geolocate","text":"type = \"polygon\", WKT strings longer 10000 characters sf objects 500 vertices accepted ALA. polygons  may need simplified. type = \"bbox\", sf objects shapefiles converted bounding box query ALA. type = \"radius, sfc_POINT objects converted lon/lat coordinate numbers query ALA. Default radius 10 km.","code":""},{"path":"https://galah.ala.org.au/R/reference/geolocate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a query to within a specified area — geolocate","text":"","code":"if (FALSE) { # \\dontrun{ # Search for records within a polygon using a shapefile location <- sf::st_read(\"path/to/shapefile.shp\") galah_call() |>   identify(\"vulpes\") |>   geolocate(location) |>   count() |>   collect()    # Search for records within the bounding box of a shapefile location <- sf::st_read(\"path/to/shapefile.shp\") galah_call() |>   identify(\"vulpes\") |>   geolocate(location, type = \"bbox\") |>   count() |>   collect()  # Search for records within a polygon using an `sf` object location <- \"POLYGON((142.3 -29.0,142.7 -29.1,142.7 -29.4,142.3 -29.0))\" |>  sf::st_as_sfc() galah_call() |>   identify(\"reptilia\") |>   galah_polygon(location) |>   count() |>   collect()    # Search for records using a Well-known Text string (WKT) wkt <- \"POLYGON((142.3 -29.0,142.7 -29.1,142.7 -29.4,142.3 -29.0))\" galah_call() |>   identify(\"vulpes\") |>   st_crop(wkt) |>   count() |>   collect()  # Search for records within the bounding box extracted from an `sf` object location <- \"POLYGON((142.3 -29.0,142.7 -29.1,142.7 -29.4,142.3 -29.0))\" |>   sf::st_as_sfc() galah_call() |>   identify(\"vulpes\") |>   galah_geolocate(location, type = \"bbox\") |>   count() |>   collect()  # Search for records using a bounding box of coordinates b_box <- sf::st_bbox(c(xmin = 143, xmax = 148, ymin = -29, ymax = -28),                       crs = sf::st_crs(\"WGS84\")) galah_call() |>   identify(\"reptilia\") |>   galah_geolocate(b_box, type = \"bbox\") |>   count() |>   collect()  # Search for records using a bounding box in a `tibble` or `data.frame` b_box <- tibble::tibble(xmin = 148, ymin = -29, xmax = 143, ymax = -21) galah_call() |>   identify(\"vulpes\") |>   galah_geolocate(b_box, type = \"bbox\") |>   count() |>   collect()  # Search for records within a radius around a point's coordinates galah_call() |>   identify(\"manorina melanocephala\") |>   galah_geolocate(lat = -33.7,                   lon = 151.3,                   radius = 5,                   type = \"radius\") |>   count() |>   collect()  # Search for records with a radius around an `sf_POINT` object point <- sf::st_sfc(sf::st_point(c(-33.66741, 151.3174)), crs = 4326) galah_call() |>   identify(\"manorina melanocephala\") |>   galah_geolocate(point,                   radius = 5,                   type = \"radius\") |>   count() |>   collect() } # }"},{"path":"https://galah.ala.org.au/R/reference/group_by.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by one or more variables — group_by.data_request","title":"Group by one or more variables — group_by.data_request","text":"data operations done groups defined variables. group_by() takes field name (unquoted) performs grouping operation. default behaviour use combination count() give information number occurrences per level field. Alternatively, can use without count get download occurrences grouped variable. particularly useful used taxonomic ID field (speciesID, genusID etc.) allows information appended result. atlas_species() works, example. See select() details.","code":""},{"path":"https://galah.ala.org.au/R/reference/group_by.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by one or more variables — group_by.data_request","text":"","code":"# S3 method for class 'data_request' group_by(.data, ...)  galah_group_by(...)"},{"path":"https://galah.ala.org.au/R/reference/group_by.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by one or more variables — group_by.data_request","text":".data object class data_request ... Zero individual column names include","code":""},{"path":"https://galah.ala.org.au/R/reference/group_by.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group by one or more variables — group_by.data_request","text":"arguments provided, returns data.frame columns name type, per select.data_request().","code":""},{"path":"https://galah.ala.org.au/R/reference/group_by.data_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by one or more variables — group_by.data_request","text":"","code":"if (FALSE) { # \\dontrun{ # default usage is for grouping counts galah_call() |>    group_by(basisOfRecord) |>   counts() |>   collect()  # Alternatively, we can use this with an occurrence search   galah_call() |>   filter(year == 2024,          genus = \"Crinia\") |>   group_by(speciesID) |>  collect() # note that this example is equivalent to `atlas_species()`;  # but using `group_by()` is more flexible. } # }"},{"path":"https://galah.ala.org.au/R/reference/identify.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a query by passing taxonomic identifiers — identify.data_request","title":"Narrow a query by passing taxonomic identifiers — identify.data_request","text":"conducting search creating data query, common identify known taxon group taxa narrow records results returned. identify() used identify taxa want returned search data query. Users pass scientific names taxonomic identifiers pipes provide data biological group interest. good use search_taxa() search_identifiers() first check taxa provide galah_identify() return correct results.","code":""},{"path":"https://galah.ala.org.au/R/reference/identify.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a query by passing taxonomic identifiers — identify.data_request","text":"","code":"# S3 method for class 'data_request' identify(x, ...)  # S3 method for class 'metadata_request' identify(x, ...)  galah_identify(..., search = NULL)"},{"path":"https://galah.ala.org.au/R/reference/identify.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a query by passing taxonomic identifiers — identify.data_request","text":"x object class metadata_request, created using request_metadata() ... One scientific names. search galah_identify() now always search verify search terms; ergo argument ignored.","code":""},{"path":"https://galah.ala.org.au/R/reference/identify.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow a query by passing taxonomic identifiers — identify.data_request","text":"tibble containing identified taxa.","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/identify.data_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a query by passing taxonomic identifiers — identify.data_request","text":"","code":"if (FALSE) { # \\dontrun{ # Use `galah_identify()` to narrow your queries galah_call() |>    identify(\"Eolophus\") |>   count() |>   collect()  # If you know a valid taxon identifier, use `filter()` instead. id <- \"https://biodiversity.org.au/afd/taxa/009169a9-a916-40ee-866c-669ae0a21c5c\" galah_call() |>    filter(lsid == id)  |>   count() |>   collect() } # }"},{"path":"https://galah.ala.org.au/R/reference/print_galah_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print galah objects — print_galah_objects","title":"Print galah objects — print_galah_objects","text":"version 2.0, galah supports several bespoke object types. Classes data_request, metadata_request files_request starting pipes download different types information. objects parsed using collapse() query object, contains one URLs necessary return requested information. object passed compute() /collect(). Finally, galah_config() creates object class galah_config (unsurprisingly) stores configuration information.","code":""},{"path":"https://galah.ala.org.au/R/reference/print_galah_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print galah objects — print_galah_objects","text":"","code":"# S3 method for class 'data_request' print(x, ...)  # S3 method for class 'files_request' print(x, ...)  # S3 method for class 'metadata_request' print(x, ...)  # S3 method for class 'query' print(x, ...)  # S3 method for class 'computed_query' print(x, ...)  # S3 method for class 'query_set' print(x, ...)  # S3 method for class 'galah_config' print(x, ...)"},{"path":"https://galah.ala.org.au/R/reference/print_galah_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print galah objects — print_galah_objects","text":"x object appropriate class ... Arguments passed methods","code":""},{"path":"https://galah.ala.org.au/R/reference/print_galah_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print galah objects — print_galah_objects","text":"Print return object; instead prints description object console","code":""},{"path":"https://galah.ala.org.au/R/reference/print_galah_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print galah objects — print_galah_objects","text":"","code":"if (FALSE) { # \\dontrun{ # The most common way to start a pipe is with `galah_call()` # later functions update the `data_request` object galah_call() |> # same as calling `request_data()`   filter(year >= 2020) |>   group_by(year) |>   count()  # Metadata requests are formatted in a similar way request_metadata() |>   filter(field == basisOfRecord) |>   unnest()  # Queries are converted into a `query_set` by `collapse()` x <- galah_call() |> # same as calling `request_data()`   filter(year >= 2020) |>   count() |>   collapse() print(x)    # Each `query_set` contains one or more `query` objects x[[3]] } # }"},{"path":"https://galah.ala.org.au/R/reference/read_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Read downloaded data from a zip file — read_zip","title":"Read downloaded data from a zip file — read_zip","text":"Living atlases supply data downloads zip files. function reads data efficiently, .e. without unzipping first, using readr package. Although function part galah time, previously internal atlas_occurrences(). exported now support easy re-importing downloaded files, without need re-run query.","code":""},{"path":"https://galah.ala.org.au/R/reference/read_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read downloaded data from a zip file — read_zip","text":"","code":"read_zip(file)"},{"path":"https://galah.ala.org.au/R/reference/read_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read downloaded data from a zip file — read_zip","text":"file (character) file name. Must length-1 character ending .zip.","code":""},{"path":"https://galah.ala.org.au/R/reference/read_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read downloaded data from a zip file — read_zip","text":"","code":"if (FALSE) { # \\dontrun{ # set a working directory galah_config(directory = \"data-raw\",              email = \"an-email-address@email.com\")  # download some data galah_call() |>   identify(\"Heleioporus\") |>   filter(year == 2022) |>   collect(file = \"burrowing_frog_data.zip\")    # load data from file x <- read_zip(\"./data-raw/burrowing_frog_data.zip\") } # }"},{"path":"https://galah.ala.org.au/R/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr arrange, collapse, collect, compute, count, filter, group_by, select, slice_head graphics identify sf st_crop","code":""},{"path":"https://galah.ala.org.au/R/reference/search_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for record information — search_all","title":"Search for record information — search_all","text":"living atlases store huge amount information, beyond occurrence records main output. galah, one way users can investigate information searching specific option category type information interested . Functions prefixed search_ , displaying matches search term within valid options information specified suffix. information taxonomic searches using search_taxa(), see ?taxonomic_searches. search_all() helper function can searches multiple types information, acting wrapper around many search_ sub-functions. See Details () accepted values.","code":""},{"path":"https://galah.ala.org.au/R/reference/search_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for record information — search_all","text":"","code":"search_all(type, query)  search_assertions(query)  search_apis(query)  search_atlases(query)  search_collections(query)  search_datasets(query)  search_fields(query)  search_identifiers(...)  search_licences(query)  search_lists(query)  search_profiles(query)  search_providers(query)  search_ranks(query)  search_reasons(query)  search_taxa(...)"},{"path":"https://galah.ala.org.au/R/reference/search_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for record information — search_all","text":"type string specify type parameters searched. query string specifying search term. Searches case-sensitive. ... set strings tibble queried; see Details.","code":""},{"path":"https://galah.ala.org.au/R/reference/search_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for record information — search_all","text":"object class tbl_df data.frame (aka tibble) containing data match search query.","code":""},{"path":"https://galah.ala.org.au/R/reference/search_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for record information — search_all","text":"five categories information, specific sub-functions look-type information. available types information search_all() :","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/search_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for record information — search_all","text":"","code":"if (FALSE) { # \\dontrun{ # Search for fields that include the word \"date\" search_all(fields, \"date\")  # Search for fields that include the word \"marine\" search_all(fields, \"marine\")  # Search using a single taxonomic term # (see `?search_taxa()` for more information) search_all(taxa, \"Reptilia\") # equivalent  # Look up a unique taxon identifier # (see `?search_identifiers()` for more information) search_all(identifiers,             \"https://id.biodiversity.org.au/node/apni/2914510\")  # Search for species lists that match \"endangered\" search_all(lists, \"endangered\") # equivalent  # Search for a valid taxonomic rank, \"subphylum\" search_all(ranks, \"subphylum\")  # An alternative is to download the data and then `filter` it. This is  # largely synonymous, and allows greater control over which fields are searched. request_metadata(type = \"fields\") |>  collect() |>  dplyr::filter(grepl(\"date\", id)) } # }"},{"path":"https://galah.ala.org.au/R/reference/select.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or drop columns using their names — select.data_request","title":"Keep or drop columns using their names — select.data_request","text":"Select (optionally rename) variables data frame, using concise mini-language makes easy refer variables based name. Note unlike calling select() local tibble, implementation evaluated collapse() stage, meaning errors messages triggered end pipe. select() supports dplyr selection helpers, including: everything: Matches variables. last_col: Select last variable, possibly offset. helpers select variables matching patterns names: starts_with: Starts prefix. ends_with: Ends suffix. contains: Contains literal string. matches: Matches regular expression. num_range: Matches numerical range like x01, x02, x03. variables stored character vector: all_of: Matches variable names character vector. names must present, otherwise --bounds error thrown. any_of: all_of(), except error thrown names exist. using predicate function: : Applies function variables selects function returns TRUE.","code":""},{"path":"https://galah.ala.org.au/R/reference/select.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop columns using their names — select.data_request","text":"","code":"# S3 method for class 'data_request' select(.data, ..., group)  galah_select(..., group)"},{"path":"https://galah.ala.org.au/R/reference/select.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop columns using their names — select.data_request","text":".data object class data_request, created using galah_call(). ... Zero individual column names include. group string: (optional) name one column groups include. Valid options \"basic\", \"event\" \"taxonomy\", \"media\" \"assertions\".","code":""},{"path":"https://galah.ala.org.au/R/reference/select.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep or drop columns using their names — select.data_request","text":"tibble specifying name type column include call atlas_counts() atlas_occurrences().","code":""},{"path":"https://galah.ala.org.au/R/reference/select.data_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep or drop columns using their names — select.data_request","text":"GBIF nodes store content hundreds different fields, users often require thousands millions records time. reduce time taken download data, limit complexity resulting tibble, sensible restrict fields returned occurrence queries. full list available fields can viewed show_all(fields). Note select() galah_select() supported atlases allow downloads, exception GBIF, columns returned. Calling argument group = \"basic\" returns following columns: decimalLatitude decimalLongitude eventDate scientificName taxonConceptID recordID dataResourceName occurrenceStatus Using group = \"event\" returns following columns: eventRemarks eventTime eventID eventDate samplingEffort samplingProtocol Using group = \"media\" returns following columns: multimedia multimediaLicence images videos sounds Using group = \"taxonomy\" returns higher taxonomic information given query. group accepted atlas_species() well atlas_occurrences(). Using group = \"assertions\" returns quality assertion-related columns. list assertions shown show_all_assertions(). atlas_occurrences(), arguments passed ... valid field names, can check using show_all(fields). atlas_species(), one : counts include counts occurrences per species. synonyms include synonymous names. lists include authoritative lists species included .","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/select.data_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop columns using their names — select.data_request","text":"","code":"if (FALSE) { # \\dontrun{ # Download occurrence records of *Perameles*,  # Only return scientificName and eventDate columns galah_config(email = \"your-email@email.com\") galah_call() |>   identify(\"perameles\")|>   select(scientificName, eventDate) |>   collect()  # Only return the \"basic\" group of columns and the basisOfRecord column galah_call() |>   identify(\"perameles\") |>   select(basisOfRecord, group = \"basic\") |>   collect()    # When used in a pipe, `galah_select()` and `select()` are synonymous. # Hence the previous example can be rewritten as: galah_call() |>   galah_identify(\"perameles\") |>   galah_select(basisOfRecord, group = \"basic\") |>   collect() } # }"},{"path":"https://galah.ala.org.au/R/reference/show_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Show valid record information — show_all","title":"Show valid record information — show_all","text":"living atlases store huge amount information, beyond occurrence records main output. galah, one way users can investigate information showing available options categories type information interested . Functions prefixed show_all_ , displaying valid options information specified suffix. show_all() helper function can display multiple types information show_all_ sub-functions.","code":""},{"path":"https://galah.ala.org.au/R/reference/show_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show valid record information — show_all","text":"","code":"show_all(..., limit = NULL)  show_all_apis(limit = NULL)  show_all_assertions(limit = NULL)  show_all_atlases(limit = NULL)  show_all_collections(limit = NULL)  show_all_datasets(limit = NULL)  show_all_fields(limit = NULL)  show_all_licences(limit = NULL)  show_all_lists(limit = NULL)  show_all_profiles(limit = NULL)  show_all_providers(limit = NULL)  show_all_ranks(limit = NULL)  show_all_reasons(limit = NULL)"},{"path":"https://galah.ala.org.au/R/reference/show_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show valid record information — show_all","text":"... String showing type information requested. See Details () accepted values. limit Optional number values return. Defaults NULL, .e. records","code":""},{"path":"https://galah.ala.org.au/R/reference/show_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show valid record information — show_all","text":"object class tbl_df data.frame (aka tibble) containing data interest.","code":""},{"path":"https://galah.ala.org.au/R/reference/show_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show valid record information — show_all","text":"five categories information, specific sub-functions look-type information. available types information show_all_ :","code":""},{"path":"https://galah.ala.org.au/R/reference/show_all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Show valid record information — show_all","text":"Darwin Core terms https://dwc.tdwg.org/terms/","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/show_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show valid record information — show_all","text":"","code":"if (FALSE) { # \\dontrun{ # See all supported atlases show_all(atlases)  # Show a list of all available data quality profiles show_all(profiles)  # Show a listing of all accepted reasons for downloading occurrence data show_all(reasons)  # Show a listing of all taxonomic ranks show_all(ranks)  # `show_all()` is synonymous with `request_metadata() |> collect()` request_metadata(type = \"fields\") |>   collect() } # }"},{"path":"https://galah.ala.org.au/R/reference/show_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Show or search for values within a specified field — show_values","title":"Show or search for values within a specified field — show_values","text":"Users may wish see specific values within chosen field, profile list narrow queries understand information interest. show_values() provides users values. search_values() allows users search specific values within specified field.","code":""},{"path":"https://galah.ala.org.au/R/reference/show_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show or search for values within a specified field — show_values","text":"","code":"show_values(df, all_fields = FALSE)  search_values(df, query)"},{"path":"https://galah.ala.org.au/R/reference/show_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show or search for values within a specified field — show_values","text":"df search result search_fields(), search_profiles() search_lists(). all_fields TRUE, show_values() also returns raw data columns (columns included prior dataset's ingestion ALA). many lists, include raw scientific names vernacular names. conservation lists like EPBC list, also includes columns containing species' conservation status information. Default set FALSE. Currently implemented metadata type lists. query string specifying search term. case sensitive.","code":""},{"path":"https://galah.ala.org.au/R/reference/show_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show or search for values within a specified field — show_values","text":"tibble values specified field, profile list.","code":""},{"path":"https://galah.ala.org.au/R/reference/show_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show or search for values within a specified field — show_values","text":"Field contains categorical numeric values. example: field \"year\" contains values 2021, 2020, 2019, etc. field \"stateProvince\" contains values New South Wales, Victoria, Queensland, etc. used narrow queries filter() galah_filter(). Profile consists many individual quality filters. example, \"ALA\" profile consists values: Exclude records spatial validity FALSE Exclude records latitude value zero Exclude records longitude value zero List contains list species, usually taxonomic name. example, Endangered Plant species list contains values: Acacia curranii (Curly-bark Wattle) Brachyscome papillosa (Mossgiel Daisy) Solanum karsense (Menindee Nightshade)","code":""},{"path":"https://galah.ala.org.au/R/reference/show_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show or search for values within a specified field — show_values","text":"","code":"if (FALSE) { # \\dontrun{ # Show values in field 'cl22' search_fields(\"cl22\") |>    show_values()  # This is synonymous with `request_metadata() |> unnest()`. # For example, the previous example can be run using: request_metadata() |>   filter(field == \"cl22\") |>   unnest() |>   collect()   # Search for any values in field 'cl22' that match 'tas' search_fields(\"cl22\") |>    search_values(\"tas\")  # See items within species list \"dr19257\" search_lists(\"dr19257\") |>    show_values() } # }"},{"path":"https://galah.ala.org.au/R/reference/slice_head.data_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows using their positions — slice_head.data_request","title":"Subset rows using their positions — slice_head.data_request","text":"slice() lets index rows (integer) locations. objects classes data_request metadata_request, slice_head() currently implemented, selects first n rows. .data grouped using group_by(), operation performed group, (e.g.) slice_head(df, n = 5) select first five rows group.","code":""},{"path":"https://galah.ala.org.au/R/reference/slice_head.data_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows using their positions — slice_head.data_request","text":"","code":"# S3 method for class 'data_request' slice_head(.data, ..., n, prop, by = NULL)  # S3 method for class 'metadata_request' slice_head(.data, ..., n, prop, by = NULL)"},{"path":"https://galah.ala.org.au/R/reference/slice_head.data_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows using their positions — slice_head.data_request","text":".data object class data_request, created using galah_call() ... Currently ignored n number rows returned. data grouped group_by(), operation performed group. prop Currently ignored. Currently ignored.","code":""},{"path":"https://galah.ala.org.au/R/reference/slice_head.data_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows using their positions — slice_head.data_request","text":"amended data_request completed slice slot.","code":""},{"path":"https://galah.ala.org.au/R/reference/slice_head.data_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows using their positions — slice_head.data_request","text":"","code":"if (FALSE) { # \\dontrun{ # Limit number of rows returned to 3. # In this case, our query returns the top 3 years with most records. galah_call() |>   identify(\"perameles\") |>   filter(year > 2010) |>   group_by(year) |>   count() |>   slice_head(n = 3) |>   collect() } # }"},{"path":"https://galah.ala.org.au/R/reference/taxonomic_searches.html","id":null,"dir":"Reference","previous_headings":"","what":"Look up taxon information — taxonomic_searches","title":"Look up taxon information — taxonomic_searches","text":"search_taxa() allows users look taxonomic names, ensure matched correctly, downloading data specified organisation. default, names supplied strings; users can also specify taxonomic levels search using data.frame tibble. useful taxonomic level name question needs specified, addition identity. example, common method use scientificName column list Latinized binomial, also possible list separately genus specificEpithet (respectively). common use-case distinguish homonyms listing higher taxonomic units, supplying columns like kingdom, phylum class. search_identifiers() allows users look matching taxonomic names using unique taxonConceptID. ALA, records associated identifier uniquely identifies taxon record belongs. identifiers known, function allows use look information taxon question. Effectively inverse function search_taxa(), takes names provides identifiers. Note taxonomic look-required within pipe, equivalent search_taxa() identify() (galah_identify()). equivalent search_identifiers() use filter() filter taxonConceptId.","code":""},{"path":"https://galah.ala.org.au/R/reference/taxonomic_searches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Look up taxon information — taxonomic_searches","text":"search_taxa() returns taxonomic match supplied text string, along following information: search_term: search term used user. multiple search terms provided tibble, displayed column, concatenated using _. scientific_name: taxonomic name matched provided search term, lowest identified taxonomic rank. taxon_concept_id: unique taxonomic identifier. rank: taxonomic rank returned result. match_type: (ALA ) method name matching used name matching service. information can found name matching github repository. issues: errors returned name matching service (e.g. homonym, indeterminate species match). information can found name matching github repository. taxonomic names (e.g. kingdom, phylum, class, order, family, genus)","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/taxonomic_searches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look up taxon information — taxonomic_searches","text":"","code":"if (FALSE) { # \\dontrun{ # Search using a single string.  # Note that `search_taxa()` is not case sensitive search_taxa(\"Reptilia\")  # Search using multiple strings.  # `search_taxa()` will return one row per taxon search_taxa(\"reptilia\", \"mammalia\")  # Search using more detailed strings with authorship information search_taxa(\"Acanthocladium F.Muell\")  # Specify taxonomic levels in a tibble using \"specificEpithet\" search_taxa(tibble::tibble(   class = \"aves\",    family = \"pardalotidae\",    genus = \"pardalotus\",    specificEpithet = \"punctatus\"))  # Specify taxonomic levels in a tibble using \"scientificName\"                     search_taxa(tibble::tibble(   family = c(\"pardalotidae\", \"maluridae\"),    scientificName = c(\"Pardalotus striatus striatus\", \"malurus cyaneus\")))  # Look up a unique taxon identifier search_identifiers(query = \"https://id.biodiversity.org.au/node/apni/2914510\") } # }"},{"path":"https://galah.ala.org.au/R/reference/tidyverse_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-generic tidyverse functions — tidyverse_functions","title":"Non-generic tidyverse functions — tidyverse_functions","text":"Several useful functions tidyverse packages generic, meaning can define class-specific versions functions implement galah; examples include filter(), select() group_by(). However, also functions defined within tidyverse packages generic. cases re-implemented functions galah. consequence supporting consistent syntax tidyverse, cost potentially introducing conflicts. can avoided using :: operator required (see examples).","code":""},{"path":"https://galah.ala.org.au/R/reference/tidyverse_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-generic tidyverse functions — tidyverse_functions","text":"","code":"desc(...)  unnest(.query)"},{"path":"https://galah.ala.org.au/R/reference/tidyverse_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-generic tidyverse functions — tidyverse_functions","text":"... column order .query object class metadata_request","code":""},{"path":"https://galah.ala.org.au/R/reference/tidyverse_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-generic tidyverse functions — tidyverse_functions","text":"galah::desc() returns tibble used arrange.data_request() arrange rows query. galah::unnest() returns object class metadata_request.","code":""},{"path":"https://galah.ala.org.au/R/reference/tidyverse_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-generic tidyverse functions — tidyverse_functions","text":"following functions included: desc() (dplyr): Use within arrange() specify arrangement descending unnest() (tidyr): Use 'drill ' nested information fields, lists, profiles, taxa galah versions use lazy evaluation.","code":""},{"path":[]},{"path":"https://galah.ala.org.au/R/reference/tidyverse_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-generic tidyverse functions — tidyverse_functions","text":"","code":"if (FALSE) { # \\dontrun{ # Arrange grouped record counts by descending year galah_call() |>   identify(\"perameles\") |>   filter(year > 2019) |>   count() |>   arrange(galah::desc(year)) |>   collect()  # Return values of field `basisOfRecord` request_metadata() |>    galah::unnest() |>    filter(field == basisOfRecord) |>    collect()    # Using `galah::unnest()` in this way is equivalent to: show_all(fields, \"basisOfRecord\") |>    show_values() } # }"},{"path":[]},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-2-1-2","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 2.1.2","text":"Support group_by() atlas_occurrences() queries (#258) Allow users download additional information like conservation status lists using show_values(all_fields = TRUE) (#266)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-2-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 2.1.2","text":"Queries multiple filter arguments longer ignore filters (#265) Support Flanders Atlas temporarily deactivated (#256) Fix GBIF downloads append DOI attributes downloaded object","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-211","dir":"Changelog","previous_headings":"","what":"galah 2.1.1","title":"galah 2.1.1","text":"CRAN release: 2025-02-07","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-2-1-1","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 2.1.1","text":"New vignette demonstrate methods support reproducibility New function read_zip() reimport downloaded files Support group_by() occurrence queries allow facet downloads variable (#195, #258) Improvements atlas_citation() improved clarity","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-2-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 2.1.1","text":"Improved documentation use galah_filter() specify taxon_concept_id rather galah_identify() (#245) Adding field without data breaks occurrence downloads (#248) Queries filter using ! %% parse correctly (#251) show_all(lists) longer truncates results first 500 rows (#252) atlas_counts() longer errors group_by() set record count = 0 (#254) Empty tibbles returned atlas_species() longer return different column names queries return result (#255)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-210","dir":"Changelog","previous_headings":"","what":"galah 2.1.0","title":"galah 2.1.0","text":"CRAN release: 2024-11-19","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"image-downloads-2-1-0","dir":"Changelog","previous_headings":"","what":"Image downloads","title":"galah 2.1.0","text":"galah now supports media downloads atlases. exceptions GBIF France, APIs supported (yet)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-2-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 2.1.0","text":"Reorganise help files improved clarity, largely following dplyr syntax Support data profiles Sweden Spain Species downloads (via atlas_species()) now work Sweden, France, Spain (#234) select() now works species downloads (.e. via atlas_species(); #185, #227) Temporarily remove Estonian atlas (https://elurikkus.ee) system upgrades","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 2.1.0","text":"Fix bugs filter, group_by etc. recognising fields (#237) Swap new APIs Australia (#163) Austria (#231, #242) Re-add taxonomic help ?taxonomic_searches (#241)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-202","dir":"Changelog","previous_headings":"","what":"galah 2.0.2","title":"galah 2.0.2","text":"CRAN release: 2024-04-12","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-2-0-2","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 2.0.2","text":"Experimental galah_geolocate(type = \"radius\") added. Supports filtering point location radius (km) (#216) Support galah_geolocate() associated sub-functions GBIF queries galah_filter() longer fails assertions specified galah_filter() (#199) Improved behaviour robustness atlas_species(), particularly atlases (#234) Improved behavior select(), including supporting atlas_species() adding new group = \"taxonomy\" option (#218) Updated namematching services SBDI (Sweden) (#210) Add onLoad message user clear organisation queried","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-2-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 2.0.2","text":"collect_media() longer fails thumbnail missing (#215) galah_filter() parses apostrophes correctly value names (#214) group_by() |> atlas_counts() longer truncates rows 30 (#223, #198) Fix bug search_values() return matched values show_values() & atlas_counts() return correctly formatted values (#233) atlas_occurrences() longer overwrites returned field names user-supplied ones galah_apply_profile() now works expected List items longer truncated using show_values() (#235)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-201","dir":"Changelog","previous_headings":"","what":"galah 2.0.1","title":"galah 2.0.1","text":"CRAN release: 2024-02-05","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-2-0-1","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 2.0.1","text":"collapse() now returns query object, rather query_set, gains .expand argument optionally append query_set debugging purposes (#217).","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 2.0.1","text":"Avoid triggering multiple errors galah_identify() returns matched taxa (#219) Improve clarity quick start guide vignette (#221) show_values() longer truncates rows 30 (#222) Column ID name returned search_all(lists) now matches correct field ID galah_filter() (#225)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-200","dir":"Changelog","previous_headings":"","what":"galah 2.0.0","title":"galah 2.0.0","text":"CRAN release: 2023-11-20","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"object-oriented-programming-2-0-0","dir":"Changelog","previous_headings":"","what":"Object-oriented programming","title":"galah 2.0.0","text":"galah 2.0.0 now built around object-oriented programming principles. architectural change makes query building galah modular transparent. result, galah 2.0.0 allows easier debugging gives users options advanced query building (information, see “Object-oriented programming” vignette galah website) (#183).","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"collapse-compute-collect-2-0-0","dir":"Changelog","previous_headings":"","what":"collapse(), compute(), collect()","title":"galah 2.0.0","text":"New underlying architecture behind every function pings API galah separates query building 3 stages: Convert object query_set lists APIs pinged (collapse()), send queries required APIs (compute()), return data tibble (collect()) (#183). New architecture solves timing-issue downloading large numbers records (#180, #192) galah_filter(), galah_select() related functions now evaluated lazily; API calls made compute() called, meaning earlier programming stages faster easier debug.","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"major-improvements-to-galah_filter-2-0-0","dir":"Changelog","previous_headings":"","what":"Major improvements to galah_filter()","title":"galah 2.0.0","text":"galah_filter() upgraded use hierarchical parsing architecture suggested Advanced R. result, galah_filter() faster evaluates expressions consistently (#196, #169) galah_filter() now supports .na, !, c() & %% (#196)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 2.0.0","text":"potions package underlies galah_config() better options management (#193) Addition slice_head() desc() masked functions use galah atlas_counts() query. New vignettes added advanced taxonomic, spatial temporal filtering (#42)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 2.0.0","text":"Fixed parsing | galah_filter() (#169) show_values() errors nicely API (#184) Sporadic atlas$region error loading galah fixed potions package implementation (#178) DOI longer missing attribute atlas_occurrences(mint_doi = TRUE) (#182) Fixed bug order fields group_by() sometimes caused error (#201) Fixed parsing ampersands (&) query results (#203) galah builds correct data_request object wrapped function (#207)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-154","dir":"Changelog","previous_headings":"","what":"galah 1.5.4","title":"galah 1.5.4","text":"CRAN release: 2023-10-14 Patch release fix minor issues devel systems CRAN.","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-153","dir":"Changelog","previous_headings":"","what":"galah 1.5.3","title":"galah 1.5.3","text":"CRAN release: 2023-07-01 Minor release address CRAN issues. Last release 2.0.0.","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-152","dir":"Changelog","previous_headings":"","what":"galah 1.5.2","title":"galah 1.5.2","text":"CRAN release: 2023-03-10 Minor release resolve issues CRAN, recent bugs.","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-1-5-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.5.2","text":"Prevent error providing tibble input search_taxa() (e.g., resolve homonyms, #168) Better error message email address required, given (#179) Add informative message users call galah_select() atlas = GBIF (supported; #181) Ensure DOIs added downloads requested (#182) Improve tests avoid flagging issues CRAN one atlases (#184) Resolve problem queries replaced ... galah_filter() (#186)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-151","dir":"Changelog","previous_headings":"","what":"galah 1.5.1","title":"galah 1.5.1","text":"CRAN release: 2023-01-13","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"mask-function-names-from-other-packages-1-5-1","dir":"Changelog","previous_headings":"","what":"Mask function names from other packages","title":"galah 1.5.1","text":"experimental feature version 1.5.1 ability call functions packages (#161), synonyms galah_ functions. : identify() ({graphics}) synonym galah_identify() select() (dplyr) synonym galah_select() group_by() (dplyr) synonym galah_group_by() slice_head() (dplyr) synonym limit argument atlas_counts() st_crop() (sf) synonym galah_polygon() count() (dplyr) synonym atlas_counts() implemented S3 methods objects class data_request, created galah_call(). Hence new function names work piped galah_call().","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"experimental-support-for-gbif-queries-1-5-1","dir":"Changelog","previous_headings":"","what":"Experimental support for GBIF queries","title":"galah 1.5.1","text":"Global Biodiversity Information Facility (GBIF) umbrella organisation atlases supply data. Hence logical able query GBIF ’s “nodes” (.e. living atlases) via common API. Supported functions : search_taxa galah_identify name matching show_all(fields) show_all(assertions) show_all() calls give ‘collections’ information limited 20 records default, GBIF datasets often huge. search_all() generally reliable show_values() GBIF field galah_filter galah_group_by (therefore filter group_by(), see ), galah_select. atlas_counts() (therefore count(), see ) atlas_occurrences() & atlas_species(); implemented via ‘downloads’ system, meaning queries can larger, may slow current implementation experimental back-end changes expected future. Users require stable implementation use {rgbif} package.","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-1-5-1","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.5.1","text":"galah_config() gains print function, now uses fuzzy matching atlas field match region, organisation acronym (defined show_all(atlases)). example use case match organisations via acronyms, e.g. galah_config(atlas = \"ALA\"). Improved support data Spain via gbif.es (name-matching, lists, spatial) Swapped provider data France; formerly gbif.fr, now OpenObs, per advice maintainers Reading data disk now uses readr::read_csv place utils::read.csv improved speed show_all (associated sub-functions) gain limit argument, set NULL (.e. limit) default galah longer imports data.table, since function previously used package (rbindlist) duplicated dplyr::bind_rows Help files now built without markdown improved speed (mainly building)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-1-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes:","title":"galah 1.5.1","text":"New function url_paginate() handle cases pagination needed, total data length unknown (e.g. show_all_lists(), #170). galah_select(group = \"assertions\") always enacted properly atlas_occurrences, won’t lead overly long urls (#137). called without field names, recordID added avoid triggering ‘default’ set columns. atlas_species works minor changes API; requires registered email function","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-150","dir":"Changelog","previous_headings":"","what":"galah 1.5.0","title":"galah 1.5.0","text":"CRAN release: 2022-10-27","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"expanded-support-for-querying-other-international-living-atlases-1-5-0","dir":"Changelog","previous_headings":"","what":"Expanded support for querying other International Living Atlases","title":"galah 1.5.0","text":"Support complex queries 10 Living Atlases, including France, Guatemala Sweden. Complex queries can constructed using galah_call(), filtered galah_ functions, downloaded atlas_ functions. Previously, functionality possible queries ALA (#126)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"collect_media-1-5-0","dir":"Changelog","previous_headings":"","what":"collect_media()","title":"galah 1.5.0","text":"Show available media: atlas_media() returns tibble available media files Download media: collect_media() downloads list media atlas_media() local machine Download image thumbnails specifying type = \"thumbnails\" collect_media() (#140)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"updates-to-galah_geolocate-1-5-0","dir":"Changelog","previous_headings":"","what":"Updates to galah_geolocate()","title":"galah 1.5.0","text":"galah_geolocate() now supports filtering queries using polygons bounding boxes. Overall improvements bug fixes galah_geolocate() new internal functions galah_polygon() galah_bbox() (#125)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"show_all-search_all--show_values-search_values-1-5-0","dir":"Changelog","previous_headings":"","what":"show_all(), search_all() & show_values(), search_values()","title":"galah 1.5.0","text":"Experimental functions show_all() search_all() flexible look-functions can search information {galah}, rather separate search_/show_all_ functions (e.g. search_fields(), search_atlases(), show_all_fields(), show_all_reasons(), etc) (#127, #132) Added look-support collections, data providers, data resources, licenses, APIs species lists (e.g. list endangered species) (#126, #127, #132, #151) Checking valid values within fields, profiles species lists improved functions show_values() & search_values() (#131)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-1-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.5.0","text":"Apply data quality profiles pipe galah_apply_profile() function (#130) Improved internal consistency galah_ functions (#133) galah_geolocate() longer depends archived {wellknown} package (#141) Added support queries exclude/include missing values (e.g. galah_filter(species != \"\") galah_filter(species == \"\") (#143) Re-download previously-minted DOI collect_doi() (#140) checks ensure galah fails gracefully API fails (#157)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-1-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.5.0","text":"galah_select() longer adds “basic” group columns automatically (#128) galah_config() doesn’t display incorrect preserve = TRUE message (#136) Fixes error selecting assertion columns galah_select() (#137) atlas_counts() atlas_occurrences() longer return different record numbers field empty (#138) atlas_media() results longer differ results returned galah_filter() & atlas_counts() (#151)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-140","dir":"Changelog","previous_headings":"","what":"galah 1.4.0","title":"galah 1.4.0","text":"CRAN release: 2022-01-24","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"revamped-syntax-1-4-0","dir":"Changelog","previous_headings":"","what":"Revamped syntax","title":"galah 1.4.0","text":"ala_ functions renamed use prefix atlas_. change reflects functionality international atlases (.e., atlas_occurrences, atlas_counts, atlas_species, atlas_media, atlas_taxonomy, atlas_citation) (#103) select_taxa replaced 3 functions: galah_identify, search_taxa search_identifiers. galah_identify used building data queries, whereas search_taxa search_identifiers now exclusively used search taxonomic information. Syntax changes intended reflect usage expected output (#112, #122) select_ functions renamed use prefix galah_. Specifically, galah_filter, galah_select galah_geolocate replace select_filters, select_columns select_locations. syntax changes reflect move towards consistency dplyr naming functionality (#101, #108) find_ functions provide listing possible values renamed show_all_ (.e., show_all_profiles, show_all_ranks, show_all_atlases, show_all_cached_files, show_all_fields, show_all_reasons). find_ functions require input return specific results renamed search_ (.e., search_field_values, search_profile_attributes) (#112, #113)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah_group_by-1-4-0","dir":"Changelog","previous_headings":"","what":"galah_group_by","title":"galah 1.4.0","text":"Group fields using galah_group_by(), groups summarises record counts based categorical field values, similar dplyr::group_by() (#90, #95)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah_down_to-1-4-0","dir":"Changelog","previous_headings":"","what":"galah_down_to","title":"galah 1.4.0","text":"Select taxonomic level taxonomic tree go galah_down_to() + atlas_taxonomy(), uses tidy evaluation like galah_ functions (#101, #120)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"pipe-queries-using-galah_call-1-4-0","dir":"Changelog","previous_headings":"","what":"Pipe queries using galah_call","title":"galah 1.4.0","text":"Build data queries using piping syntax (.e., |>, %>%) first using galah_call(), narrowing queries galah_ functions finishing queries atlas_ function (#60, #120). S3 methods now implemented functions allow piping (#40)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-1-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.4.0","text":"Improved error messages using {glue} {rlang} (#117) Revamped syntax functions return output tibbles (#110, #118) Pass vectors galah_filter (#91, #92) Cache valid fields faster field look (#73, #116) New vignettes updated syntax (#104, #105), plus improvements previous vignettes. Updated R Markdown-style documentation added warnings deprecated functions (#113, #121)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.4.0","text":"galah longer returns error ALA system /API fails (#102, #119) search_taxa returns correct IDs search terms parentheses (#96) search_taxa returns best-fit taxonomic result ranks specified data.frame tibble (#115)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-131","dir":"Changelog","previous_headings":"","what":"galah 1.3.1","title":"galah 1.3.1","text":"CRAN release: 2021-08-21","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"search_taxonomy-renamed-to-ala_taxonomy-1-3-1","dir":"Changelog","previous_headings":"","what":"search_taxonomy() renamed to ala_taxonomy()","title":"galah 1.3.1","text":"bug fix: ala_taxonomy longer fails nodes ranked informal unranked (#86) function now returns tree built using data.tree package change function name required greater consistency data-providing functions galah","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"vignettes-1-3-1","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"galah 1.3.1","text":"vignettes now pre-compiled avoid failing CRAN (#85) expanded vignette navigating taxonomic information (#42)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-130","dir":"Changelog","previous_headings":"","what":"galah 1.3.0","title":"galah 1.3.0","text":"CRAN release: 2021-08-06","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah_config-1-3-0","dir":"Changelog","previous_headings":"","what":"galah_config()","title":"galah 1.3.0","text":"ala_config() renamed galah_config() improve internal consistency (#68)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"search_taxonomy-1-3-0","dir":"Changelog","previous_headings":"","what":"search_taxonomy()","title":"galah 1.3.0","text":"search_taxonomy() provides means search taxonomic names check results ‘correct’ proceeding download data via ala_occurrences(), ala_species() ala_counts() (e.g., ambiguous homonymous) (#64 #75) search_taxonomy() returns information author authority taxonomic names (#79) search_taxonomy() consistently orders column names, including correct taxonomic order rank (#81)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"caching-helper-functions-1-3-0","dir":"Changelog","previous_headings":"","what":"Caching helper functions","title":"galah 1.3.0","text":"find_cached_files() lists user cached files stored metadata (#57) clear_cached_files() removes previously cached files stored metadata (#71) ala_counts(), ala_occurrences(), ala_media() ala_species() now refresh_cache argument remove previously cached files replace current query (#71)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.3.0","text":"Cache files saved RDS format, making query attributes easier find, including data DOI, search url (#55, #32, #28) ala_media() caches media metadata galah_config(caching = TRUE) search_fields() allows user pass qid argument (#59) Users can now optionally skip filter count validation checks spatial biocache web services setting galah_config(run_checks = FALSE). helps users avoid slowing data request download speeds many requests made quick succession via galah_filter() ala_occurrences() (#61, #80) ala_counts(), select_columns() search_fields() now use match.arg approximate strings fuzzy matching (#66) Better handling cache errors improved error messages (#70)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.3.0","text":"select_columns(group = 'assertions') now sends qa = includeall ALA web service API return assertion columns (#48) ala_occurrences() returns data DOI ala_occurrences(mint_doi = TRUE) re-downloads data called multiple times (#56) ala_occurrences() longer converts field names -CAPS camelCase (#62)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-120","dir":"Changelog","previous_headings":"","what":"galah 1.2.0","title":"galah 1.2.0","text":"CRAN release: 2021-07-02","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"living-atlases-1-2-0","dir":"Changelog","previous_headings":"","what":"Living Atlases","title":"galah 1.2.0","text":"ala_config() allows users specify international Atlas download data (#21)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.2.0","text":"ala_media() includes file path downloaded media returned metadata (#22) Data returned ala_occurrences() contains search_url used download records; takes user website search page (#32) ala_species() provides helpful error species found (#39) Data quality filters created using specific web service argument, rather constructing filters attributes (#37) select_taxa() optional all_ranks argument return intermediate rank information (#35)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.2.0","text":"R > 4.0.0 now required (#43, #45) select_taxa() behaves expected character strings 32 36 characters provided (#23) Caching functionality ala_occurrences() uses columns expected (#30) galah_filter() negates assertion filters required, fixing issue assertion values ignored (#27) select_taxa() longer throws error queries one term differing number columns return value (#41) ala_counts() returns data.frame consistent column classes group_by parameter called multiple times ala_config(caching = TRUE) (#47) ala_ functions fail gracefully non-id character string passed (#49)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-110","dir":"Changelog","previous_headings":"","what":"galah 1.1.0","title":"galah 1.1.0","text":"CRAN release: 2021-05-05","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"downloading-media-1-1-0","dir":"Changelog","previous_headings":"","what":"Downloading media","title":"galah 1.1.0","text":"ala_media() now takes select_ arguments ala_ functions (#18) Filtering media metadata e.g. licence type possible (#19) search_fields now media type argument option Performance improvement download times (#13) Progress bar displayed downloads verbose == TRUE (#8) media download types supported","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"select_-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"select_ functions","title":"galah 1.1.0","text":"galah_location auto-detects type argument provided takes single argument, query, place sf wkt (#17) select_taxa auto-detects type argument provided takes single argument, query, place term term_type (#16)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.1.0","text":"Provide useful error message empty occurrence download (#7) ala_counts uses group_by field name returned data.frame column name (#6) ala_occurrences sends sourceId parameter ALA (#5) search_fields provides helpful error invalid types (#11)","code":""},{"path":"https://galah.ala.org.au/R/news/index.html","id":"galah-100","dir":"Changelog","previous_headings":"","what":"galah 1.0.0","title":"galah 1.0.0","text":"CRAN release: 2021-04-06 First version galah, built earlier functionality ALA4R package.","code":""}]
