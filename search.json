[{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"record-counts","dir":"Articles","previous_headings":"","what":"Record counts","title":"Download data","text":"atlas_counts() provides summary counts records specified atlas, without needing download records. addition filter arguments, optional group_by argument, provides counts binned requested field.","code":"# Total number of records in the ALA atlas_counts() ## # A tibble: 1 × 1 ##       count ##       <int> ## 1 102070026 galah_call() |>   galah_group_by(kingdom) |>   atlas_counts() ## # A tibble: 10 × 2 ##    kingdom      count ##    <chr>        <int> ##  1 Animalia  76305582 ##  2 Plantae   21998260 ##  3 Fungi      1893778 ##  4 Chromista   915235 ##  5 Protista     67365 ##  6 Bacteria     58156 ##  7 Protozoa     23635 ##  8 Archaea       1103 ##  9 Eukaryota      735 ## 10 Virus          472"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"species-lists","dir":"Articles","previous_headings":"","what":"Species lists","title":"Download data","text":"common use case atlas data identify species occur specified region, time period, taxonomic group. atlas_species() similar search_taxa, returns taxonomic information unique identifiers tibble. differs able return information taxonomic levels species; also flexible supporting filtering:","code":"species <- galah_call() |>   galah_identify(\"Rodentia\") |>   galah_filter(stateProvince == \"Northern Territory\") |>   atlas_species()    species |> head() ## # A tibble: 6 × 10 ##   kingdom  phylum   class    order    family  genus        species                     author   species_guid       vernacular_name ##   <chr>    <chr>    <chr>    <chr>    <chr>   <chr>        <chr>                       <chr>    <chr>              <chr>           ## 1 Animalia Chordata Mammalia Rodentia Muridae Mesembriomys Mesembriomys gouldii        (J.E. G… urn:lsid:biodiver… Black-footed T… ## 2 Animalia Chordata Mammalia Rodentia Muridae Zyzomys      Zyzomys argurus             (Thomas… urn:lsid:biodiver… Common Rock-rat ## 3 Animalia Chordata Mammalia Rodentia Muridae Pseudomys    Pseudomys hermannsburgensis (Waite,… urn:lsid:biodiver… Sandy Inland M… ## 4 Animalia Chordata Mammalia Rodentia Muridae Notomys      Notomys alexis              Thomas,… urn:lsid:biodiver… Spinifex Hoppi… ## 5 Animalia Chordata Mammalia Rodentia Muridae Melomys      Melomys burtoni             (Ramsay… urn:lsid:biodiver… Grassland Melo… ## 6 Animalia Chordata Mammalia Rodentia Muridae Mus          Mus musculus                Linnaeu… urn:lsid:biodiver… House Mouse"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"occurrence-data","dir":"Articles","previous_headings":"","what":"Occurrence data","title":"Download data","text":"download occurrence data need specify email galah_config(). email must associated active ALA account. See information config section Download occurrence records Eolophus roseicapilla","code":"galah_config(email = \"your_email@email.com\", atlas = \"Australia\") occ <- galah_call() |>   galah_identify(\"Eolophus roseicapilla\") |>   galah_filter(     stateProvince == \"Australian Capital Territory\",     year >= 2010,     profile = \"ALA\"   ) |>   galah_select(institutionID, group = \"basic\") |>   atlas_occurrences()    occ |> head() ## # A tibble: 6 × 8 ##   decimalLatitude decimalLongitude eventDate              scientificName  taxonConceptID   recordID dataResourceName institutionID ##             <dbl>            <dbl> <chr>                  <chr>           <chr>            <chr>    <chr>            <chr>         ## 1           -35.9             149. \"\"                     Eolophus rosei… urn:lsid:biodiv… 17f46d4… eBird Australia  \"\"            ## 2           -35.9             149. \"\"                     Eolophus rosei… urn:lsid:biodiv… ef2b906… eBird Australia  \"\"            ## 3           -35.9             149. \"2012-01-18T13:00:00Z\" Eolophus rosei… urn:lsid:biodiv… 4f7cd71… BirdLife Austra… \"\"            ## 4           -35.9             149. \"\"                     Eolophus rosei… urn:lsid:biodiv… 3236c47… eBird Australia  \"\"            ## 5           -35.8             149. \"\"                     Eolophus rosei… urn:lsid:biodiv… eec91d8… eBird Australia  \"\"            ## 6           -35.8             149. \"\"                     Eolophus rosei… urn:lsid:biodiv… e340c42… eBird Australia  \"\""},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"media-downloads","dir":"Articles","previous_headings":"","what":"Media downloads","title":"Download data","text":"addition text data describing individual occurrences attributes, ALA stores images, sounds videos associated given record. can downloaded R using atlas_media() set filters data download functions.","code":"media_data <- galah_call() |>   galah_identify(\"Eolophus roseicapilla\") |>   galah_filter(year == 2020) |>   atlas_media(download_dir = \"media\")"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"taxonomic-trees","dir":"Articles","previous_headings":"","what":"Taxonomic trees","title":"Download data","text":"atlas_taxonomy provides way build taxonomic trees one clade another using ALA’s internal taxonomy. Specify taxonomic level tree go galah_down_to. function unique within galah function returns data.tree, rather tibble. Although tree format useful, converting data.frame straightforward.","code":"classes <- galah_call() |>   galah_identify(\"chordata\") |>   galah_down_to(class) |>   atlas_taxonomy() ##                             levelName ## 1  Chordata                           ## 2   ¦--Cephalochordata                ## 3   ¦   °--Amphioxi                   ## 4   ¦--Craniata                       ## 5   ¦   °--Agnatha                    ## 6   ¦       ¦--Cephalasipidomorphi    ## 7   ¦       °--Myxini                 ## 8   ¦--Tunicata                       ## 9   ¦   ¦--Appendicularia             ## 10  ¦   ¦--Ascidiacea                 ## 11  ¦   °--Thaliacea                  ## 12  °--Vertebrata                     ## 13      °--Gnathostomata              ## 14          ¦--Amphibia               ## 15          ¦--Aves                   ## 16          ¦--Mammalia               ## 17          ¦--Pisces                 ## 18          ¦   ¦--Actinopterygii     ## 19          ¦   ¦--Chondrichthyes     ## 20          ¦   ¦--Cephalaspidomorphi ## 21          ¦   °--Sarcopterygii      ## 22          °--Reptilia data.tree::ToDataFrameTypeCol(classes, type = \"rank\") |> head() ##   rank_phylum  rank_subphylum rank_superclass rank_informal          rank_class ## 1    Chordata Cephalochordata            <NA>          <NA>            Amphioxi ## 2    Chordata        Craniata         Agnatha          <NA> Cephalasipidomorphi ## 3    Chordata        Craniata         Agnatha          <NA>              Myxini ## 4    Chordata        Tunicata            <NA>          <NA>      Appendicularia ## 5    Chordata        Tunicata            <NA>          <NA>          Ascidiacea ## 6    Chordata        Tunicata            <NA>          <NA>           Thaliacea"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"configuring-galah","dir":"Articles","previous_headings":"","what":"Configuring galah","title":"Download data","text":"Various aspects galah package can customized. preserve configuration future sessions, set profile_path location .Rprofile file.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"email","dir":"Articles","previous_headings":"Configuring galah","what":"Email","title":"Download data","text":"download occurrence records, need provide email address registered ALA. can create account . email registered ALA, stored config:","code":"galah_config(email = \"myemail@gmail.com\")"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"caching","dir":"Articles","previous_headings":"Configuring galah","what":"Caching","title":"Download data","text":"galah can cache results local files. means code run multiple times, second subsequent iterations faster. default, caching session-based, meaning local files stored temporary directory automatically deleted R session ended. behaviour can altered caching permanent, setting caching directory non-temporary location. default, caching turned . turn caching , run","code":"galah_config(cache_directory = \"example/dir\") galah_config(caching = FALSE)"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"setting-the-download-reason","dir":"Articles","previous_headings":"Configuring galah","what":"Setting the download reason","title":"Download data","text":"ALA requires provide reason downloading occurrence data (via galah atlas_occurrences() function). reason set “scientific research” default, can change using galah_config(). See show_all_reasons() valid download reasons.","code":"galah_config(download_reason_id = your_reason_id)"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/download_data.html","id":"debugging","dir":"Articles","previous_headings":"Configuring galah","what":"Debugging","title":"Download data","text":"things aren’t working expected, detail (particularly web requests caching behaviour) can obtained setting verbose configuration option:","code":"galah_config(verbose = TRUE)"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/look_up_information.html","id":"show_all_-functions","dir":"Articles","previous_headings":"","what":"show_all_ functions","title":"Look up information","text":"Functions prefix show_all_ return tibble exactly - showing possible values category specified. functions include: show_all_fields show_all_atlases show_all_ranks show_all_profiles show_all_reasons show_all_cached_files show_all_ functions require arguments. Simply call function return accepted values tibble: functions, one far largest output show_all_fields. Given important fields proper use galah, might useful search specific field. need detailed search search_ functions come handy.","code":"show_all_atlases() ## # A tibble: 6 × 3 ##   atlas     taxonomy_source taxonomy_info                                                     ##   <chr>     <chr>           <chr>                                                             ## 1 Australia ALA             https://bie.ala.org.au/                                           ## 2 Austria   GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 3 Guatemala GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 4 Spain     GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 5 Sweden    GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 6 UK        NBN             https://www.nhm.ac.uk/our-science/data/uk-species.html show_all_reasons() ## # A tibble: 13 × 2 ##       id name                             ##    <int> <chr>                            ##  1     0 conservation management/planning ##  2     1 biosecurity management/planning  ##  3     2 environmental assessment         ##  4     3 education                        ##  5     4 scientific research              ##  6     5 collection management            ##  7     6 other                            ##  8     7 ecological research              ##  9     8 systematic research/taxonomy     ## 10    10 testing                          ## 11    11 citizen science                  ## 12    12 restoration/remediation          ## 13    13 species modelling"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/look_up_information.html","id":"search_-functions","dir":"Articles","previous_headings":"","what":"search_ functions","title":"Look up information","text":"second subset lookup functions use search_ prefix, differ show_all_ require query work. used search detailed information can’t summarised across whole atlas, include: search_taxa search_identifiers search_fields search_field_values search_profile attributes Search single taxon multiple taxa name search_taxa. Alternatively, search_identifiers partner function search_taxa. already know taxonomic identifier, can search taxa identifier belongs search_identifiers: Sifting output show_all_fields find specific field can inefficient. Instead, might wish use search_fields look specific fields match search. search_taxa, search_fields requires query work. desired field found, use search_field_values find values pass galah_filter search_profile_attributes gives information criteria used remove records data quality profiles, example:","code":"search_taxa(\"reptilia\") ## # A tibble: 1 × 9 ##   search_term scientific_name taxon_concept_id                                    rank  match_type kingdom  phylum   class  issues ##   <chr>       <chr>           <chr>                                               <chr> <chr>      <chr>    <chr>    <chr>  <chr>  ## 1 reptilia    REPTILIA        urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b… class exactMatch Animalia Chordata Repti… noIss… search_taxa(\"reptilia\", \"aves\", \"mammalia\", \"pisces\") ## # A tibble: 4 × 10 ##   search_term scientific_name taxon_concept_id                   rank      match_type kingdom  phylum class issues vernacular_name ##   <chr>       <chr>           <chr>                              <chr>     <chr>      <chr>    <chr>  <chr> <chr>  <chr>           ## 1 reptilia    REPTILIA        urn:lsid:biodiversity.org.au:afd.… class     exactMatch Animalia Chord… Rept… noIss… <NA>            ## 2 aves        AVES            urn:lsid:biodiversity.org.au:afd.… class     exactMatch Animalia Chord… Aves  noIss… Birds           ## 3 mammalia    MAMMALIA        urn:lsid:biodiversity.org.au:afd.… class     exactMatch Animalia Chord… Mamm… noIss… Mammals         ## 4 pisces      PISCES          urn:lsid:biodiversity.org.au:afd.… species … exactMatch Animalia Chord… <NA>  noIss… fishes search_identifiers(\"urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b3c-45ff-833b-550efd40c399\") ## # A tibble: 1 × 8 ##   scientific_name taxon_concept_id                                              rank  match_type   kingdom  phylum  class   issues ##   <chr>           <chr>                                                         <chr> <chr>        <chr>    <chr>   <chr>   <chr>  ## 1 REPTILIA        urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b3c-45ff-83… class taxonIdMatch Animalia Chorda… Reptil… noIss… search_fields(\"date\") |> head() ## # A tibble: 6 × 4 ##   id                description        type   link  ##   <chr>             <chr>              <chr>  <chr> ## 1 dateIdentified    Date Identified    fields <NA>  ## 2 datePrecision     Date precision     fields <NA>  ## 3 eventDate         Event Date         fields <NA>  ## 4 eventDateEnd      <NA>               fields <NA>  ## 5 firstLoadedDate   Date first indexed fields <NA>  ## 6 georeferencedDate Georeferenced Date fields <NA> search_field_values(\"basisOfRecord\") ## # A tibble: 8 × 2 ##   field         category            ##   <chr>         <chr>               ## 1 basisOfRecord HUMAN_OBSERVATION   ## 2 basisOfRecord PRESERVED_SPECIMEN  ## 3 basisOfRecord OBSERVATION         ## 4 basisOfRecord MACHINE_OBSERVATION ## 5 basisOfRecord MATERIAL_SAMPLE     ## 6 basisOfRecord UNKNOWN             ## 7 basisOfRecord LIVING_SPECIMEN     ## 8 basisOfRecord FOSSIL_SPECIMEN galah_call() |> galah_filter(basisOfRecord == \"LIVING_SPECIMEN\") |> atlas_counts() ## # A tibble: 1 × 1 ##    count ##    <int> ## 1 216371 search_profile_attributes(\"ALA\") |> head() ## # A tibble: 6 × 2 ##   description                                                                                        filter                        ##   <chr>                                                                                              <chr>                         ## 1 \"Exclude all records where spatial validity is \\\"false\\\"\"                                          \"-spatiallyValid:\\\"false\\\"\"   ## 2 \"Exclude all records with an assertion that the scientific name provided does not match any of th… \"-assertions:TAXON_MATCH_NON… ## 3 \"Exclude all records with an assertion that the scientific name provided is not structured as a v… \"-assertions:INVALID_SCIENTI… ## 4 \"Exclude all records with an assertion that the name and classification supplied can't be used to… \"-assertions:TAXON_HOMONYM\"   ## 5 \"Exclude all records with an assertion that kingdom provided doesn't match a known kingdom e.g. A… \"-assertions:UNKNOWN_KINGDOM\" ## 6 \"Exclude all records with an assertion that the scientific name provided in the record does not m… \"-assertions:TAXON_SCOPE_MIS…"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/narrow_your_results.html","id":"galah_identify-search_taxa","dir":"Articles","previous_headings":"","what":"galah_identify & search_taxa","title":"Narrow your results","text":"Perhaps unsurprisingly, search_taxa searches taxonomic information. uses fuzzy matching work lot like search bar Atlas Living Australia website, can use search taxa scientific name. Finding desired taxon search_taxa important step using taxonomic information download data galah. example, search reptiles, first need identify whether correct query: want specific providing additional taxonomic information search_taxa, can provide data.frame containing levels taxonomic hierarchy: know search matches correct taxon taxa, can use galah_identify narrow results queries: ’re using international atlas, search_taxa won’t work; instead need use taxize package look relevant identifiers. atlases use GBIF taxonomic backbone, meaning can use get_gbifid function download relevant identifiers. identifiers can passed directly galah_identify. exception UK National Biodiversity Network (NBN), ’ taxonomic backbone (note information also given show_all_atlases()). can search NBN taxonomy get_nbnid.","code":"search_taxa(\"Reptilia\") ## # A tibble: 1 × 9 ##   search_term scientific_name taxon_concept_id                                    rank  match_type kingdom  phylum   class  issues ##   <chr>       <chr>           <chr>                                               <chr> <chr>      <chr>    <chr>    <chr>  <chr>  ## 1 Reptilia    REPTILIA        urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b… class exactMatch Animalia Chordata Repti… noIss… search_taxa(data.frame(genus = \"Eolophus\", kingdom = \"Aves\")) ## # A tibble: 1 × 13 ##   search_term   scientific_name scientific_name_… taxon_concept_id rank  match_type kingdom phylum class order family genus issues ##   <chr>         <chr>           <chr>             <chr>            <chr> <chr>      <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>  ## 1 Eolophus_Aves Eolophus        Bonaparte, 1854   urn:lsid:biodiv… genus exactMatch Animal… Chord… Aves  Psit… Cacat… Eolo… noIss… galah_call() |>   galah_identify(\"Reptilia\") |>   atlas_counts() ## # A tibble: 1 × 1 ##     count ##     <int> ## 1 1317131 taxa <- search_taxa(data.frame(genus = \"Eolophus\", kingdom = \"Aves\"))  galah_call() |>  galah_identify(taxa) |>  atlas_counts() ## # A tibble: 1 × 1 ##    count ##    <int> ## 1 856571 galah_config(atlas = \"Spain\")  library(taxize) id <- get_gbifid(\"Lepus\", messages = FALSE, rows = 1)  galah_call() |>    galah_identify(id) |>    galah_group_by(species) |>    atlas_counts() ## # A tibble: 4 × 2 ##   species            count ##   <chr>              <int> ## 1 Lepus granatensis   8360 ## 2 Lepus europaeus     2913 ## 3 Lepus castroviejoi   149 ## 4 Lepus capensis        41 galah_config(atlas = \"UK\") id <- get_nbnid(c(\"Vulpes vulpes\", \"Meles meles\"), messages = FALSE, rows = 1) galah_call() |>    galah_identify(id) |>    galah_group_by(species) |>    atlas_counts() ## # A tibble: 2 × 2 ##   species        count ##   <chr>          <int> ## 1 Vulpes vulpes 151307 ## 2 Meles meles    87712"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/narrow_your_results.html","id":"galah_filter","dir":"Articles","previous_headings":"","what":"galah_filter","title":"Narrow your results","text":"Perhaps important function galah galah_filter, used filter rows queries: find available fields corresponding valid values, use field lookup functions show_all_fields, search_fields find_field_values. notable feature galah_filter ability specify profile remove records suspect way. see full list data quality profiles, use show_all_profiles(). Finally, special case galah_filter make complex taxonomic queries possible using search_taxa. using taxonConceptID field, possible build queries exclude certain taxa, example. can useful paraphyletic concepts invertebrates:","code":"# Get total record count since 2000 galah_call() |>   galah_filter(year > 2000) |>   atlas_counts() ## # A tibble: 1 × 1 ##      count ##      <int> ## 1 63003181 # Get total record count for iNaturalist in 2021 galah_call() |>   galah_filter(     year > 2000,     dataResourceName == \"iNaturalist Australia\"   ) |>   atlas_counts() ## # A tibble: 1 × 1 ##     count ##     <int> ## 1 2673224 galah_call() |>   galah_filter(year > 2000, profile = \"ALA\") |>   atlas_counts() ## # A tibble: 1 × 1 ##      count ##      <int> ## 1 55681954 galah_call() |>   galah_filter(      taxonConceptID == search_taxa(\"Animalia\")$taxon_concept_id,      taxonConceptID != search_taxa(\"Chordata\")$taxon_concept_id   ) |>   galah_group_by(class) |>   atlas_counts() ## # A tibble: 83 × 2 ##    class          count ##    <chr>          <int> ##  1 Insecta      3317770 ##  2 Gastropoda    837702 ##  3 Arachnida     527555 ##  4 Malacostraca  515971 ##  5 Maxillopoda   462762 ##  6 Polychaeta    256938 ##  7 Bivalvia      206242 ##  8 Anthozoa      163386 ##  9 Demospongiae  107520 ## 10 Ostracoda      56295 ## # … with 73 more rows"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/narrow_your_results.html","id":"galah_group_by","dir":"Articles","previous_headings":"","what":"galah_group_by","title":"Narrow your results","text":"Use galah_group_by group record counts summarise counts specified fields:","code":"# Get record counts since 2010, grouped by year and basis of record galah_call() |>   galah_filter(year > 2015 & year <= 2020) |>   galah_group_by(year, basisOfRecord) |>   atlas_counts() ## # A tibble: 35 × 3 ##    year  basisOfRecord         count ##    <chr> <chr>                 <int> ##  1 2020  HUMAN_OBSERVATION   5825030 ##  2 2020  PRESERVED_SPECIMEN    13637 ##  3 2020  OBSERVATION            3894 ##  4 2020  UNKNOWN                 365 ##  5 2020  MATERIAL_SAMPLE         250 ##  6 2020  LIVING_SPECIMEN         127 ##  7 2020  MACHINE_OBSERVATION      37 ##  8 2019  HUMAN_OBSERVATION   5401216 ##  9 2019  UNKNOWN               51747 ## 10 2019  PRESERVED_SPECIMEN    38117 ## # … with 25 more rows"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/narrow_your_results.html","id":"galah_select","dir":"Articles","previous_headings":"","what":"galah_select","title":"Narrow your results","text":"Use galah_select choose columns returned downloading records: can also use dplyr functions work dplyr::select() galah_select()","code":"# Get *Reptilia* records from 1930, but only 'eventDate' and 'kingdom' columns occurrences <- galah_call() |>   galah_identify(\"reptilia\") |>   galah_filter(year == 1930) |>   galah_select(eventDate, kingdom) |>   atlas_occurrences()  occurrences ## # A tibble: 29 × 8 ##    eventDate            kingdom  decimalLatitude decimalLongitude scientificName          taxonConceptID recordID dataResourceName ##    <chr>                <chr>              <dbl>            <dbl> <chr>                   <chr>          <chr>    <chr>            ##  1 1929-12-31T14:00:00Z Animalia           -36.4             150. Acanthophis antarcticus urn:lsid:biod… 38dab01… NSW BioNet Atlas ##  2 1929-12-31T14:00:00Z Animalia           -26.8             151. Demansia psammophis     urn:lsid:biod… c770504… WildNet - Queen… ##  3 1929-12-31T14:00:00Z Animalia           -24.4             152. Oxyuranus scutellatus   urn:lsid:biod… cfb4279… WildNet - Queen… ##  4 1929-12-31T14:00:00Z Animalia           -20.8             145. Lerista wilkinsi        urn:lsid:biod… 1b64a15… WildNet - Queen… ##  5 1929-12-31T14:00:00Z Animalia           -23.9             150. Furina barnardi         urn:lsid:biod… 03e06c9… WildNet - Queen… ##  6 1929-12-31T14:00:00Z Animalia           -37.7             145. Tiliqua scincoides      urn:lsid:biod… e1e459c… Victorian Biodi… ##  7 1929-12-31T14:00:00Z Animalia           -15.5             145. Antaresia maculosa      urn:lsid:biod… 084bc0a… WildNet - Queen… ##  8 1929-12-31T14:00:00Z Animalia           -37.7             145. Tiliqua scincoides      urn:lsid:biod… 675f976… Victorian Biodi… ##  9 1929-12-31T14:00:00Z Animalia           -17.3             146. Simalia kinghorni       urn:lsid:biod… 0bd4268… WildNet - Queen… ## 10 1930-04-22T14:00:00Z Animalia            NA                NA  COLUBRIDAE              urn:lsid:biod… 815d01e… South Australia… ## # … with 19 more rows occurrences <- galah_call() |>   galah_identify(\"reptilia\") |>   galah_filter(year == 1930) |>   galah_select(starts_with(\"elev\") & ends_with(\"n\")) |>   atlas_occurrences()  occurrences"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/narrow_your_results.html","id":"galah_geolocate","dir":"Articles","previous_headings":"","what":"galah_geolocate","title":"Narrow your results","text":"Use galah_geolocate specify geographic area region limit search:","code":"# Get list of perameles species only in area specified: # (Note: This can also be specified by a shapefile) wkt <- \"POLYGON((131.36328125 -22.506468769126,135.23046875 -23.396716654542,134.17578125 -27.287832521411,127.40820312499 -26.661206402316,128.111328125 -21.037340349154,131.36328125 -22.506468769126))\"  galah_call() |>   galah_identify(\"perameles\") |>   galah_geolocate(wkt) |>   atlas_species() ## # A tibble: 2 × 10 ##   kingdom  phylum   class    order           family      genus     species                author  species_guid     vernacular_name ##   <chr>    <chr>    <chr>    <chr>           <chr>       <chr>     <chr>                  <chr>   <chr>            <chr>           ## 1 Animalia Chordata Mammalia Peramelemorphia Peramelidae Perameles Perameles eremiana     Spence… urn:lsid:biodiv… Desert Bandico… ## 2 Animalia Chordata Mammalia Peramelemorphia Peramelidae Perameles Perameles bougainville Quoy &… urn:lsid:biodiv… Western Barred…"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/narrow_your_results.html","id":"galah_down_to","dir":"Articles","previous_headings":"","what":"galah_down_to","title":"Narrow your results","text":"Use galah_down_to specify lowest taxonomic level contruct taxonomic tree:","code":"galah_call() |>   galah_identify(\"fungi\") |>   galah_down_to(phylum) |>   atlas_taxonomy() ##                    levelName ## 1  Fungi                     ## 2   ¦--Dikarya               ## 3   ¦   °--Entorrhizomycota  ## 4   ¦--Ascomycota            ## 5   ¦--Basidiomycota         ## 6   ¦--Blastocladiomycota    ## 7   ¦--Chytridiomycota       ## 8   ¦--Cryptomycota          ## 9   ¦--Glomeromycota         ## 10  ¦--Microspora            ## 11  ¦--Microsporidia         ## 12  ¦--Mucoromycota          ## 13  ¦--Neocallimastigomycota ## 14  ¦--Zoopagomycota         ## 15  °--Zygomycota"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/quick_start_guide.html","id":"about","dir":"Articles","previous_headings":"","what":"About","title":"Quick start guide","text":"galah R interface biodiversity data hosted Atlas Living Australia (ALA). ALA repository biodiversity data, focussed primarily observations individual life forms. Like Global Biodiversity Information Facility (GBIF), basic unit data ALA occurrence record, based ‘Darwin Core’ data standard. galah enables users locate download species observations, taxonomic information, record counts, associated media images sounds. Users can restrict queries particular taxa locations specifying columns rows returned query, restricting results observations meet particular quality-control criteria. minor exceptions, functions return tibble standard format.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/quick_start_guide.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Quick start guide","text":"install CRAN: install development version GitHub: Load package","code":"install.packages(\"galah\") install.packages(\"remotes\") remotes::install_github(\"AtlasOfLivingAustralia/galah\") library(galah)"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/quick_start_guide.html","id":"choosing-an-atlas","dir":"Articles","previous_headings":"","what":"Choosing an atlas","title":"Quick start guide","text":"default, galah downloads information Atlas Living Australia (ALA). show full list Atlases currently supported galah, use show_all_atlases(). Use galah_config() set Atlas use. automatically populate server configuration selected Atlas. default, atlas Australia.","code":"show_all_atlases() ## # A tibble: 6 × 3 ##   atlas     taxonomy_source taxonomy_info                                                     ##   <chr>     <chr>           <chr>                                                             ## 1 Australia ALA             https://bie.ala.org.au/                                           ## 2 Austria   GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 3 Guatemala GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 4 Spain     GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 5 Sweden    GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c ## 6 UK        NBN             https://www.nhm.ac.uk/our-science/data/uk-species.html galah_config(atlas = \"UK\")"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/quick_start_guide.html","id":"building-queries","dir":"Articles","previous_headings":"","what":"Building queries","title":"Quick start guide","text":"Functions return data chosen atlas prefix atlas_; e.g. find total number records atlas, use: pass complex queries, start galah_call() function pipe additional arguments modify query. modifying functions galah_ prefix support non-standard evaluation (NSE). narrow search particular taxonomic group, use galah_identify(). Note function accepts scientific names case sensitive. ’s good practice first use search_taxa() check taxa provide returns correct taxonomic results.","code":"atlas_counts() ## # A tibble: 1 × 1 ##       count ##       <int> ## 1 102070026 galah_call() |>    galah_filter(year >= 2020) |>    atlas_counts() ## # A tibble: 1 × 1 ##     count ##     <int> ## 1 7046687 search_taxa(\"reptilia\") # Check whether taxonomic info is correct ## # A tibble: 1 × 9 ##   search_term scientific_name taxon_concept_id                                    rank  match_type kingdom  phylum   class  issues ##   <chr>       <chr>           <chr>                                               <chr> <chr>      <chr>    <chr>    <chr>  <chr>  ## 1 reptilia    REPTILIA        urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b… class exactMatch Animalia Chordata Repti… noIss… galah_call() |>   galah_filter(year >= 2020) |>    galah_identify(\"reptilia\") |>    atlas_counts() ## # A tibble: 1 × 1 ##   count ##   <int> ## 1 45020"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/quick_start_guide.html","id":"downloading-records","dir":"Articles","previous_headings":"","what":"Downloading records","title":"Quick start guide","text":"common use case galah download ‘occurrence’ records; observations plants animals made contributors atlas. download, first register relevant atlas, provide registration email. can customise records require query atlas question: Check vignettes detail use functions.","code":"galah_config(email = \"email@email.com\") result <- galah_call() |>   galah_identify(\"Litoria\") |>   galah_filter(year >= 2020, cl22 == \"Tasmania\") |>   galah_select(basisOfRecord, group = \"basic\") |>   atlas_occurrences()  result |> head() ## # A tibble: 6 × 8 ##   decimalLatitude decimalLongitude eventDate              scientificName  taxonConceptID   recordID dataResourceName basisOfRecord ##             <dbl>            <dbl> <chr>                  <chr>           <chr>            <chr>    <chr>            <chr>         ## 1           -43.4             147. \"\"                     Litoria ewingii urn:lsid:biodiv… 780cf8e… iNaturalist Aus… HUMAN_OBSERV… ## 2           -43.2             147. \"2020-01-18T22:31:00Z\" Litoria ewingii urn:lsid:biodiv… cc9d437… iNaturalist Aus… HUMAN_OBSERV… ## 3           -43.2             147. \"\"                     Litoria ewingii urn:lsid:biodiv… d208d47… iNaturalist Aus… HUMAN_OBSERV… ## 4           -43.1             147. \"\"                     Litoria ewingii urn:lsid:biodiv… 95fab19… iNaturalist Aus… HUMAN_OBSERV… ## 5           -43.1             147. \"2020-04-30T06:10:00Z\" Litoria ewingii urn:lsid:biodiv… 2b7fdc5… Earth Guardians… HUMAN_OBSERV… ## 6           -43.1             147. \"2020-06-23T02:48:00Z\" Litoria ewingii urn:lsid:biodiv… 3524080… Earth Guardians… HUMAN_OBSERV…"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/quick_start_guide.html","id":"function-map","dir":"Articles","previous_headings":"","what":"Function map","title":"Quick start guide","text":"atlas_ functions support possible query modifiers (.e. functions search_ galah_ prefix). network diagram showing accepted arguments shown . Note pipe queries starting galah_call(), irrelevant arguments (silently) ignored.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/syntax_changes.html","id":"nse-and-comparison-to-dplyr","dir":"Articles","previous_headings":"","what":"NSE and comparison to dplyr","title":"Syntax changes","text":"galah_ functions now evaluate arguments just like dplyr. see mean, let’s look example dplyr::filter() works. Notice dplyr::filter galah_filter require logical arguments added using == sign: another example, notice galah_group_by() + atlas_counts() works similarly dplyr::group_by() + dplyr::count(): made move towards tidy evaluation make possible use piping building queries Atlas Living Australia. practice, means data queries can filtered just like might filter data.frame tidyverse suite functions.","code":"library(dplyr)  mtcars %>%    filter(mpg == 21) ##               mpg cyl disp  hp drat    wt  qsec vs am gear carb ## Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4 ## Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4 galah_call() %>%    galah_filter(year == 2021) %>%    atlas_counts() ## # A tibble: 1 × 1 ##     count ##     <int> ## 1 1161557 mtcars %>%    group_by(vs) %>%    count() ## # A tibble: 2 × 2 ## # Groups:   vs [2] ##      vs     n ##   <dbl> <int> ## 1     0    18 ## 2     1    14 galah_call() %>%   galah_group_by(biome) %>%   atlas_counts() ## # A tibble: 2 × 2 ##   biome          count ##   <chr>          <int> ## 1 TERRESTRIAL 93590939 ## 2 MARINE       3519480"},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/syntax_changes.html","id":"function-naming","dir":"Articles","previous_headings":"","what":"Function naming","title":"Syntax changes","text":"Prior version 1.4.0, galah naming conventions two major problems: download functions used prefix ala, actually query many living atlases query modifying functions used prefix select, reserved dplyr (elsewhere) operations specifically columns address concerns (smaller points), completed rewrite function names increase clarity (see table ). Deprecated function names now return warning message used, suggesting users switch new syntax.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/articles/syntax_changes.html","id":"piping-with-galah_call","dir":"Articles","previous_headings":"","what":"Piping with galah_call()","title":"Syntax changes","text":"Perhaps largest change galah 1.4.0 implementation piping using galah_call(). Beginning query galah_call() (sure add parentheses!) tells galah using pipes construct query. Follow preferred pipe (|> base %>% magrittr). can narrow query line--line using galah_ functions. Finally, end atlas_ function identify type data want query. Unlike old function names, removed future versions, intend continue supported un-piped syntax future, although piping works revamped function names. ’re new piping, ’s comparison code previous versions galah. Previously, wanted look number records bandicoot species every year 2010 2021, ’d something like : easy use multiple atlas_ functions use loops. However, now piping can like : second example, wanted download occurrence records bandicoots 2021, also include information records zero coordinates, previously : Now piping:","code":"library(purrr) library(dplyr)  taxa <- ala_species(taxa = select_taxa(\"perameles\"))$species years <- select_filters(year = seq(2010:2021))  taxa %>%   map_dfr( ~ ala_counts(     taxa = select_taxa(list(species = .x)),     filters = years,     group_by = \"year\") galah_call() %>%   galah_identify(\"perameles\") %>%   galah_filter(year > 2010) %>%   galah_group_by(species, year) %>%   atlas_counts() atlas_occurrences(taxa = select_taxa(\"perameles\"),                   filters = select_filters(year = 2021),                   columns = select_columns(group = \"basic\", \"ZERO_COORDINATE\")) galah_call() %>%   galah_identify(\"perameles\") %>%   galah_filter(year == 2021) %>%   galah_select(group = \"basic\", ZERO_COORDINATE) %>%   atlas_occurrences()"},{"path":"https://atlasoflivingaustralia.github.io/galah/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Westgate. Author, maintainer. Matilda Stevenson. Author. Dax Kellie. Author. Peggy Newman. Author.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stevenson M, Westgate M, Newman P (2022). galah: Atlas Living Australia (ALA) Data Resources R. R package version 1.4.0, https://CRAN.R-project.org/package=galah.","code":"@Manual{,   title = {galah: Atlas of Living Australia (ALA) Data and Resources in R},   author = {Matilda Stevenson and Martin Westgate and Peggy Newman},   year = {2022},   note = {R package version 1.4.0},   url = {https://CRAN.R-project.org/package=galah}, }"},{"path":"https://atlasoflivingaustralia.github.io/galah/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Atlas of Living Australia (ALA) Data and Resources in R","text":"vignette provides introduction package functions. outline package structure, list available functions, run ?galah view reference page.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Atlas of Living Australia (ALA) Data and Resources in R","text":"Install CRAN: Install development version GitHub: Linux first need ensure libcurl v8 (version <= 3.15) installed system — e.g. Ubuntu/Debian, open terminal : galah depends sf location-based searches. install galah need make sure system meets sf system requirements, specified ","code":"install.packages(\"galah\") install.packages(\"remotes\") remotes::install_github(\"AtlasOfLivingAustralia/galah\") sudo apt-get install libcurl4-openssl-dev libv8-3.14-dev"},{"path":"https://atlasoflivingaustralia.github.io/galah/index.html","id":"citations","dir":"","previous_headings":"","what":"Citations","title":"Atlas of Living Australia (ALA) Data and Resources in R","text":"generate citation package version using, can run ’re using occurrence data downloaded galah publication, please generate DOI cite . request DOI download occurrence record, set mint_doi = TRUE call atlas_occurrences(). generate citation downloaded occurrence records, pass data.frame generated atlas_citation().","code":"citation(package = \"galah\") # Download occurrence records with a DOI  occ <- atlas_occurrences(..., mint_doi = TRUE)  # See DOI attr(occ, \"doi\")  # Generate citation atlas_citation(occ)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_citation.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a citation for occurrence data — atlas_citation","title":"Generate a citation for occurrence data — atlas_citation","text":"data.frame generated using atlas_occurrences(), mint_doi argument set TRUE, DOI associated dataset appended resulting data.frame attribute. function simply formats DOI citation can included scientific publication. Please also consider citing package, using information citation(\"galah\").","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_citation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a citation for occurrence data — atlas_citation","text":"","code":"atlas_citation(data)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_citation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a citation for occurrence data — atlas_citation","text":"data data.frame: occurrence data generated atlas_occurrences()","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_citation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a citation for occurrence data — atlas_citation","text":"string containing citation dataset.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a count of records — atlas_counts","title":"Return a count of records — atlas_counts","text":"Prior downloading data often valuable estimate many records available, deciding query feasible, estimating long take download. Alternatively, kinds reporting, count observations may required, example understanding observations growing shrinking particular locations, particular taxa. end, atlas_counts() takes arguments format atlas_occurrences(), provides either total count records matching criteria, data.frame counts matching criteria supplied group_by argument.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a count of records — atlas_counts","text":"","code":"atlas_counts(   request = NULL,   identify = NULL,   filter = NULL,   geolocate = NULL,   group_by = NULL,   limit = 100,   type = c(\"record\", \"species\"),   refresh_cache = FALSE )"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a count of records — atlas_counts","text":"request optional data_rquest object: generated call galah_call(). identify data.frame: generated call galah_identify(). filter data.frame: generated call galah_filter() geolocate string: generated call galah_geolocate() group_by data.frame: object class galah_group_by, returned galah_group_by(). Alternatively vector field names (see search_fields() show_all_fields(). limit numeric: maximum number categories return, defaulting 100. limit NULL, results returned. categories take . type string: one c(\"record\", \"species\"). Defaults \"record\". \"species\", number species matching criteria returned, \"record\", number records matching criteria returned. refresh_cache logical: set TRUE galah_config(caching = TRUE) files cached previous query replaced current query","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a count of records — atlas_counts","text":"object class tbl_df data.frame (aka tibble) returning: single number, group_by specified , summary counts grouped field(s), group_by specified","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_counts.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a count of records — atlas_counts","text":"arguments, return total number records ALA  can group counts state territory galah_group_by  can add filter narrow search  Specify type = species count number species, group record counts kingdom   Using galah_group_by allows cross-tabulate using two different variables, similar using dplyr::group_by() %>% dplyr::count()","code":"atlas_counts() #> # A tibble: 1 x 1 #>       count #>       <int> #> 1 102070026 galah_call() |>   galah_group_by(stateProvince) |>   atlas_counts() #> # A tibble: 100 x 2 #>   stateProvince      count #>   <chr>              <int> #> 1 New South Wales 24938082 #> 2 Victoria        21775800 #> 3 Queensland      17550396 #> 4 South Australia  8449336 #> # ... with 96 more rows galah_call() |>   galah_filter(basisOfRecord == \"FossilSpecimen\") #> An object of type `data_request` containing: #>  #> $filter #> # A tibble: 1 x 4 #>   variable      logical value          query                                #>   <chr>         <chr>   <chr>          <chr>                                #> 1 basisOfRecord ==      FossilSpecimen \"(basisOfRecord:\\\"FossilSpecimen\\\")\"   atlas_counts()  #> # A tibble: 1 x 1 #>       count #>       <int> #> 1 102070026 records <- galah_call() |>   galah_group_by(kingdom) |>   atlas_counts(type = \"species\") records #> # A tibble: 10 x 2 #>    kingdom   count #>    <chr>     <dbl> #>  1 Animalia  90821 #>  2 Plantae   39883 #>  3 Fungi     16752 #>  4 Chromista  1822 #>  5 Protista    635 #>  6 Bacteria    525 #>  7 Protozoa    493 #>  8 Archaea       0 #>  9 Eukaryota     0 #> 10 Virus         0 records <- galah_call() |>   galah_filter(year > 2015) |>   galah_group_by(year, basisOfRecord) |>   atlas_counts() records #> # A tibble: 41 x 3 #>   basisOfRecord     year    count #>   <chr>             <chr>   <int> #> 1 HUMAN_OBSERVATION 2020  5825030 #> 2 HUMAN_OBSERVATION 2019  5401216 #> 3 HUMAN_OBSERVATION 2018  5267959 #> 4 HUMAN_OBSERVATION 2017  4348547 #> # ... with 37 more rows"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Download images, sounds and videos — atlas_media","title":"Download images, sounds and videos — atlas_media","text":"addition text data describing individual occurrences attributes, ALA stores images, sounds videos associated given record. atlas_media allows download media types.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download images, sounds and videos — atlas_media","text":"","code":"atlas_media(   request = NULL,   identify = NULL,   filter = NULL,   geolocate = NULL,   select = galah_select(group = \"basic\"),   download_dir,   refresh_cache = FALSE )"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download images, sounds and videos — atlas_media","text":"request optional data_rquest object: generated call galah_call(). identify data.frame: generated call galah_identify(). filter data.frame: generated call galah_filter() geolocate string: generated call galah_geolocate() select data.frame: generated call galah_select() download_dir string: path directory store downloaded media refresh_cache logical: set TRUE galah_config(caching = TRUE) files cached previous query replaced current query","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_media.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download images, sounds and videos — atlas_media","text":"object class tbl_df data.frame (aka tibble) metadata downloaded media","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_media.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download images, sounds and videos — atlas_media","text":"atlas_occurrences() works first finding occurrence records matching filter contain media, downloading metadata media media files. galah_filter() can take filter relating occurrences (e.g. basis records), filter relating media (e.g. type licence). may beneficial requesting large number records show progress bar setting verbose = TRUE galah_config().","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_media.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download images, sounds and videos — atlas_media","text":"Download Regent Honeyeater multimedia  Specify single media type download  Filter records particular licence type (WORK)  might also want check many records media files download . atlas_counts()","code":"media_data <- galah_call() |>     galah_identify(\"Regent Honeyeater\") |>     galah_filter(year == 2011) |>     atlas_media(download_dir = \"folder/your-directory\") media_data <- galah_call(      galah_identify(\"Eolophus Roseicapilla\") |>      galah_filter(multimedia == \"Sound\") |>      atlas_media() media_data <- galah_call()       galah_identify(\"Ornithorhynchus anatinus\") |>       galah_filter(year == 2020,         license = \"http://creativecommons.org/licenses/by-nc/4.0/\") |>        atlas_media() ) galah_call() |>      galah_filter(multimedia == c(\"Image\",\"Sound\",\"Video\")) |>      galah_group_by(multimedia) |>      atlas_counts()"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_occurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrence records — atlas_occurrences","title":"Occurrence records — atlas_occurrences","text":"common form data stored ALA observations individual life forms, known 'occurrences'. function allows user search occurrence records match specific criteria, return data.frame analysis. Optionally, user can also request DOI given download facilitate citation re-use specific data resources.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence records — atlas_occurrences","text":"","code":"atlas_occurrences(   request = NULL,   identify = NULL,   filter = NULL,   geolocate = NULL,   select = galah_select(group = \"basic\"),   mint_doi = FALSE,   doi = NULL,   refresh_cache = FALSE )"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Occurrence records — atlas_occurrences","text":"request optional data_rquest object: generated call galah_call(). identify data.frame: generated call galah_identify(). filter data.frame: generated call galah_filter() geolocate string: generated call galah_geolocate() select data.frame: generated call galah_select() mint_doi logical: default DOI generated. Set TRUE intend use data publication similar doi string: argument enables retrieval occurrence records previously downloaded ALA, using DOI generated data. refresh_cache logical: set TRUE galah_config(caching = TRUE) files cached previous query replaced current query","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Occurrence records — atlas_occurrences","text":"object class tbl_df data.frame (aka tibble) occurrences, containing columns specified galah_select(). data.frame object following attributes: listing user-supplied arguments data_request (.e., identify, filter, geolocate, select) doi data download search_url query ALA API","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_occurrences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Occurrence records — atlas_occurrences","text":"Note unless care taken, queries can particularly large. cases simply take long time process, number requested records >50 million call return data. Users can test whether threshold reached first calling atlas_counts() using arguments intend pass atlas_occurrences(). may also beneficial requesting large number records show progress bar setting verbose = TRUE galah_config().","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_occurrences.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Occurrence records — atlas_occurrences","text":"Search occurrences matching taxon identifier  Search occurrences year range  Search occurrences WKT-specified area  can also download occurrence records piping %>% prefer.","code":"galah_config(email = \"your-email@email.com\") galah_call() |>   galah_identify(\"Reptilia\") |>   atlas_occurrences() galah_call() |>   galah_filter(year >= 2010, year <= 2020) |>   atlas_occurrences() polygon <- \"POLYGON((146.24960 -34.05930,146.37045 -34.05930,146.37045 -34.152549,146.24960 -34.15254,146.24960 -34.05930))\" galah_call() |>    galah_geolocate(polygon) |>   atlas_occurrences() galah_call() %>%   galah_identify(\"Reptilia\") %>%   galah_filter(year >= 2010) %>%   galah_geolocate(polygon) %>%   atlas_occurrences()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Return species lists — atlas_species","title":"Return species lists — atlas_species","text":"reasons users may need check every record meeting search criteria (.e. using atlas_occurrences()), common use case simply identify species occur specified region, time period, taxonomic group. function returns data.frame one row per species, columns giving associated taxonomic information.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return species lists — atlas_species","text":"","code":"atlas_species(   request = NULL,   identify = NULL,   filter = NULL,   geolocate = NULL,   refresh_cache = FALSE )"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return species lists — atlas_species","text":"request optional data_rquest object: generated call galah_call(). identify data.frame: generated call galah_identify(). filter data.frame: generated call galah_filter() geolocate string: generated call galah_geolocate() refresh_cache logical: set TRUE galah_config(caching = TRUE) files cached previous query replaced current query","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return species lists — atlas_species","text":"object class tbl_df data.frame (aka tibble), returning matching species data.frame object attributes listing user-supplied arguments data_request(.e., identify, filter, geolocate, columns)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return species lists — atlas_species","text":"primary use case function extract species-level information given set criteria defined search_taxa(), galah_filter() galah_geolocate(). purpose simply get taxonomic information restricted filtering, search_taxa() efficient. Similarly, counts required include filter without returning taxonomic detail, atlas_counts() efficient (see examples).","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_species.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return species lists — atlas_species","text":"First, look genus interest ALA search_taxa()  good idea find many species taxon interested - case, genus Heleioporus - atlas_counts()  Now get taxonomic information species within genus atlas_species()  can also get taxonomic information species piping %>% |>. Just begin query galah_call()","code":"search_taxa(\"Heleioporus\") #> # A tibble: 1 x 13 #>   search_term scientific_name scientific_name_~ taxon_concept_id   rank  match_type kingdom phylum class order family genus #>   <chr>       <chr>           <chr>             <chr>              <chr> <chr>      <chr>   <chr>  <chr> <chr> <chr>  <chr> #> 1 Heleioporus Heleioporus     Gray, 1841        urn:lsid:biodiver~ genus exactMatch Animal~ Chord~ Amph~ Anura Limno~ Hele~ #> # ... with 1 more variable: issues <chr> galah_call() |>   galah_identify(\"Heleioporus\") |>   atlas_counts(type = \"species\") #> # A tibble: 1 x 1 #>   count #>   <int> #> 1     6 # (every row is a species with associated taxonomic data) galah_call() |>   galah_identify(\"Heleioporus\") |>   atlas_species() #> # A tibble: 6 x 10 #>   kingdom  phylum   class    order family          genus       species     author    species_guid           vernacular_name #>   <chr>    <chr>    <chr>    <chr> <chr>           <chr>       <chr>       <chr>     <chr>                  <chr>           #> 1 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Gray, 1~ urn:lsid:biodiversity~ Moaning Frog    #> 2 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Shaw & ~ urn:lsid:biodiversity~ Giant Burrowin~ #> 3 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ Gray, 18~ urn:lsid:biodiversity~ Western Spotte~ #> 4 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Lee & M~ urn:lsid:biodiversity~ Sand Frog       #> 5 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Lee & M~ urn:lsid:biodiversity~ Plains Frog     #> 6 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ Lee, 1967 urn:lsid:biodiversity~ Western Marsh ~ galah_call() |>   galah_identify(\"Heleioporus\") |>   atlas_species() #> # A tibble: 6 x 10 #>   kingdom  phylum   class    order family          genus       species     author    species_guid           vernacular_name #>   <chr>    <chr>    <chr>    <chr> <chr>           <chr>       <chr>       <chr>     <chr>                  <chr>           #> 1 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Gray, 1~ urn:lsid:biodiversity~ Moaning Frog    #> 2 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Shaw & ~ urn:lsid:biodiversity~ Giant Burrowin~ #> 3 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ Gray, 18~ urn:lsid:biodiversity~ Western Spotte~ #> 4 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Lee & M~ urn:lsid:biodiversity~ Sand Frog       #> 5 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ (Lee & M~ urn:lsid:biodiversity~ Plains Frog     #> 6 Animalia Chordata Amphibia Anura Limnodynastidae Heleioporus Heleioporu~ Lee, 1967 urn:lsid:biodiversity~ Western Marsh ~"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Search taxonomic trees — atlas_taxonomy","title":"Search taxonomic trees — atlas_taxonomy","text":"ALA ' internal taxonomy derived authoritative sources. atlas_taxonomy provides means query taxonomy, returning tree (class Node) showing lower clades contained within specified taxon.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search taxonomic trees — atlas_taxonomy","text":"","code":"atlas_taxonomy(request = NULL, identify = NULL, down_to = NULL)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search taxonomic trees — atlas_taxonomy","text":"request optional data_rquest object: generated call galah_call(). identify data.frame: generated call galah_identify(). down_to identity clade downwards search stop. specified using object class character galah_down_to, returned galah_down_to(). Also accepts string.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search taxonomic trees — atlas_taxonomy","text":"tree consisting objects class Node, containing requested taxonomy. node contains following attributes: name: scientific name taxon question rank: taxonomic rank taxon belongs guid: unique identifier used ALA authority: source taxonomic name & identifier","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search taxonomic trees — atlas_taxonomy","text":"approach used function recursive, meaning becomes slow large queries atlas_taxonomy(search_taxa(\"Plantae\"), down_to = galah_down_to(species)). Although inputs search_taxa down_to case-insensitive, node names always returned title case.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/atlas_taxonomy.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search taxonomic trees — atlas_taxonomy","text":"Get taxonomic tree Chordata class level  Get taxonomic tree Fungi phylum level","code":"galah_call() |>    galah_identify(\"chordata\") |>   galah_down_to(class) |>   atlas_taxonomy() #>                             levelName #> 1  Chordata                           #> 2   ¦--Cephalochordata                #> 3   ¦   °--Amphioxi                   #> 4   ¦--Craniata                       #> 5   ¦   °--Agnatha                    #> 6   ¦       ¦--Cephalasipidomorphi    #> 7   ¦       °--Myxini                 #> 8   ¦--Tunicata                       #> 9   ¦   ¦--Appendicularia             #> 10  ¦   ¦--Ascidiacea                 #> 11  ¦   °--Thaliacea                  #> 12  °--Vertebrata                     #> 13      °--Gnathostomata              #> 14          ¦--Amphibia               #> 15          ¦--Aves                   #> 16          ¦--Mammalia               #> 17          ¦--Pisces                 #> 18          ¦   ¦--Actinopterygii     #> 19          ¦   ¦--Chondrichthyes     #> 20          ¦   ¦--Cephalaspidomorphi #> 21          ¦   °--Sarcopterygii      #> 22          °--Reptilia galah_call() |>   galah_identify(\"fungi\") |>   galah_down_to(class) |>   atlas_taxonomy() #>                              levelName #> 1  Fungi                               #> 2   ¦--Ascomycota                      #> 3   ¦   ¦--Ascomycetes                 #> 4   ¦   ¦--Discomycetes                #> 5   ¦   ¦--Pezizomycotina              #> 6   ¦   ¦   ¦--Arthoniomycetes         #> 7   ¦   ¦   ¦--Dothideomycetes         #> 8   ¦   ¦   ¦--Eurotiomycetes          #> 9   ¦   ¦   ¦--Geoglossomycetes        #> 10  ¦   ¦   ¦--Laboulbeniomycetes      #> 11  ¦   ¦   ¦--Lecanoromycetes         #> 12  ¦   ¦   ¦--Leotiomycetes           #> 13  ¦   ¦   ¦--Lichinomycetes          #> 14  ¦   ¦   ¦--Orbiliomycetes          #> 15  ¦   ¦   ¦--Pezizomycetes           #> 16  ¦   ¦   ¦--Sordariomycetes         #> 17  ¦   ¦   °--Xylonomycetes           #> 18  ¦   ¦--Saccharomycotina            #> 19  ¦   ¦   °--Saccharomycetes         #> 20  ¦   ¦--Taphrinomycotina            #> 21  ¦   ¦   ¦--Neolectomycetes         #> 22  ¦   ¦   ¦--Pneumocystidomycetes    #> 23  ¦   ¦   ¦--Schizosaccharomycetes   #> 24  ¦   ¦   °--Taphrinomycetes         #> 25  ¦   °--Pyrenomycete                #> 26  ¦--Basidiomycota                   #> 27  ¦   ¦--Agaricomycotina             #> 28  ¦   ¦   ¦--Agaricomycetes          #> 29  ¦   ¦   ¦--Dacrymycetes            #> 30  ¦   ¦   °--Tremellomycetes         #> 31  ¦   ¦--Basidiomycetes              #> 32  ¦   ¦--Entorrhizomycetes           #> 33  ¦   ¦--Pucciniomycotina            #> 34  ¦   ¦   ¦--Agaricostilbomycetes    #> 35  ¦   ¦   ¦--Atractiellomycetes      #> 36  ¦   ¦   ¦--Classiculomycetes       #> 37  ¦   ¦   ¦--Cryptomycocolacomycetes #> 38  ¦   ¦   ¦--Cystobasidiomycetes     #> 39  ¦   ¦   ¦--Microbotryomycetes      #> 40  ¦   ¦   ¦--Pucciniomycetes         #> 41  ¦   ¦   ¦--Spiculogloeomycetes     #> 42  ¦   ¦   ¦--Tritirachiomycetes      #> 43  ¦   ¦   °--Urediniomycetes         #> 44  ¦   ¦--Ustilaginomycotina          #> 45  ¦   ¦   ¦--Exobasidiomycetes       #> 46  ¦   ¦   ¦--Malasseziomycetes       #> 47  ¦   ¦   ¦--Monilielliomycetes      #> 48  ¦   ¦   ¦--Ustilaginomycetes       #> 49  ¦   ¦   °--Ustomycetes             #> 50  ¦   ¦--Wallemiomycetes             #> 51  ¦   °--Wallemiomycotina            #> 52  ¦       °--Wallemiomycetes         #> 53  ¦--Chytridiomycota                 #> 54  ¦   ¦--Blastocladiomycetes         #> 55  ¦   ¦--Chytridiomycetes            #> 56  ¦   ¦--Monoblepharidomycetes       #> 57  ¦   °--Neocallimastigomycetes      #> 58  ¦--Glomeromycota                   #> 59  ¦   °--Glomeromycetes              #> 60  ¦--Microspora                      #> 61  ¦   °--Microsporea                 #> 62  °--Zygomycota                      #> 63      ¦--Entomophthoromycotina       #> 64      ¦   ¦--Basidiobolomycetes      #> 65      ¦   ¦--Entomophthoromycetes    #> 66      ¦   °--Neozygitomycetes        #> 67      ¦--Trichomycetes               #> 68      °--Zygomycetes"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/clear_cached_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear previously cached files — clear_cached_files","title":"Clear previously cached files — clear_cached_files","text":"Deletes cached files within cached file directory query metadata","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/clear_cached_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear previously cached files — clear_cached_files","text":"","code":"clear_cached_files()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/clear_cached_files.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear previously cached files — clear_cached_files","text":"First, set caching true galah_config(). create data query. data download cached temporary directory.  clear cached files directory, use clear_cached_files()","code":"galah_config(caching = TRUE) dat <- atlas_counts(group_by = galah_group_by(year)) clear_cached_files()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated","title":"Deprecated functions — deprecated","text":"Use galah_identify() instead select_taxa(). Use galah_select() instead select_columns(). Use galah_filter() instead select_filters(). Use galah_geolocate() instead select_locations(). Use atlas_occurrences() instead ala_occurrences(). Use atlas_counts() instead ala_counts(). Use atlas_species() instead ala_species(). Use atlas_taxonomy() instead ala_taxonomy(). Use atlas_media() instead ala_media(). Use atlas_citation() instead ala_citation(). Use show_all_reasons() instead find_reasons(). Use show_all_cached_files() instead find_cached_files(). Use show_all_ranks() instead find_ranks(). Use show_all_profiles() instead find_profiles(). Use show_all_atlases() instead find_atlases(). Use galah_config() instead ala_config().","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated","text":"","code":"select_taxa(query, is_id = FALSE)  select_columns(..., group)  select_filters(..., profile = NULL)  select_locations(query)  ala_occurrences(   taxa = NULL,   filters = NULL,   locations = NULL,   columns = select_columns(group = \"basic\"),   mint_doi = FALSE,   doi = NULL,   refresh_cache = FALSE )  ala_counts(   taxa = NULL,   filters = NULL,   locations = NULL,   limit = 100,   type = c(\"record\", \"species\"),   refresh_cache = FALSE )  ala_species(   taxa = NULL,   filters = NULL,   locations = NULL,   refresh_cache = FALSE )  ala_taxonomy(taxa, down_to)  ala_media(   taxa = NULL,   filters = NULL,   locations = NULL,   columns = select_columns(group = \"basic\"),   download_dir,   refresh_cache = FALSE )  ala_citation(data)  find_reasons()  find_cached_files()  find_ranks()  find_profiles()  find_atlases()  ala_config(..., profile_path = NULL)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah.html","id":null,"dir":"Reference","previous_headings":"","what":"Download biodiversity data from the Atlas of Living Australia — galah","title":"Download biodiversity data from the Atlas of Living Australia — galah","text":"galah R interface Atlas Living Australia (ALA; https://www.ala.org.au/), biodiversity data repository focussed primarily observations individual life forms. also supports access 'living atlases' use computational infrastructure. basic unit data ALA occurrence record, based 'Darwin Core' data standard (https://dwc.tdwg.org). galah enables users locate download species observations, taxonomic information, associated media images sounds, restrict queries particular taxa locations. Users can specify columns returned query, restrict results observations meet particular quality-control criteria.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Download biodiversity data from the Atlas of Living Australia — galah","text":"Start data query galah_call() Start build data query Narrow results galah_identify() Search taxonomic identifiers galah_filter() Filter records galah_select() Fields report information galah_group_by() Fields group counts galah_geolocate() Specify location galah_down_to() Specify taxonomic rank Download data atlas_occurrences() Download occurrence records atlas_counts() Count number records species returned query atlas_species() Download species lists atlas_taxonomy() Return section ALA taxonomic tree atlas_media() Download images sounds Look information search_taxa() Search taxa using text-search search_identifiers() Search taxa using taxonomic identifiers search_fields() Search specific valid fields filter queries search_field_values() Search possible values filter given field search_profile_attributes() List quality filters data quality profile show_all_fields() List valid fields filter categorise queries show_all_profiles() List data quality profiles show_all_reasons() List valid download reasons show_all_atlases() List supported international atlases show_all_ranks() List available taxonomic ranks Manage cache show_all_cached_files() List previously cached files metadata clear_cached_files() Clear previously cached files metadata Configure session galah_config() Package configuration options Cite atlas_citation() Citation dataset","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah.html","id":"terminology","dir":"Reference","previous_headings":"","what":"Terminology","title":"Download biodiversity data from the Atlas of Living Australia — galah","text":"get value galah, helpful understand terminology used ALA. occurrence record contains taxonomic information, usually information observation , location. addition record-specific information, ALA appends contextual information record, particularly data spatial layers reflecting climate gradients political boundaries. ALA also runs number quality checks record, resulting assertions attached record. piece information associated given occurrence record stored field, corresponds column imported R data.frame. See show_all_fields() view valid fields, layers assertions, conduct search using search_fields(). Data fields important provide means filter occurrence records;  .e. return information need, . Consequently, much architecture galah designed make filtering simple possible. Functions galah_ prefix offer ways shape query call. galah_ function allows user filter different way. , function suffix reveals one . galah_filter, galah_select galah_group_by intentionally match dplyr's select(), filter() group_by() functions, name used. example, can use galah_select() choose information returned columns. Alternatively, can use galah_filter() filter rows. can also choose specific taxa galah_identify() choose specific location using galah_geolocate(). combining different filter functions, possible build complex queries return valuable information given problem. notable extension filtering approach remove records low 'quality'. ALA performs quality control checks records stores. checks used generate new fields, can used filter records unsuitable particular applications. However, many possible data quality checks, always clear appropriate given instance. Therefore, galah supports ALA data quality profiles, can passed galah_filter() quickly remove undesirable records. full list data quality profiles returned show_all_profiles(). outside Australia, 'galah' common name Eolophus roseicapilla, widely-distributed Australian bird species.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah.html","id":"package-design","dir":"Reference","previous_headings":"","what":"Package design","title":"Download biodiversity data from the Atlas of Living Australia — galah","text":"cases, users primarily interested using galah return data one living atlases. functions named prefix atlas_, followed suffix describing information provide. example, users wish download occurrence data can use function atlas_occurrences(). Alternatively, users wish download data species (rather occurrence record) can use atlas_species() download media content (largely images) using atlas_media(). Users can also assess many records meet particular criteria using atlas_counts() return taxonomic tree specific clade one level another level (e.g., family genus). functions return data.frame standard format, except atlas_taxonomy() returns data.tree. Functions galah designed according nested architecture. Users require data begin locating relevant atlas_ function; arguments within function call correspondingly-named galah_ functions; specific values can interpreted galah_ functions given functions prefix search_ show_all_; desired taxa can also identified using search_taxa() passed within galah_identify() taxa argument atlas_ functions.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download biodiversity data from the Atlas of Living Australia — galah","text":"information ALA API, visit https://api.ala.org.au/. questions, comments suggestions, please email support@ala.org.au.","code":""},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download biodiversity data from the Atlas of Living Australia — galah","text":"Maintainer: Martin Westgate martin.westgate@csiro.au Authors: Matilda Stevenson Dax Kellie dax.kellie@csiro.au Peggy Newman peggy.newman@csiro.au","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Start building a data query — galah_call","title":"Start building a data query — galah_call","text":"download data ALA (another atlas), one must construct data query. query tells atlas API data download return, well filtered. galah package enables users construct data queries using piping syntax (.e., %>% magrittr, |> base). Building data query using piping allows users use functions like search_taxa(), galah_filter(), [galah_select()], galah_group_by(), galah_down_to() specify filters queries line--line, narrowing results query. Users finish query atlas_ function identify type data wish download (.e., atlas_occurrences(), atlas_counts(), atlas_species(), atlas_taxonomy() atlas_media()).","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start building a data query — galah_call","text":"","code":"galah_call(   identify = NULL,   filter = NULL,   select = NULL,   geolocate = NULL,   group_by = NULL,   down_to = NULL,   ... )  # S3 method for data_request print(x, ...)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start building a data query — galah_call","text":"identify data.frame: generated call galah_identify(). filter data.frame: generated call select_filters() select data.frame: generated call galah_select() geolocate string: generated call galah_geolocate() group_by data.frame: generated call galah_group_by() down_to data.frame: generated call galah_down_to() ... function-specific request parameters","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_call.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start building a data query — galah_call","text":"Using galah_call() pipes allows build, filter download data queries way wrangle data dplyr tidyverse. Begin query galah_call(), use either %>% magrittr |> base narrow/filter results line--line. Find number records Aves 2001 2004 year  Download Eolophus records 2001 2004  Find information species Cacatuidae family","code":"library(magrittr)  galah_call() %>%   galah_identify(\"Aves\") %>%   galah_filter(year > 2000 & year < 2005) %>%   galah_group_by() %>%   atlas_counts() galah_config(email = \"your-email@email.com\")  galah_call() %>%    galah_identify(\"Eolophus\") %>%   galah_filter(year > 2000 & year < 2005) %>%   atlas_occurrences() galah_call() %>%   galah_identify(\"Cacatuidae\") %>%   atlas_species()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set configuration options that control galah behaviour — galah_config","title":"Get or set configuration options that control galah behaviour — galah_config","text":"galah package supports large data downloads, also interfaces ALA requires users services provide registered email address reason downloading data. galah_config function provides way manage issues simply possible.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set configuration options that control galah behaviour — galah_config","text":"","code":"galah_config(..., profile_path = NULL)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set configuration options that control galah behaviour — galah_config","text":"... Options can defined using form name = value. Valid arguments : atlas string: Living Atlas point , Australia default caching logical: TRUE, results cached, cached results re-used). FALSE, data downloaded. cache_directory string: directory use cache. default temporary directory, means results cached within R session cleared automatically user exits R. user may wish set non-temporary directory caching across sessions. directory must exist file system. download_reason_id numeric string: \"download reason\" required. ALA services, either numeric ID (currently 0--13) string (see show_all_reasons() list valid ID codes names). default NA. ALA services require valid download_reason_id code, either specified directly associated R function. email string: email address registered ALA address. registered email required functions galah. send_email logical: receive email query atlas_occurrences()? Defaults FALSE; can useful instances, example tracking DOIs assigned specific downloads later citation. verbose logical: galah give verbose output assist debugging? Defaults FALSE. run_checks logical: galah run checks filters columns. making lots requests sequentially, checks can slow process lead HTTP 500 errors, turned . Defaults TRUE. profile_path string: (optional), path directory store config values . provided, config values written new existing .Rprofile file future sessions. NULL default.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set configuration options that control galah behaviour — galah_config","text":"galah_config(), list options. galah_config(...) called arguments, nothing returned configuration set.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_config.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set configuration options that control galah behaviour — galah_config","text":"configure session allow download occurrence records, enter email galah_config(). email registered ALA, can  Turn caching session  required ALA services add reason downloading data. look valid reasons enter, use show_all_reasons()  Add selected reason using option download_reason_id  can also make debugging session easier setting verbose = TRUE","code":"galah_config(email = \"your-email@email.com\") galah_config(caching = FALSE) show_all_reasons() #> # A tibble: 13 x 2 #>       id name                             #>    <int> <chr>                            #>  1     0 conservation management/planning #>  2     1 biosecurity management/planning  #>  3     2 environmental assessment         #>  4     3 education                        #>  5     4 scientific research              #>  6     5 collection management            #>  7     6 other                            #>  8     7 ecological research              #>  9     8 systematic research/taxonomy     #> 10    10 testing                          #> 11    11 citizen science                  #> 12    12 restoration/remediation          #> 13    13 species modelling galah_config(download_reason_id = 0) galah_config(download_reason_id = 0,              verbose = TRUE)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_down_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the lowest taxonomic rank required in a downwards search — galah_down_to","title":"Specify the lowest taxonomic rank required in a downwards search — galah_down_to","text":"atlas_taxonomy generates downwards search taxonomic tree. function can used specify name valid taxonomic rank using non-standard evaluation (NSE), consistency galah_ functions.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_down_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the lowest taxonomic rank required in a downwards search — galah_down_to","text":"","code":"galah_down_to(...)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_down_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the lowest taxonomic rank required in a downwards search — galah_down_to","text":"... name single taxonomic rank","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_down_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the lowest taxonomic rank required in a downwards search — galah_down_to","text":"string named rank","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_down_to.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify the lowest taxonomic rank required in a downwards search — galah_down_to","text":"example using galah_down_to() atlas_taxonomy(). Return taxonomic tree Chordata class level  Another example: return taxonomic tree Cacatuidae genus level","code":"galah_call() |>     galah_identify(\"Chordata\") |>     galah_down_to(class) |>     atlas_taxonomy() #>                             levelName #> 1  Chordata                           #> 2   ¦--Cephalochordata                #> 3   ¦   °--Amphioxi                   #> 4   ¦--Craniata                       #> 5   ¦   °--Agnatha                    #> 6   ¦       ¦--Cephalasipidomorphi    #> 7   ¦       °--Myxini                 #> 8   ¦--Tunicata                       #> 9   ¦   ¦--Appendicularia             #> 10  ¦   ¦--Ascidiacea                 #> 11  ¦   °--Thaliacea                  #> 12  °--Vertebrata                     #> 13      °--Gnathostomata              #> 14          ¦--Amphibia               #> 15          ¦--Aves                   #> 16          ¦--Mammalia               #> 17          ¦--Pisces                 #> 18          ¦   ¦--Actinopterygii     #> 19          ¦   ¦--Chondrichthyes     #> 20          ¦   ¦--Cephalaspidomorphi #> 21          ¦   °--Sarcopterygii      #> 22          °--Reptilia galah_call() |>   galah_identify(\"Cacatuidae\") |>   galah_down_to(genus) |>   atlas_taxonomy() #>                    levelName #> 1  Cacatuidae                #> 2   ¦--Cacatuinae            #> 3   ¦   ¦--Cacatuini         #> 4   ¦   ¦   ¦--Cacatua       #> 5   ¦   ¦   ¦--Callocephalon #> 6   ¦   ¦   ¦--Eolophus      #> 7   ¦   ¦   °--Lophochroa    #> 8   ¦   °--Microglossini     #> 9   ¦       °--Probosciger   #> 10  ¦--Calyptorhynchinae     #> 11  ¦   °--Calyptorhynchus   #> 12  °--Nymphicinae           #> 13      °--Nymphicus"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a query by specifying filters — galah_filter","title":"Narrow a query by specifying filters — galah_filter","text":"'filters' arguments form field logical value used narrow number records returned specific query. example, common users request records particular year (year == 2020), return records except fossils (basisOfRecord != \"FossilSpecimen\"). result galah_filter can passed filters argument atlas_occurrences(), atlas_species() atlas_counts(). galah_filter uses non-standard evaluation (NSE), designed compatible possible dplyr::filter syntax.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a query by specifying filters — galah_filter","text":"","code":"galah_filter(..., profile = NULL)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a query by specifying filters — galah_filter","text":"... filters, form field logical value profile string: (optional) data quality profile apply records. See show_all_profiles() valid profiles. default profile applied.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow a query by specifying filters — galah_filter","text":"object class data.frame galah_filter, containing filter values.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Narrow a query by specifying filters — galah_filter","text":"statements passed galah_filter() (except profile argument) take form field - logical - value. Permissible examples include: = == (e.g. year = 2020) !=, e.g. year != 2020) > >= (e.g. year >= 2020) < <= (e.g. year <= 2020) statements (e.g. year == 2018 | year == 2020) statements (e.g. year >= 2000 & year <= 2020) cases R fail parse inputs single equals sign (=), particularly statements separated & |. problem can avoided using double-equals (==) instead.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_filter.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a query by specifying filters — galah_filter","text":"Create custom filter records interest  Add default ALA data quality profile  Use filters exclude particular values  Separating statements comma equivalent statement  statements must include field name  possible use object specify required values   solr supports range queries text well numbers. following queries Australian States Territories alphabetically \"Tasmania\"","code":"filters <- galah_filter(     basisOfRecord == \"HumanObservation\",     year >= 2010,     stateProvince == \"New South Wales\") filters <- galah_filter(     basisOfRecord == \"HumanObservation\",     year >= 2020,     stateProvince == \"New South Wales\",     profile = \"ALA\") filter <- galah_filter(year >= 2010 & year != 2021)  atlas_counts(filter = filter) #> # A tibble: 1 x 1 #>      count #>      <int> #> 1 43916661 galah_filter(year >= 2010 & year < 2020) # is the same as: galah_filter(year >= 2010, year < 2020) galah_filter(year == 2010 | year == 2021) # this works (note double equals) galah_filter(year == c(2010, 2021)) # same as above  galah_filter(year == 2010 | 2021) # this fails # Numeric example  year_value <- 2010  galah_call() %>%   galah_filter(year > year_value) %>%   atlas_counts() #> # A tibble: 1 x 1 #>      count #>      <int> #> 1 42816943 # Categorical example  basis_of_record <- c(\"HumanObservation\", \"MaterialSample\")  galah_call() %>%   galah_filter(basisOfRecord == basis_of_record) %>%   atlas_counts() #> # A tibble: 1 x 1 #>      count #>      <int> #> 1 82809464 galah_call() %>%   galah_filter(cl22 >= \"Tasmania\") %>%   atlas_counts() #> # A tibble: 1 x 1 #>      count #>      <int> #> 1 30230213"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_geolocate.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a query using a WKT string — galah_geolocate","title":"Narrow a query using a WKT string — galah_geolocate","text":"Restrict results specified area. Areas must polygons specified either sf object, 'well-known text' (wkt) string.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_geolocate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a query using a WKT string — galah_geolocate","text":"","code":"galah_geolocate(...)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_geolocate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a query using a WKT string — galah_geolocate","text":"... single wkt string sf object","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_geolocate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow a query using a WKT string — galah_geolocate","text":"length-1 object class character atlas_locations, containing WKT string representing area provided.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_geolocate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Narrow a query using a WKT string — galah_geolocate","text":"WKT strings longer 10000 characters accepted ALA- sf object WKT string may need simplified.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_geolocate.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a query using a WKT string — galah_geolocate","text":"Search records using shapefile  Search records using Well-known Text geometry (WKT)","code":"galah_config(email = \"your-email@email.com\")  location <- galah_geolocate(st_read(path/to/shapefile)) atlas_occurrences(geolocate = location) wkt <- \"POLYGON((142.36228 -29.00703,142.74131 -29.00703,142.74131 -29.39064,142.36228 -29.39064,142.36228 -29.00703))\"  atlas_counts(geolocate = galah_geolocate(wkt)) #> # A tibble: 1 x 1 #>   count #>   <int> #> 1  3300"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify fields to group when downloading record counts — galah_group_by","title":"Specify fields to group when downloading record counts — galah_group_by","text":"atlas_counts supports server-side grouping data. Grouping can used return record counts grouped multiple, valid fields (found search_fields. Use galah_group_by using group_by argument atlas_counts return record counts summed one valid fields.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify fields to group when downloading record counts — galah_group_by","text":"","code":"galah_group_by(..., expand = TRUE)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify fields to group when downloading record counts — galah_group_by","text":"... zero individual column names include expand logical: passed group_by argument atlas_counts, factor levels expanded? Defaults TRUE.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify fields to group when downloading record counts — galah_group_by","text":"arguments provided, returns data.frame columns name type, per galah_select(); arguments provided, returns NULL.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_group_by.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify fields to group when downloading record counts — galah_group_by","text":"Return record counts since 2010 year   Return record counts since 2010 year data provider   Return record counts Litoria species year since 2015, limiting results top 5 year","code":"records <- galah_call() |>      galah_filter(year > 2010) |>     galah_group_by(year) |>     atlas_counts() records #> # A tibble: 12 x 2 #>    year    count #>    <chr>   <int> #>  1 2020  5843340 #>  2 2019  5506924 #>  3 2018  5418009 #>  4 2017  4648403 #>  5 2016  3844787 #>  6 2014  3767573 #>  7 2015  3605917 #>  8 2013  3505658 #>  9 2012  2933981 #> 10 2011  2539004 #> 11 2021  1161557 #> 12 2022    41790 records <- galah_call() |>     galah_filter(year > 2010) |>     galah_group_by(year, dataResourceName) |>     atlas_counts() records #> # A tibble: 1,048 x 3 #>   year  dataResourceName              count #>   <chr> <chr>                         <int> #> 1 2020  eBird Australia             4589800 #> 2 2020  iNaturalist Australia        671032 #> 3 2020  NSW BioNet Atlas             372617 #> 4 2020  Earth Guardians Weekly Feed   71783 #> # ... with 1,044 more rows records <- galah_call() |>     galah_identify(\"Litoria\") |>     galah_filter(year > 2015) |>     galah_group_by(year, species) |>     atlas_counts(limit = 5) records #> # A tibble: 35 x 3 #>   year  species            count #>   <chr> <chr>              <int> #> 1 2018  Litoria peronii    10497 #> 2 2018  Litoria fallax      7013 #> 3 2018  Litoria caerulea    3073 #> 4 2018  Litoria verreauxii  2980 #> # ... with 31 more rows"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_identify.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow a query by passing taxonomic identifiers — galah_identify","title":"Narrow a query by passing taxonomic identifiers — galah_identify","text":"conducting search creating data query, common identify known taxon group taxa narrow records results returned. function allows users pass scientific names taxonomic identifiers pipes provide data biological group interest.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_identify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow a query by passing taxonomic identifiers — galah_identify","text":"","code":"galah_identify(..., search = TRUE)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_identify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow a query by passing taxonomic identifiers — galah_identify","text":"... one scientific names (search = TRUE) taxonomic identifiers (search = FALSE); object class ala_id (search_taxa), gbifid, nbnid (taxize) international atlases. search (logical); results question passed search_taxa? Ignored object class ala_id, gbifid, nbnid given ....","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_identify.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow a query by passing taxonomic identifiers — galah_identify","text":"galah_identify() used identify taxa want returned search data query. good use search_taxa() search_identifiers() first check taxa provide galah_identify() return correct results. Specify taxon. valid taxon return identifier.  Specify one taxon time.  Use galah_identify() narrow queries  already know valid taxon identifier, add set search = FALSE.","code":"galah_identify(\"reptilia\") #> # A tibble: 1 x 1 #>   identifier                                                                  #>   <chr>                                                                       #> 1 urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b3c-45ff-833b-550efd40c399 galah_identify(\"reptilia\", \"mammalia\", \"aves\", \"pisces\") #> # A tibble: 4 x 1 #>   identifier                                                                  #>   <chr>                                                                       #> 1 urn:lsid:biodiversity.org.au:afd.taxon:682e1228-5b3c-45ff-833b-550efd40c399 #> 2 urn:lsid:biodiversity.org.au:afd.taxon:e9e7db31-04df-41fb-bd8d-e0b0f3c332d6 #> 3 urn:lsid:biodiversity.org.au:afd.taxon:5ed80139-31bb-48a8-9f57-42d8015dacbb #> 4 urn:lsid:biodiversity.org.au:afd.taxon:e22efeb4-2cb5-4250-8d71-61c48bdaa051 galah_call() %>%    galah_identify(\"Eolophus\") %>%   atlas_counts() #> # A tibble: 1 x 1 #>    count #>    <int> #> 1 856571 galah_call() %>%    galah_identify(\"urn:lsid:biodiversity.org.au:afd.taxon:b2de5e40-df8f-4339-827d-25e63454a4a2\",                   search = FALSE) %>%   atlas_counts() #> # A tibble: 1 x 1 #>    count #>    <int> #> 1 856571"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify fields for occurrence download — galah_select","title":"Specify fields for occurrence download — galah_select","text":"living atlases store content hundreds different fields, users often require thousands millions records time. reduce time taken download data, limit complexity resulting data.frame, sensible restrict fields returned atlas_occurrences(). function allows easy selection fields, commonly-requested groups columns, following syntax shared dplyr::select().","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify fields for occurrence download — galah_select","text":"","code":"galah_select(..., group = c(\"basic\", \"event\", \"assertions\"))"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify fields for occurrence download — galah_select","text":"... zero individual column names include group string: (optional) name one column groups include. Valid options \"basic\", \"event\" \"assertion\"","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify fields for occurrence download — galah_select","text":"object class data.frame galah_selectspecifying name type column include call atlas_counts() atlas_occurrences().","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify fields for occurrence download — galah_select","text":"Calling argument group = \"basic\" returns following columns: decimalLatitude decimalLongitude eventDate scientificName taxonConceptID recordID dataResourceName Using group = \"event\" returns following columns: eventRemarks eventTime eventID eventDate samplingEffort samplingProtocol Using group = \"assertions\" returns quality assertion-related columns. list assertions shown search_fields(type = \"assertions\").","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/galah_select.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify fields for occurrence download — galah_select","text":"Download occurrence records Perameles taken 2001, returning scientific name event date  Download occurrence record Perameles taken 2001, returning \"basic\" group columns plus Basis Record","code":"galah_config(email = \"your-email@email.com\") galah_call() |>   galah_identify(\"perameles\")|>   galah_filter(year == 2001) |>   galah_select(scientificName, eventDate) |>   atlas_occurrences() galah_call() |>   galah_identify(\"perameles\") |>   galah_filter(year == 2001) |>   galah_select(group = \"basic\", basisOfRecord) |>   atlas_occurrences()"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_field_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for valid options of a categorical field — search_field_values","title":"Search for valid options of a categorical field — search_field_values","text":"building set filters galah_filter(), user can use function check values provided valid options.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_field_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for valid options of a categorical field — search_field_values","text":"","code":"search_field_values(field, limit = 20)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_field_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for valid options of a categorical field — search_field_values","text":"field string: field return categories . Use search_fields() view valid fields. limit numeric: maximum number categories return. 20 default.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_field_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for valid options of a categorical field — search_field_values","text":"object class tbl_df data.frame (aka tibble) containing columns field (user-supplied) category (.e. field values).","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_field_values.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for valid options of a categorical field — search_field_values","text":"Find valid values can use filter categorise results field \"basisOfRecord\"  Find valid values filter categorise results field \"stateProvince\"  Use values galah_filter() tp filter results atlas_ functions. example, can return number records Tasmania","code":"search_field_values(\"basisOfRecord\") #> # A tibble: 8 x 2 #>   field         category            #>   <chr>         <chr>               #> 1 basisOfRecord HUMAN_OBSERVATION   #> 2 basisOfRecord PRESERVED_SPECIMEN  #> 3 basisOfRecord OBSERVATION         #> 4 basisOfRecord MACHINE_OBSERVATION #> 5 basisOfRecord MATERIAL_SAMPLE     #> 6 basisOfRecord UNKNOWN             #> 7 basisOfRecord LIVING_SPECIMEN     #> 8 basisOfRecord FOSSIL_SPECIMEN search_field_values(\"stateProvince\") #> # A tibble: 20 x 2 #>    field         category                     #>    <chr>         <chr>                        #>  1 stateProvince New South Wales              #>  2 stateProvince Victoria                     #>  3 stateProvince Queensland                   #>  4 stateProvince South Australia              #>  5 stateProvince Western Australia            #>  6 stateProvince Northern Territory           #>  7 stateProvince Tasmania                     #>  8 stateProvince Australian Capital Territory #>  9 stateProvince Canterbury Land District     #> 10 stateProvince Wellington Land District     #> 11 stateProvince Southland Land District      #> 12 stateProvince Nelson Land District         #> 13 stateProvince North Auckland Land District #> 14 stateProvince Otago Land District          #> 15 stateProvince North Island                 #> 16 stateProvince Morobe                       #> 17 stateProvince Westland Land District       #> 18 stateProvince Marlborough Land District    #> 19 stateProvince South Auckland               #> 20 stateProvince South Island galah_call() |>   galah_filter(stateProvince == \"Tasmania\") |>   atlas_counts() #> # A tibble: 1 x 1 #>     count #>     <int> #> 1 4504419"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_identifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for taxa with taxonomic identifiers — search_identifiers","title":"Search for taxa with taxonomic identifiers — search_identifiers","text":"ALA, records associated identifier uniquely identifies taxon record belongs. identifiers known, function allows use look information taxon question. Effectively inverse function search_taxa(), takes names provides identifiers. resulting data.frame taxonomic information can also passed directly atlas_ functions filter records specified taxon taxa.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_identifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for taxa with taxonomic identifiers — search_identifiers","text":"","code":"search_identifiers(identifier)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_identifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for taxa with taxonomic identifiers — search_identifiers","text":"identifier string: vector containing one taxonomic identifiers, given strings.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_identifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for taxa with taxonomic identifiers — search_identifiers","text":"object class tbl_df, data.frame (aka tibble) ala_idcontaining taxonomic information.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_identifiers.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for taxa with taxonomic identifiers — search_identifiers","text":"Look unique taxon identifier","code":"search_identifiers(identifier = \"https://id.biodiversity.org.au/node/apni/2914510\") #> # A tibble: 1 x 13 #>   scientific_name scientific_name~ taxon_concept_id rank  match_type kingdom phylum class order family genus species issues #>   <chr>           <chr>            <chr>            <chr> <chr>      <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr>   <chr>  #> 1 Eucalyptus bla~ Maiden           https://id.biod~ spec~ taxonIdMa~ Plantae Charo~ Equi~ Myrt~ Myrta~ Euca~ Eucaly~ noIss~"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_profile_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for which quality filters are applied by a data quality profile — search_profile_attributes","title":"Search for which quality filters are applied by a data quality profile — search_profile_attributes","text":"data quality profile made series filters. users may wish simply trust default filters, often useful check information return, particularly advanced customization needed. function gives arguments built specific profile.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_profile_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for which quality filters are applied by a data quality profile — search_profile_attributes","text":"","code":"search_profile_attributes(profile)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_profile_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for which quality filters are applied by a data quality profile — search_profile_attributes","text":"profile string: data quality profile name, short name id. See show_all_profiles() valid filters","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_profile_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for which quality filters are applied by a data quality profile — search_profile_attributes","text":"data.frame profile attributes, consisting free text description actual filter used.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_profile_attributes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for which quality filters are applied by a data quality profile — search_profile_attributes","text":"find data quality arguments used profile \"CSDM\"  get free-text description filter used \"CSDM\" profile","code":"search_profile_attributes(\"CSDM\") #> # A tibble: 4 x 2 #>   description                                                               filter                        #>   <chr>                                                                     <chr>                         #> 1 \"Include only records where Spatial validity is \\\"true\\\"\"                 \"spatiallyValid:\\\"true\\\"\"     #> 2 \"Exclude potential duplicate records\"                                     \"-isDuplicateOf:*\"            #> 3 \"Exclude all records that are an outlier against any environmental layer\" \"-outlierLayerCount:[1 TO *]\" #> 4 \"Include only records where Year is 1970 to 2099\"                         \"year:[1970 TO *]\" profile_info <- search_profile_attributes(\"CSDM\") profile_info$description #> [1] \"Include only records where Spatial validity is \\\"true\\\"\"                 #> [2] \"Exclude potential duplicate records\"                                     #> [3] \"Exclude all records that are an outlier against any environmental layer\" #> [4] \"Include only records where Year is 1970 to 2099\""},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxon information — search_taxa","title":"Taxon information — search_taxa","text":"ALA, records associated identifier uniquely identifies taxon record belongs. However, taxonomic names often ambiguous due homonymy; .e. re-use names (common scientific) different clades. Hence, search_taxa provides means search taxonomic names check results 'correct' proceeding download data via atlas_occurrences(), atlas_species() atlas_counts(). resulting data.frame taxonomic information can passed galah_identify() provide identify argument atlas_ functions, filters resulting records specified taxon taxa.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxon information — search_taxa","text":"","code":"search_taxa(...)"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxon information — search_taxa","text":"... : One scientific names, separated commas given strings. greater control required disambiguate search terms, taxonomic levels can provided explicitly via data.frame (see examples). Note searches case-sensitive.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxon information — search_taxa","text":"object class tbl_df, data.frame (aka tibble) ala_idcontaining taxonomic information.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/search_taxa.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxon information — search_taxa","text":"Search using single term  Note search_taxa() case sensitive  Search multiple taxa. search_taxa() return one row per taxon  galah_identify() uses search_taxa() narrow data queries","code":"search_taxa(\"Reptilia\") #> # A tibble: 1 x 9 #>   search_term scientific_name taxon_concept_id                              rank  match_type kingdom  phylum  class  issues #>   <chr>       <chr>           <chr>                                         <chr> <chr>      <chr>    <chr>   <chr>  <chr>  #> 1 Reptilia    REPTILIA        urn:lsid:biodiversity.org.au:afd.taxon:682e1~ class exactMatch Animalia Chorda~ Repti~ noIss~ search_taxa(\"reptilia\") # not case sensitive #> # A tibble: 1 x 9 #>   search_term scientific_name taxon_concept_id                              rank  match_type kingdom  phylum  class  issues #>   <chr>       <chr>           <chr>                                         <chr> <chr>      <chr>    <chr>   <chr>  <chr>  #> 1 reptilia    REPTILIA        urn:lsid:biodiversity.org.au:afd.taxon:682e1~ class exactMatch Animalia Chorda~ Repti~ noIss~ search_taxa(c(\"reptilia\", \"mammalia\")) #> # A tibble: 2 x 10 #>   search_term scientific_name taxon_concept_id                rank  match_type kingdom  phylum class issues vernacular_name #>   <chr>       <chr>           <chr>                           <chr> <chr>      <chr>    <chr>  <chr> <chr>  <chr>           #> 1 reptilia    REPTILIA        urn:lsid:biodiversity.org.au:a~ class exactMatch Animalia Chord~ Rept~ noIss~ <NA>            #> 2 mammalia    MAMMALIA        urn:lsid:biodiversity.org.au:a~ class exactMatch Animalia Chord~ Mamm~ noIss~ Mammals galah_call() |>   galah_identify(\"reptilia\") |>   atlas_counts() #> # A tibble: 1 x 1 #>     count #>     <int> #> 1 1317131"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_atlases.html","id":null,"dir":"Reference","previous_headings":"","what":"List supported Living Atlases — show_all_atlases","title":"List supported Living Atlases — show_all_atlases","text":"galah supports downloading data number International Living Atlases. Use function get list currently supported atlases.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_atlases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List supported Living Atlases — show_all_atlases","text":"","code":"show_all_atlases()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_atlases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List supported Living Atlases — show_all_atlases","text":"object class tbl_df data.frame (aka tibble) Living Atlas information, including taxonomy source information atlas.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_atlases.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List supported Living Atlases — show_all_atlases","text":"See supported atlases","code":"show_all_atlases() #> # A tibble: 6 x 3 #>   atlas     taxonomy_source taxonomy_info                                                     #>   <chr>     <chr>           <chr>                                                             #> 1 Australia ALA             https://bie.ala.org.au/                                           #> 2 Austria   GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c #> 3 Guatemala GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c #> 4 Spain     GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c #> 5 Sweden    GBIF            https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c #> 6 UK        NBN             https://www.nhm.ac.uk/our-science/data/uk-species.html"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_cached_files.html","id":null,"dir":"Reference","previous_headings":"","what":"List previously cached files — show_all_cached_files","title":"List previously cached files — show_all_cached_files","text":"using caching setting galah_config(caching = TRUE), show list previously cached files. function acheives using query metadata stored metadata.rds cache directory","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_cached_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List previously cached files — show_all_cached_files","text":"","code":"show_all_cached_files()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_cached_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List previously cached files — show_all_cached_files","text":"list available cached files, function used create , filter object","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_cached_files.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List previously cached files — show_all_cached_files","text":"Configure caching create query cache galah_config()  Show listing previously cached files","code":"galah_config(caching = TRUE) dat <- atlas_counts(group_by = galah_group_by(year)) show_all_cached_files()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Query layers, fields or assertions by free text search — search_fields","title":"Query layers, fields or assertions by free text search — search_fields","text":"function can used find relevant fields /layers use building set filters galah_filter() specifying required columns galah_select(). function returns data.frame fields matching type specified. Field names Darwin Core format, except case field specific ALA database, case ALA field name returned.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query layers, fields or assertions by free text search — search_fields","text":"","code":"search_fields(   query,   type = c(\"all\", \"fields\", \"layers\", \"assertions\", \"media\", \"other\") )  show_all_fields(   type = c(\"all\", \"fields\", \"layers\", \"assertions\", \"media\", \"other\") )"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query layers, fields or assertions by free text search — search_fields","text":"query string: search string. case sensitive. type string: type parameters searched? one fields, layers, assertions, media .","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query layers, fields or assertions by free text search — search_fields","text":"query missing, empty data.frame; otherwise object class tbl_df data.frame (aka tibble) containing fields match search query. object class tbl_df data.frame (aka tibble) three columns: id: identifier layer field. value used referring field another function. description: Detailed information given field type: Whether field field layer link: layers, link source data (available)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query layers, fields or assertions by free text search — search_fields","text":"Layers subset fields spatially appended record ALA. Layer ids comprised prefix: 'el' environmental (gridded) layers 'cl' contextual (polygon) layers,  followed id number.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_fields.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query layers, fields or assertions by free text search — search_fields","text":"Search fields use include word \"date\"  Search fields string \"basisofrecord\"  Search fields information \"marine\"  Search Wordclim layers  See listing valid fields layers  Use function search_fields() find fields layers wish use filter data queries","code":"search_fields(\"date\") #> # A tibble: 33 x 4 #>   id             description     type   link  #>   <chr>          <chr>           <chr>  <chr> #> 1 dateIdentified Date Identified fields <NA>  #> 2 datePrecision  Date precision  fields <NA>  #> 3 eventDate      Event Date      fields <NA>  #> 4 eventDateEnd   <NA>            fields <NA>  #> # ... with 29 more rows search_fields(\"basisofrecord\") #> # A tibble: 2 x 4 #>   id                description               type   link  #>   <chr>             <chr>                     <chr>  <chr> #> 1 basisOfRecord     Record type               fields <NA>  #> 2 raw_basisOfRecord Record type (unprocessed) fields <NA> search_fields(\"marine\") |>    head() # only show first 5 results #> # A tibble: 6 x 4 #>   id      description                                             type   link                                               #>   <chr>   <chr>                                                   <chr>  <chr>                                              #> 1 cl2105  \"FAO Fishery Statistical Areas FAO Fishing areas (Mari~ layers \"http://www.fao.org/geonetwork/srv/en/main.home?u~ #> 2 cl10948 \"CAPAD 2018 Terrestrial The Collaborative Australian P~ layers \"http://www.environment.gov.au/fed/catalog/search~ #> 3 cl10957 \"CAPAD 2018 Marine The Collaborative Australian Protec~ layers \"http://www.environment.gov.au/fed/catalog/search~ #> 4 el1056  \"Endemism (Non-marine) Endemism (Non-marine) based on ~ layers \"\"                                                 #> 5 el957   \"Averaged Topographic Relief  This data represents the~ layers \"http://www.ga.gov.au/meta/ANZCW0703015076.html\"   #> 6 cl11033 \"CAPAD 2020 Terrestrial The Collaborative Australian P~ layers \"http://www.environment.gov.au/fed/catalog/search~ search_fields(\"worldclim\", type = \"layers\") #> # A tibble: 38 x 4 #>   id      description                                                                     type   link                       #>   <chr>   <chr>                                                                           <chr>  <chr>                      #> 1 el10982 WorldClim 2.1: Temperature - warmest month max Max Temperature of Warmest Month layers https://www.worldclim.org~ #> 2 el10981 WorldClim 2.1: Temperature - seasonality Temperature Seasonality                layers https://www.worldclim.org~ #> 3 el10980 WorldClim 2.1: Temperature - isothermality Isothermality                        layers https://www.worldclim.org~ #> 4 el10990 WorldClim 2.1: Precipitation - wettest month Precipitation of Wettest Month     layers https://www.worldclim.org~ #> # ... with 34 more rows show_all_fields() #> # A tibble: 790 x 4 #>   id                  description        type   link  #>   <chr>               <chr>              <chr>  <chr> #> 1 acceptedNameUsage   Accepted name      fields <NA>  #> 2 acceptedNameUsageID Accepted name      fields <NA>  #> 3 accessRights        Access rights      fields <NA>  #> 4 assertionUserId     Assertions by user fields <NA>  #> # ... with 786 more rows"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_fields.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Query layers, fields or assertions by free text search — search_fields","text":"Darwin Core terms https://dwc.tdwg.org/terms/ ALA fields https://api.ala.org.au/#ws72 ALA assertions fields https://api.ala.org.au/#ws81","code":""},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"List data quality profiles — show_all_profiles","title":"List data quality profiles — show_all_profiles","text":"ALA provides number pre-built data quality profiles filtering data according quality checks. data quality profile can specified profile argument galah_filter() used filter searches atlas_occurrences(), atlas_counts() atlas_species().","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List data quality profiles — show_all_profiles","text":"","code":"show_all_profiles()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List data quality profiles — show_all_profiles","text":"object class tbl_df data.frame (aka tibble) available profiles","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_profiles.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List data quality profiles — show_all_profiles","text":"Show list available data quality profiles  Values shortName column can used galah_filter() narrow data query results","code":"show_all_profiles() #> # A tibble: 7 x 4 #>      id name                                                  shortName        description                                  #>   <int> <chr>                                                 <chr>            <chr>                                        #> 1     2 ALA General (pre-pipelines)                           ALA-legacy       \"The default ALA profile filters out record~ #> 2    35 Species Distribution Modelling (CSDM) (pre-pipelines) CSDM-legacy      \"Base filters for the Collaborative Species~ #> 3    44 Data licensed for all uses (pre-pipelines)            re-usable-legacy \"Data licensed for re-use, including commer~ #> 4    92 ALA General                                           ALA              \"The default ALA profile filters out record~ #> 5   124 Species Distribution Modelling (CSDM)                 CSDM             \"Base filters for the Collaborative Species~ #> 6   133 Data licensed for all uses                            re-usable        \"Data licensed for re-use, including commer~ #> 7   224 AVH                                                   AVH              \"AVH data quality profile\" galah_filter(profile == \"ALA\") #> Warning: Invalid field(s) detected. #> i See a listing of all valid fields with `show_all_fields()`. #> i Search for the valid name of a desired field with `search_fields()`. #> x Invalid field(s): profile. #> # A tibble: 1 x 4 #>   variable logical value query               #>   <chr>    <chr>   <chr> <chr>               #> 1 profile  ==      ALA   \"(profile:\\\"ALA\\\")\""},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find valid taxonomic ranks — show_all_ranks","title":"Find valid taxonomic ranks — show_all_ranks","text":"Return taxonomic ranks recognised ALA.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find valid taxonomic ranks — show_all_ranks","text":"","code":"show_all_ranks()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find valid taxonomic ranks — show_all_ranks","text":"object class tbl_df data.frame (aka tibble) available ranks","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_ranks.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find valid taxonomic ranks — show_all_ranks","text":"Show listing taxonomic ranks  Use ranks galah_down_to() atlas_taxonomy() get taxonomic trees","code":"show_all_ranks() #> # A tibble: 69 x 2 #>      id name         #>   <int> <chr>        #> 1     1 root         #> 2     2 superkingdom #> 3     3 kingdom      #> 4     4 subkingdom   #> # ... with 65 more rows galah_call() %>%   galah_identify(\"fungi\") %>%   galah_down_to(subphylum) %>%   atlas_taxonomy() #>                        levelName #> 1  Fungi                         #> 2   ¦--Ascomycota                #> 3   ¦   ¦--Pezizomycotina        #> 4   ¦   ¦--Saccharomycotina      #> 5   ¦   °--Taphrinomycotina      #> 6   ¦--Basidiomycota             #> 7   ¦   ¦--Agaricomycotina       #> 8   ¦   ¦--Pucciniomycotina      #> 9   ¦   ¦--Ustilaginomycotina    #> 10  ¦   °--Wallemiomycotina      #> 11  ¦--Mucoromycota              #> 12  ¦   °--Glomeromycotina       #> 13  °--Zygomycota                #> 14      ¦--Entomophthoromycotina #> 15      ¦--Kickxellomycotina     #> 16      ¦--Mortierellomycotina   #> 17      ¦--Mucoromycotina        #> 18      °--Zoopagomycotina"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_reasons.html","id":null,"dir":"Reference","previous_headings":"","what":"List valid download reasons — show_all_reasons","title":"List valid download reasons — show_all_reasons","text":"downloading occurrence data atlas_occurrences() ALA APIs require reason download specified. default, download reason 'scientific research' set , wish change can galah_config(). Use function view list download reason code names. specifying reason, can use either download code name.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_reasons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List valid download reasons — show_all_reasons","text":"","code":"show_all_reasons()"},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_reasons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List valid download reasons — show_all_reasons","text":"object class tbl_df data.frame (aka tibble) valid download reasons, containing id name reason.","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/reference/show_all_reasons.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List valid download reasons — show_all_reasons","text":"Show listing accepted reasons downloading occurrence data  Add download reason configuring session galah_config()","code":"show_all_reasons() #> # A tibble: 13 x 2 #>       id name                             #>    <int> <chr>                            #>  1     0 conservation management/planning #>  2     1 biosecurity management/planning  #>  3     2 environmental assessment         #>  4     3 education                        #>  5     4 scientific research              #>  6     5 collection management            #>  7     6 other                            #>  8     7 ecological research              #>  9     8 systematic research/taxonomy     #> 10    10 testing                          #> 11    11 citizen science                  #> 12    12 restoration/remediation          #> 13    13 species modelling galah_config(download_reason_id = 3)"},{"path":[]},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah-140","dir":"Changelog","previous_headings":"","what":"galah 1.4.0","title":"galah 1.4.0","text":"CRAN release: 2022-01-24","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"revamped-syntax-1-4-0","dir":"Changelog","previous_headings":"","what":"Revamped syntax","title":"galah 1.4.0","text":"ala_ functions renamed use prefix atlas_. change reflects functionality international atlases (.e., atlas_occurrences, atlas_counts, atlas_species, atlas_media, atlas_taxonomy, atlas_citation) (#103) select_taxa replaced 3 functions: galah_identify, search_taxa search_identifiers. galah_identify used building data queries, whereas search_taxa search_identifiers now exclusively used search taxonomic information. Syntax changes intended reflect usage expected output (#112, #122) select_ functions renamed use prefix galah_. Specifically, galah_filter, galah_select galah_geolocate replace select_filters, select_columns select_locations. syntax changes reflect move towards consistency dplyr naming functionality (#101, #108) find_ functions provide listing possible values renamed show_all_ (.e., show_all_profiles, show_all_ranks, show_all_atlases, show_all_cached_files, show_all_fields, show_all_reasons). find_ functions require input return specific results renamed search_ (.e., search_field_values, search_profile_attributes) (#112, #113)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah_group_by-1-4-0","dir":"Changelog","previous_headings":"","what":"galah_group_by","title":"galah 1.4.0","text":"Group fields using galah_group_by(), groups summarises record counts based categorical field values, similar dplyr::group_by() (#90, #95)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah_down_to-1-4-0","dir":"Changelog","previous_headings":"","what":"galah_down_to","title":"galah 1.4.0","text":"Select taxonomic level taxonomic tree go galah_down_to() + atlas_taxonomy(), uses tidy evaluation like galah_ functions (#101, #120)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"pipe-queries-using-galah_call-1-4-0","dir":"Changelog","previous_headings":"","what":"Pipe queries using galah_call","title":"galah 1.4.0","text":"Build data queries using piping syntax (.e., |>, %>%) first using galah_call(), narrowing queries galah_ functions finishing queries atlas_ function (#60, #120). S3 methods now implemented functions allow piping (#40)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"minor-improvements-1-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.4.0","text":"Improved error messages using {glue} {rlang} (#117) Revamped syntax functions return output tibbles (#110, #118) Pass vectors galah_filter (#91, #92) Cache valid fields faster field look (#73, #116) New vignettes updated syntax (#104, #105), plus improvements previous vignettes. Updated R Markdown-style documentation added warnings deprecated functions (#113, #121)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"bug-fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.4.0","text":"galah longer returns error ALA system /API fails (#102, #119) search_taxa returns correct IDs search terms parentheses (#96) search_taxa returns best-fit taxonomic result ranks specified data.frame tibble (#115)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah-131","dir":"Changelog","previous_headings":"","what":"galah 1.3.1","title":"galah 1.3.1","text":"CRAN release: 2021-08-21","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"search_taxonomy-renamed-to-ala_taxonomy-1-3-1","dir":"Changelog","previous_headings":"","what":"search_taxonomy() renamed to ala_taxonomy()","title":"galah 1.3.1","text":"bug fix: ala_taxonomy longer fails nodes ranked informal unranked (#86) function now returns tree built using data.tree package change function name required greater consistency data-providing functions galah","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"vignettes-1-3-1","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"galah 1.3.1","text":"vignettes now pre-compiled avoid failing CRAN (#85) expanded vignette navigating taxonomic information (#42)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah-130","dir":"Changelog","previous_headings":"","what":"galah 1.3.0","title":"galah 1.3.0","text":"CRAN release: 2021-08-06","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah_config-1-3-0","dir":"Changelog","previous_headings":"","what":"galah_config()","title":"galah 1.3.0","text":"ala_config() renamed galah_config() improve internal consistency (#68)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"search_taxonomy-1-3-0","dir":"Changelog","previous_headings":"","what":"search_taxonomy()","title":"galah 1.3.0","text":"search_taxonomy() provides means search taxonomic names check results ‘correct’ proceeding download data via ala_occurrences(), ala_species() ala_counts() (e.g., ambiguous homonymous) (#64 #75) search_taxonomy() returns information author authority taxonomic names (#79) search_taxonomy() consistently orders column names, including correct taxonomic order rank (#81)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"caching-helper-functions-1-3-0","dir":"Changelog","previous_headings":"","what":"Caching helper functions","title":"galah 1.3.0","text":"find_cached_files() lists user cached files stored metadata (#57) clear_cached_files() removes previously cached files stored metadata (#71) ala_counts(), ala_occurrences(), ala_media() ala_species() now refresh_cache argument remove previously cached files replace current query (#71)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"minor-improvements-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.3.0","text":"Cache files saved RDS format, making query attributes easier find, including data DOI, search url (#55, #32, #28) ala_media() caches media metadata galah_config(caching = TRUE) search_fields() allows user pass qid argument (#59) Users can now optionally skip filter count validation checks spatial biocache web services setting galah_config(run_checks = FALSE). helps users avoid slowing data request download speeds many requests made quick succession via galah_filter() ala_occurrences() (#61, #80) ala_counts(), select_columns() search_fields() now use match.arg approximate strings fuzzy matching (#66) Better handling cache errors improved error messages (#70)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.3.0","text":"select_columns(group = 'assertions') now sends qa = includeall ALA web service API return assertion columns (#48) ala_occurrences() returns data DOI ala_occurrences(mint_doi = TRUE) re-downloads data called multiple times (#56) ala_occurrences() longer converts field names -CAPS camelCase (#62)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah-120","dir":"Changelog","previous_headings":"","what":"galah 1.2.0","title":"galah 1.2.0","text":"CRAN release: 2021-07-02","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"living-atlases-1-2-0","dir":"Changelog","previous_headings":"","what":"Living Atlases","title":"galah 1.2.0","text":"ala_config() allows users specify international Atlas download data (#21)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"minor-improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.2.0","text":"ala_media() includes file path downloaded media returned metadata (#22) Data returned ala_occurrences() contains search_url used download records; takes user website search page (#32) ala_species() provides helpful error species found (#39) Data quality filters created using specific web service argument, rather constructing filters attributes (#37) select_taxa() optional all_ranks argument return intermediate rank information (#35)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"galah 1.2.0","text":"R > 4.0.0 now required (#43, #45) select_taxa() behaves expected character strings 32 36 characters provided (#23) Caching functionality ala_occurrences() uses columns expected (#30) galah_filter() negates assertion filters required, fixing issue assertion values ignored (#27) select_taxa() longer throws error queries one term differing number columns return value (#41) ala_counts() returns data.frame consistent column classes group_by parameter called multiple times ala_config(caching = TRUE) (#47) ala_ functions fail gracefully non-id character string passed (#49)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah-110","dir":"Changelog","previous_headings":"","what":"galah 1.1.0","title":"galah 1.1.0","text":"CRAN release: 2021-05-05","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"downloading-media-1-1-0","dir":"Changelog","previous_headings":"","what":"Downloading media","title":"galah 1.1.0","text":"ala_media() now takes select_ arguments ala_ functions (#18) Filtering media metadata e.g. licence type possible (#19) search_fields now media type argument option Performance improvement download times (#13) Progress bar displayed downloads verbose == TRUE (#8) media download types supported","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"select_-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"select_ functions","title":"galah 1.1.0","text":"galah_location auto-detects type argument provided takes single argument, query, place sf wkt (#17) select_taxa auto-detects type argument provided takes single argument, query, place term term_type (#16)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"galah 1.1.0","text":"Provide useful error message empty occurrence download (#7) ala_counts uses group_by field name returned data.frame column name (#6) ala_occurrences sends sourceId parameter ALA (#5) search_fields provides helpful error invalid types (#11)","code":""},{"path":"https://atlasoflivingaustralia.github.io/galah/news/index.html","id":"galah-100","dir":"Changelog","previous_headings":"","what":"galah 1.0.0","title":"galah 1.0.0","text":"CRAN release: 2021-04-06 First version galah, built earlier functionality ALA4R package.","code":""}]
