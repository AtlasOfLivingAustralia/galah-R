% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/galah_filter.R
\name{filter.data_request}
\alias{filter.data_request}
\alias{filter.metadata_request}
\alias{filter.files_request}
\alias{galah_filter}
\title{Keep rows that match a condition}
\usage{
\method{filter}{data_request}(.data, ...)

\method{filter}{metadata_request}(.data, ...)

\method{filter}{files_request}(.data, ...)

galah_filter(..., profile = NULL)
}
\arguments{
\item{.data}{An object of class \code{data_request}, \code{metadata_request}
or \code{files_request}, created using \code{\link[=galah_call]{galah_call()}} or related functions.}

\item{...}{Expressions that return a logical value, and are defined in terms
of the variables in the selected atlas (and checked using \code{show_all(fields)}.
If multiple expressions are included, they are combined with the & operator.
Only rows for which all conditions evaluate to \code{TRUE} are kept.}

\item{profile}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
Use \code{galah_apply_profile} instead.}
}
\value{
A tibble containing filter values.
}
\description{
The \code{filter()} function is used to subset a data, retaining all rows that
satisfy your conditions. To be retained, the row must produce a value of
\code{TRUE} for all conditions. Unlike 'local' filters that act on a \code{tibble},
the galah implementations work by amending a query which is then enacted
by \code{collect()} or one of the \code{atlas_} family of functions (such as
\code{atlas_counts()} or \code{atlas_occurrences()}).
}
\details{
\emph{Syntax}

\code{galah_filter} uses non-standard evaluation (NSE),
and is designed to be as compatible as possible with \code{dplyr::filter()}
syntax. Statements take the form of field - logical - value. Permissible
examples include:
\itemize{
\item \code{==} (e.g. \code{year = 2020}) but not \code{=} (for consistency with \code{dplyr})
\item \code{!=}, e.g. \code{year != 2020})
\item \code{>} or \code{>=} (e.g. \code{year >= 2020})
\item \code{<} or \code{<=} (e.g. \code{year <= 2020})
\item \code{OR} statements (e.g. \code{year == 2018 | year == 2020})
\item \code{AND} statements (e.g. \code{year >= 2000 & year <= 2020})
}

Some general tips:
\itemize{
\item Separating statements with a comma is equivalent to an \code{AND} statement;
Ergo \code{filter(year >= 2010 & year < 2020)} is the same as
\verb{_filter(year >= 2010, year < 2020)}.
\item All statements must include the field name; so
\code{filter(year == 2010 | year == 2021)} works, as does
\code{filter(year == c(2010, 2021))}, but \code{filter(year == 2010 | 2021)}
fails.
\item It is possible to use an object to specify required values, e.g.
\verb{year_value <- 2010; filter(year > year_value)}.
\item \code{solr} supports range queries on text as well as numbers; so
\code{filter(cl22 >= "Tasmania")} is valid.
\item It is possible to filter by 'assertions', which are statements about data
validity, such as \verb{filter(assertions != c("INVALID_SCIENTIFIC_NAME", "COORDINATE_INVALID")}.
Valid assertions can be found using \code{show_all(assertions)}.
}

\emph{Exceptions}

When querying occurrences, species, or their respective counts (i.e. all of
the above examples), field names are checked internally against
\code{show_all(fields)}. There are some cases where bespoke field names are
required, as follows.

When requesting a data download from a DOI, the field \code{doi} is valid, i.e.:
\preformatted{galah_call() |> 
  filter(doi = "a-long-doi-string") |> 
  collect()`}

\code{request_metadata() |> filter(taxa == "Chordata") |> unnest()}
\code{rank == "class"} in \code{atlas_taxonomy()} replacement for \code{galah_down_to()}

Users wishing to break down media queries into their respective API calls
should begin with an occurrence query:

\preformatted{occurrences <- galah_call() |> 
   identify("Litoria peronii) |> 
   select(group = c("basic", "media") |> 
   collect()}

They can then use the \code{media} field to request media metadata:
\preformatted{media_metadata <- galah_call("metadata") |>
  filter(media == occurrences) |>
  collect()}

And finally, the metadata tibble can be used to request files:
\preformatted{media_metadata <- galah_call("files") |>
  filter(media == occurrences) |>
  collect()}
}
\examples{
\dontrun{
galah_call() |>
  filter(year >= 2019,
         basisOfRecord == "HumanObservation") |>
  count() |>
  collect()
}
}
\seealso{
\code{\link[=galah_select]{galah_select()}}, \code{\link[=galah_group_by]{galah_group_by()}} and \code{\link[=galah_geolocate]{galah_geolocate()}} for
other ways to amend the information returned by \code{\link[=atlas_occurrences]{atlas_occurrences()}} and
related functions. Use \code{search_all(fields)} to find fields that you can
filter by, and \code{\link[=show_values]{show_values()}} to find what values of those filters are
available.
}
