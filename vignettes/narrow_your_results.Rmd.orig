---
title: "Narrow your results"
author: "Martin Westgate & Dax Kellie"
date: '`r Sys.Date()`'
output: html_document
editor_options: 
  chunk_output_type: inline
vignette: >
  %\VignetteIndexEntry{Narrow your results}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
---

```{r, include = FALSE}
galah_config(atlas = "Australia", verbose = FALSE)
```

Each occurrence record contains taxonomic information and 
information about the observation itself, like its location and the date
of observation. These pieces of information are recorded and categorised into 
respective **fields**. When you import data using `galah`, columns of the 
resulting `tibble` correspond to these fields.

Data fields are important because they provide a means to manipulate queries
to return only the information that you need, and no more. Consequently, much of 
the architecture of `galah` has been designed to make narrowing as simple as possible. 
These functions include:

-   `galah_identify`
-   `galah_filter`
-   `galah_select`
-   `galah_group_by`
-   `galah_geolocate`
-   `galah_down_to`

These names have been chosen to echo comparable functions from `dplyr`; namely
`filter`, `select` and `group_by`. With the exception of `galah_geolocate`, they
also use `dplyr` tidy evaluation and syntax. This means that how you use 
`dplyr` functions is also how you use `galah_` functions.

# galah_identify & search_taxa
Perhaps unsurprisingly, `search_taxa` searches for taxonomic information. 
It uses fuzzy matching to work a lot like the search bar on the 
[Atlas of Living Australia website](https://bie-ws.ala.org.au/), 
and you can use it to search for taxa by their scientific name. Finding your 
desired taxon with `search_taxa` is an important step to using this taxonomic 
information to download  data with `galah`.  
  
For example, to search for reptiles, we first need to identify whether we have 
the correct query:


```{r}
search_taxa("Reptilia")
```

If we want to be more specific by providing additional taxonomic information
to `search_taxa`, you can provide a `data.frame` containing more levels of the
taxonomic hierarchy:
```{r}
search_taxa(data.frame(genus = "Eolophus", kingdom = "Aves"))
```

Once we know that our search matches the correct taxon or taxa, we 
can use `galah_identify` to narrow the results of our queries:
```{r}
galah_call() |>
  galah_identify("Reptilia") |>
  atlas_counts()
```

```{r}
taxa <- search_taxa(data.frame(genus = "Eolophus", kingdom = "Aves"))

galah_call() |>
 galah_identify(taxa) |>
 atlas_counts()
```

If you're using an international atlas, `search_taxa` will automatically 
switch to using the local name-matching service. For example, Spain uses the
GBIF taxonomic backbone, but integrates seamlessly with our standard workflow.

```{r}
galah_config(atlas = "Spain")

galah_call() |> 
  galah_identify("Lepus") |> 
  galah_group_by(species) |> 
  atlas_counts()
```

Conversely, the UK's [National Biodiversity Network](https://nbn.org.uk) (NBN), 
has its' own taxonomic backbone, but is supported using the same function call.

```{r}
galah_config(atlas = "United Kingdom")

galah_call() |> 
  galah_identify("Bufo") |> 
  galah_group_by(species) |> 
  atlas_counts()
```

```{r, echo = FALSE}
galah_config(atlas = "Australia")
```

# galah_filter
Perhaps the most important function in `galah` is `galah_filter`, which is used
to filter the rows of queries:

```{r}
# Get total record count since 2000
galah_call() |>
  galah_filter(year > 2000) |>
  atlas_counts()


# Get total record count for iNaturalist in 2021
galah_call() |>
  galah_filter(
    year > 2000,
    dataResourceName == "iNaturalist Australia"
  ) |>
  atlas_counts()
```

To find available fields and corresponding valid values, use the field lookup 
functions `show_all(fields)`, `search_all(fields)` & `show_values()`.  

Finally, a special case of `galah_filter` is to make more complex taxonomic
queries than are possible using `search_taxa`. By using the `taxonConceptID` 
field, it is possible to build queries that exclude certain taxa, for example.
This can be useful for paraphyletic concepts such as invertebrates:

```{r invert-filter}
galah_call() |>
  galah_filter(
     taxonConceptID == search_taxa("Animalia")$taxon_concept_id,
     taxonConceptID != search_taxa("Chordata")$taxon_concept_id
  ) |>
  galah_group_by(class) |>
  atlas_counts()
```

# galah_apply_profile
When working with the ALA, a notable feature is the ability to specify a `profile` to 
remove records that are suspect in some way.

```{r}
galah_call() |>
  galah_filter(year > 2000) |>
  galah_apply_profile(ALA) |>
  atlas_counts()
```

To see a full list of data quality profiles, use `show_all(profiles)`.

# galah_group_by
Use `galah_group_by` to group record counts and summarise counts by specified fields:

```{r}
# Get record counts since 2010, grouped by year and basis of record
galah_call() |>
  galah_filter(year > 2015 & year <= 2020) |>
  galah_group_by(year, basisOfRecord) |>
  atlas_counts()
```

# galah_select
Use `galah_select` to choose which columns are returned when downloading records:

```{r include = FALSE}
galah_config(email = "ala4r@ala.org.au",
             atlas = "Australia", 
             caching = FALSE, 
             verbose = FALSE)
```

```{r}
# Get *Reptilia* records from 1930, but only 'eventDate' and 'kingdom' columns
occurrences <- galah_call() |>
  galah_identify("reptilia") |>
  galah_filter(year == 1930) |>
  galah_select(eventDate, kingdom) |>
  atlas_occurrences()

occurrences
```

You can also use other `dplyr` functions that work with `dplyr::select()` with 
`galah_select()`

```{r}
occurrences <- galah_call() |>
  galah_identify("reptilia") |>
  galah_filter(year == 1930) |>
  galah_select(starts_with("elev") & ends_with("n")) |>
  atlas_occurrences()

occurrences
```

# galah_geolocate
Use `galah_geolocate` to specify a geographic area or region to limit your search:

```{r}
# Get list of perameles species only in area specified:
# (Note: This can also be specified by a shapefile)
wkt <- "POLYGON((131.36328125 -22.506468769126,135.23046875 -23.396716654542,134.17578125 -27.287832521411,127.40820312499 -26.661206402316,128.111328125 -21.037340349154,131.36328125 -22.506468769126))"

galah_call() |>
  galah_identify("perameles") |>
  galah_geolocate(wkt) |>
  atlas_species()
```

# galah_down_to
Use `galah_down_to` to specify the lowest taxonomic level to contruct a taxonomic 
tree:

```{r}
galah_call() |>
  galah_identify("fungi") |>
  galah_down_to(phylum) |>
  atlas_taxonomy()
  
```
