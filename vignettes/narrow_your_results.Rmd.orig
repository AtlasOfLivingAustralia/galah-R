---
title: "Narrow your results"
author: "Martin Westgate & Dax Kellie"
date: '`r Sys.Date()`'
output: html_document
editor_options: 
  chunk_output_type: inline
vignette: >
  %\VignetteIndexEntry{Narrow your results}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
---

```{r, include = FALSE}
galah_config(atlas = "Australia", verbose = FALSE)
```

Each occurrence record contains taxonomic information and 
information about the observation itself, like its location and the date
of observation. These pieces of information are recorded and categorised into 
respective **fields**. When you import data using galah, columns of the 
resulting `tibble` correspond to these fields.

Data fields are important because they provide a means to narrow and refine 
queries to return only the information that you need, and no more. Consequently, 
much of the architecture of galah has been designed to make narrowing as simple 
as possible. For legacy reasons, there are both `dplyr`-style verbs and galah-
specific versions of these functions; but they are largely synonymous. They 
include:

-   `identify()` or `galah_identify()`
-   `filter()` or `galah_filter()`
-   `select()` or `galah_select()`
-   `group_by()` or `galah_group_by()`
-   `geolocate()` or `galah_geolocate()`

Below we discuss each of these functions in turn.

# `search_taxa` & `identify`
Perhaps unsurprisingly, `search_taxa()` searches for taxonomic information. 
`search_taxa()` uses fuzzy-matching to work a lot like the search bar on the 
[Atlas of Living Australia website](https://www.ala.org.au/), 
and you can use it to search for taxa by their scientific name. 

Finding your desired taxon with `search_taxa()` is an important step to using 
this taxonomic information to download data. For example, to search for
reptiles, we first need to identify whether we have the correct query:

```{r}
search_taxa("Reptilia")
```

If we want to be more specific, we can provide a `tibble` (or `data.frame`) 
providing additional taxonomic information.

```{r}
search_taxa(tibble(genus = "Eolophus", kingdom = "Aves"))
```

Once we know that our search matches the correct taxon or taxa, we 
can use `identify()` to narrow the results of our query.
```{r}
galah_call() |>
  identify("Reptilia") |>
  atlas_counts()
```

If you're using an international atlas, `search_taxa()` will automatically 
switch to using the local name-matching service. For example, Portugal uses the
GBIF taxonomic backbone, but integrates seamlessly with our standard workflow.

```{r}
galah_config(atlas = "Portugal")

galah_call() |> 
  identify("Lepus") |> 
  group_by(species) |> 
  atlas_counts()
```

Conversely, the UK's [National Biodiversity Network](https://nbn.org.uk) (NBN), 
has its own taxonomic backbone, but is supported using the same function call.

```{r}
galah_config(atlas = "United Kingdom")

galah_call() |> 
  filter(genus == "Bufo") |> 
  group_by(species) |> 
  atlas_counts()
```

# filter
Perhaps the most important function in galah is `filter()`, which is used
to filter the rows of queries.

```{r}
galah_config(atlas = "Australia")

# Get total record count since 2000
galah_call() |>
  filter(year > 2000) |>
  atlas_counts()


# Get total record count for iNaturalist in 2021
galah_call() |>
  filter(
    year > 2000,
    dataResourceName == "iNaturalist Australia") |>
  atlas_counts()
```

To find available fields and corresponding valid values, use the field lookup 
functions `show_all(fields)`, `search_all(fields)` & `show_values()`.  

`galah_filter()` can also be used to make more complex taxonomic
queries than are possible using `search_taxa()`. By using the `taxonConceptID` 
field, it is possible to build queries that exclude certain taxa, for example.
This can be useful to filter for paraphyletic concepts such as invertebrates.

```{r invert-filter}
galah_call() |>
  filter(
     taxonConceptID == search_taxa("Animalia")$taxon_concept_id,
     taxonConceptID != search_taxa("Chordata")$taxon_concept_id
  ) |>
  group_by(class) |>
  atlas_counts()
```

In addition to single filters, some atlases (currently Australia, Sweden & 
Spain) also support 'data profiles'. These are effectively pre-formed sets of 
filters that are designed to remove records that are suspect in some way. This
feature has its' own function, `apply_profile()`:

```{r}
galah_call() |>
  filter(year > 2000) |>
  apply_profile(ALA) |>
  atlas_counts()
```

To see a full list of data profiles, use `show_all(profiles)`.

# group_by
Use `group_by()` to group and summarise record counts by specified fields.

```{r}
# Get record counts since 2010, grouped by year and basis of record
galah_call() |>
  filter(year > 2015 & year <= 2020) |>
  group_by(year, basisOfRecord) |>
  atlas_counts()
```

# select
Use `select()` to choose which columns are returned when downloading records.

```{r include = FALSE}
galah_config(email = "ala4r@ala.org.au",
             atlas = "Australia", 
             caching = FALSE, 
             verbose = FALSE)
galah_config(download_reason_id = "testing") 
# fixme: bug preventing this section executing in a single call
# `download_reason_id = testing` is only valid _after_ atlas has been reset
```

```{r}
Return columns 'kingdom', 'eventDate' & `species` only
occurrences <- galah_call() |>
  identify("reptilia") |>
  filter(year == 1930) |>
  select(kingdom, species, eventDate) |>
  atlas_occurrences()

occurrences |> head()
```

You can also use other `{dplyr}` functions that work *within* `dplyr::select()`.

```{r}
occurrences <- galah_call() |>
  identify("reptilia") |>
  filter(year == 1930) |>
  select(starts_with("accepted") | ends_with("record")) |>
  atlas_occurrences()

occurrences |> head()
```

# geolocate
Use `geolocate()` to specify a geographic area or region to limit your search.

```{r}
# Get list of perameles species in area specified:
# (Note: This can also be specified by a shapefile)
wkt <- "POLYGON((131.36328125 -22.506468769126,135.23046875 -23.396716654542,134.17578125 -27.287832521411,127.40820312499 -26.661206402316,128.111328125 -21.037340349154,131.36328125 -22.506468769126))"

galah_call() |>
  identify("perameles") |>
  geolocate(wkt) |>
  atlas_species()
```

`geolocate()` also accepts shapefiles. More complex shapefiles may need to 
be simplified first (e.g., using [`rmapshaper::ms_simplify()`](https://andyteucher.ca/rmapshaper/reference/ms_simplify.html))