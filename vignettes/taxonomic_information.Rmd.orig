---
title: "Taxonomic information"
author: "Matilda Stevenson"
date: '`r Sys.Date()`'
output:
  rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Taxonomic information}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  fig.width = 7, fig.height = 4, dpi = 300,
  fig.path = "vignettes/taxonomic_information-"
)
```

`galah` provides multiple ways of retrieving taxonomic information, and the best
method depends of the type of information required. Below, some use cases are
outlined. 

## Searching for a single species or clade

The simplest way to get taxonomic information is to use `select_taxa`. This function
takes one or more scientific names and checks them against the ALA's taxonomy 
service.
```{r load-galah}
library(galah)
select_taxa("Mammalia")
```

By default, this function shows the search term, the match (if any) within the ALA,
and some information on higher taxonomy of that clade. Critically, it also
returns a unique identifier for that clade, stored in the column 
`taxon_concept_id`. This identifer is the information that the ALA needs to 
return data that is specific to the taxon in question, i.e.:
```{r count-mammals}
ala_counts(taxa = select_taxa("Mammalia"))
```

`select_taxa` can accept a vector or a `data.frame` of taxonomic names,
and always returns a `data.frame` with the same number of rows as there are 
names to query. 

One final, useful feature of `select_taxa` is that it works in reverse. That is,
if you have a unique identifier and would like to know which taxon it refers to,
you can find that out by setting `is_id` to `TRUE`:

```{r select-taxa, eval = FALSE}
select_taxa("urn:lsid:biodiversity.org.au:afd.taxon:97764bed-9492-4066-a45f-e5b0c6c4280d", is_id = TRUE)
```

## Searching for taxonomic information

If you do not need the taxonomic identifier for a clade, but only want to know
what higher taxa it is nested within, then you can use the `search_taxonomy` 
function. 


```{r search}
search_taxonomy("Mammalia")
```

This function is particularly useful for moving down the taxonomic tree; i.e.
to identify which clades are nested within the supplied taxon. For example, we 
can build and visualise all the families in class **Mammalia** as follows:
```{r search-downto}
taxa <- search_taxonomy("Mammalia", down_to = "family")
```
```{r collapsible-tree, eval = FALSE}
library(collapsibleTree)
collapsibleTree(
  taxa,
  hierarchy = names(taxa)[-which(
    names(taxa) %in% 
    c("kingdom", "phylum", "class", "authority"))],
  root = "Mammalia",
  collapsed = FALSE,
  width = 700,
  height = 400
  )
```
<!-- A static image of the plot to avoid CRAN phantomjs() conflicts -->
![plot of chunk collapsible-tree](vignettes/taxonomic_information-collapsible-tree-1.png)


Note that if you are traversing more than 3 ranks, it might be more efficient
to use `ala_species`, as `search_taxonomy` is inefficient when the search tree
is large.

In combination with `select_taxa`, `search_taxonomy` can be especially powerful.
For example, we can pass the result of our earlier search to `select_taxa`,
and then use the resulting identifiers to get the number of records available for 
each mammalian family:

```{r treemap, message = FALSE, warning = FALSE}
taxa_ids <- select_taxa(taxa)
family_counts <- ala_counts(taxa = taxa_ids, group_by = "family")
taxa <- merge(taxa, family_counts)

library(treemapify)
library(ggplot2)
library(magrittr)
library(viridis)

taxa %>% 
  ggplot(aes(area = count, fill = order, subgroup = order, label = family)) + 
  geom_treemap() + 
  geom_treemap_subgroup_border() + 
  geom_treemap_text(colour = "white", place = "topleft", reflow = T, alpha = 0.6) +
  geom_treemap_subgroup_text(place = "centre") + 
  scale_fill_viridis_d(begin = .4, option = "B") +
  theme(legend.position = "none")
```


## Search for species that match user criteria
A common use case for atlas data is to identify the list of species that 
occur within a clade, in a particular location, or according to
some other criterion. This is provided by the `ala_species` function.

```{r ala-species}
ala_species(
  taxa = select_taxa("Heleioporus"))
```
`ala_species` is similar to `select_taxa`, in that it returns taxonomic information
and unique identifiers in a `data.frame`. It differs in not being able to return 
information on taxonomic levels other than the species; and in being more flexible 
in supporting filtering based on other critera, e.g.:

```{r filter-ala-species}
ala_species(
  taxa = select_taxa("Heleioporus"),
  filters = select_filters(
    stateProvince = "New South Wales", 
    year > 2010))

```

# Advanced queries
Although we have focussed above on functions that are built to integrate
taxonomic concepts, the more general `select_filters` can be used to 
build more flexible queries using the `taxonConceptID` field.
This can be useful for paraphyletic concepts such as invertebrates:

```{r invert-filter}
invertebrate_filter <- select_filters(
   taxonConceptID = select_taxa("Animalia")$taxon_concept_id,
   taxonConceptID != select_taxa("Chordata")$taxon_concept_id)
head(ala_counts(filters = invertebrate_filter, group_by = "class"))
```
