---
title: "Object-Oriented Programming in galah"
author: "Martin Westgate, Dax Kellie"
date: '`r Sys.Date()`'
output:
  rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Object-Oriented Programming in galah}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
```{r include = FALSE}
galah_config(email = "ala4r@ala.org.au",
             atlas = "Australia", 
             caching = FALSE, 
             verbose = FALSE)
```

From version 2.0 onwards, galah is built around object-oriented programming 
principles. In practice, this won't change the experience for most users. 
However, it does enable new ways of programming that were not previously 
available. 

## Masked functions

From version 2.0, `galah_call()` creates an object with a unique class specific 
to galah. For example, the building blocks of a query (prior to specifying what 
data should be returned) create an object of class `data_request`, a default 
object class used in galah for query building. 

```{r}
class(
  galah_call() |>
  galah_filter(genus == "Crinia")
  )
```

When an object is of class `data_request`, galah can trigger functions to use 
specific methods for this object class, even if a function name is used by 
another package. For example, users can use `filter()` and `group_by()` functions 
from [dplyr](https://dplyr.tidyverse.org/index.html) instead 
of `galah_filter()` and `galah_group_by()` to construct a query. The following 
queries are synonymous:

```{r, eval = FALSE}
galah_call() |>
  galah_filter(genus == "Crinia", year == 2020) |>
  galah_group_by(species) |>
  atlas_counts()
```
```{r}
galah_call() |> 
  filter(genus == "Crinia", year == 2020) |>
  group_by(species) |>
  atlas_counts()
```

Thanks to object-oriented programming, galah "masks" `filter()` and `group_by()` 
functions to use methods defined for `data_request` objects instead.

The full list of masked functions is: 

- `arrange()` (`{dplyr}`)
- `count()` (`{dplyr}`)
- `identify()` (`{graphics}`) as a synonym for `galah_identify()`
- `select()` (`{dplyr}`) as a synonym for `galah_select()`
- `group_by()` (`{dplyr}`) as a synonym for `galah_group_by()`
- `slice_head()` (`{dplyr}`) as a synonym for the `limit` argument in `atlas_counts()`
- `st_crop()` (`{sf}`) as a synonym for `galah_polygon()`

Note that these functions are all evaluated lazily; they amend the underlying 
object, but do not amend the nature of the data until the call is evaluated.

To actually build and run the query, however, we'll need to use one or more of a 
different set of dplyr verbs: `collapse()`, `compute()` and `collect()`. These are 
discussed in the following section.

## Advanced query building

The usual way to begin a query to request data in galah is using `galah_call()`. 
From version 2.0, to make galah more flexible and modular, the underlying 
architecture of `galah_call()` has been divided into several types of `request_` 
functions. You can begin your pipe with one of these dedicated `request_`
functions (rather than `galah_call()`) depending on the type of data you 
want to collect. 

For example, if you want to download occurrences, use `request_data()`:

```{r}
x <- request_data("occurrences") |>
  filter(genus == "Crinia", year == 2020) |>
  group_by(species) |>
  collect()
```

You'll notice that this query differs slightly from the typical query structure 
users of galah are familiar with. The desired data type, `"occurrences"`, 
is specified at the beginning of the query within `request_data()` rather than 
at the end using `atlas_occurrences()`. 
Specifying the data type at the start allows users to make use of advanced 
query building using three newly implemented stages of query building: `collapse()`, 
`compute()` and `collect()`.

In version 2.0, galah has been revamped to build, send and retrieve queries using 
three distinct stages. These stages mirror existing [functions in dplyr for querying 
databases](https://dplyr.tidyverse.org/reference/compute.html). Underlying all 
queries, there are three functions to process a user's query:

- `collapse()` converts the object to a query. This allows users to inspect their  
   API calls before they are sent
- `compute()` sends queries to any required APIs. This includes sending a query 
   for data, determining whether field names are valid or how much pagination 
   is needed
- `collect()` returns a `tibble()` with the requested data

We can use these in sequence, or just leap ahead to the stage we want:

```{r}
x <- request_data("occurrences-count") |>
  filter(genus == "Crinia", year == 2020) |>
  group_by(species)

collapse(x)
compute(x)
collect(x)
```

The benefit of using `collapse()`, `compute()` and `collect()` is that queries 
are more modular. This modularity allows users to submit a query and download it later,
without having to wait for it to finish. 

This ability is particularly useful for large data requests in galah. Users can 
send their query using `compute()`, and download data once the query has finished—
downloading with `collect()` later—rather than waiting for the request to finish 
within R.

```{r, eval = FALSE}
# Create and send query to be calculated server-side
request <- request_data("occurrences") |>
  identify("perameles") |>
  filter(year > 1900) |>
  compute()
  
# Download data
request |>
  collect()
```

Additionally, functions that are more modular are generally easier to 
interrogate and debug. Previously some functions did several different things, 
making it difficult to know which APIs were being called, when, and for what 
purpose. Partitioning queries into three distinct stages is much more transparent, 
and allows users to check their query construction prior to sending a request. 
For example, the query above is constructed with the following information, 
returned by `collapse()`.

```{r}
request_data("occurrences") |>
  identify("perameles") |>
  filter(year > 1900) |>
  collapse()
```

The `collapse()` stage displays useful information about which APIs will be pinged 
by a query in galah when it is sent using `compute()`.

## New object classes

Under the hood, the different query-building verbs amend our object to a new class:

- `request_data()` returns class `data_request`
- `collapse()` returns class `data_query`
- `compute()` returns class `data_response`
- `collect()` doesn't add a new data class (returns class `tibble`)


In practice, there are actually 12 new classes:

- `request_data()` generates `data_request`, followed by `data_query` and `data_response`
- `request_metadata()` generates `metadata_request`, followed by `metadata_query` and `metadata_response`
- `request_values()` generates `values_request`, followed by `values_query` and `values_response`
- `request_files()` generates `files_request`, followed by `files_query` and `files_response`

_this needs a table or diagram or something_

These can be called directly, or via the `method` and `type` arguments of 
`galah_call()`, which specify which dedicated `request_` function and data type to return. 

This means that the following calls are synonymous:

```{r, eval = FALSE}
request_data() |>
  filter(year == 2020) |>
  count() |>
  collect()

galah_call(method = "data",
           type = "occurrences-count") |>
  filter(year == 2020) |>
  collect()

galah_call() |>
  galah_filter(year == 2020) |>
  atlas_counts()
```

And another example:

```{r, eval = FALSE}
request_metadata(type = "fields") |>
  collect()

galah_call(method = "metadata", 
           type = "fields") |>
  collect()

show_all(fields)
```

And another example:
_This example doesn't work_

```{r, eval = FALSE}
request_metadata(type = "fields-unnest") |>
  filter(id == "cl22") |>
  collect()

galah_call(method = "metadata", 
           type = "fields") |>
  galah_filter(id == "cl22") |>
  collect()

search_all(fields, "cl22") |>
  show_values()
```

Although there is little reason to use `request_metadata()` rather than 
`show_all()` most of the time, in some cases larger databases like 
GBIF return huge `data.frame`s of metadata. galah allows users to use 
`collapse()`, `compute()` and `collect()` on all types of requests, meaning 
users are able to download large metadata queries using the process detailed 
above in "Advanced query building" to get around this issue.


## Do I need to use advanced query building?

Despite these benefits, we have no plans to _require_ this new syntax; functions
prefixed with `galah_` or `atlas_` are not going away. 

Indeed, while there is 
perfect redundancy between old and new syntax in some cases, in others they
serve different purposes. In `atlas_media()` for example, several calls 
are made and joined in a way that reduces the number of steps required by the 
user. The queries below to download media are equivalent:

```{r, eval = FALSE}
galah_call() |>
  identify("Todiramphus macleayii") |>
  filter(year == 2021) |>
  atlas_media() |>
  collect_media()
```

```{r, eval = FALSE}
# equivalent example using `request_data()` syntax
```

Under the hood, however, all `atlas_` functions are now entirely built using the 
above syntax.