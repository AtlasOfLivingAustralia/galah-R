---
title: "Quick start guide"
author: "Martin Westgate & Dax Kellie"
date: '`r Sys.Date()`'
output:
  rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Quick start guide}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
`galah` is an R interface to biodiversity data hosted by the Global Biodiversity 
Information Facility ([GBIF](https://www.gbif.org)) and it's subsidiary node
organisations. GBIF and it's partner nodes collate and store observations of 
individual life forms using the ['Darwin Core'](https://dwc.tdwg.org) data 
standard.

# Installation

To install from CRAN:
```{r eval=FALSE}
install.packages("galah")
```

Or install the development version from GitHub:
```{r eval=FALSE}
install.packages("remotes")
remotes::install_github("AtlasOfLivingAustralia/galah")
```

Load the package
```{r eval=FALSE}
library(galah)
```

# Configuration
By default, `galah` downloads information from the Atlas of Living Australia 
(ALA). To show the full list of organisations currently supported by `galah`, 
use  `show_all(atlases)`.

```{r}
show_all(atlases)
```

Use `galah_config()` to set the target organisation using its region, name, or 
acronym. This will automatically populate the server configuration for your 
selected GBIF node. If you wish to download occurrence records from your chosen 
GBIF node, you will need to register with them, then provide your registration 
email. To download from GBIF, you will need to provide the email, username, and 
password.

```{r, eval=FALSE}
galah_config(atlas = "GBIF",
             username = "user1",
             email = "email@email.com",
             password = "my_password")

```
You can find a full list of configuration options by running `?galah_config`.

# Basic syntax
The standard method to construct queries in `galah` is via piped functions. 
Pipes in `galah` start with the `galah_call()` function, and typically end with 
`collect()`, though `collapse()` and `compute()` are also supported. The 
development team use the base pipe by default (`|>`), but the `{magrittr}` pipe 
(`%>%`) should work too.
  
```{r}
galah_config(atlas = "ALA",
             verbose = FALSE)
galah_call() |>
  count() |>
  collect()
```

To pass more complex queries, you can use additional `dplyr` functions such as
`filter()`, `select()`, and `group_by()`.

```{r}
galah_call() |> 
  filter(year >= 2020) |> 
  count() |>
  collect()
```

Each GBIF node allows you to query using their own set of inbuilt fields. You 
can investigate which fields are available using `show_all()` and `search_all()`:

```{r}
search_all(fields, "australian states")
```

# Taxonomy
To narrow the search to a particular taxonomic group, use `identify()`. Note 
that this function only accepts scientific names and is not case sensitive. 
It's good practice to first use `search_taxa()` to check that the taxa you 
provide returns the correct taxonomic results.

```{r}
search_taxa("reptilia") # Check whether taxonomic info is correct

galah_call() |>
  filter(year >= 2020) |> 
  identify("reptilia") |> 
  count() |>
  collect()
```

If you want to query something other than the number of records, modify the 
`type` argument in `galah_call()`, i.e. to get the number of species:

```{r}
galah_call(type = "species") |>
  filter(year >= 2020) |> 
  identify("reptilia") |> 
  count() |>
  collect()
```

# Download
To download records - rather than find how many records are available - simply
remove the `count()` function from your pipe.

```{r}
result <- galah_call() |>
  identify("Litoria") |>
  filter(year >= 2020, cl22 == "Tasmania") |>
  select(basisOfRecord, group = "basic") |>
  collect()

result |> head()
```

Check out our other vignettes for more detail on how to use these functions.