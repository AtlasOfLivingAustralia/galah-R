---
title: "Piping in galah"
author: "Martin Westgate & Dax Kellie"
date: '`r Sys.Date()`'
output:
  rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Piping in galah}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
```{r include = FALSE}
galah_config(email = "ala4r@ala.org.au",
             atlas = "Australia", 
             caching = FALSE, 
             verbose = FALSE)
```
`galah` has been designed to support a piped workflow that mimics 
workflows made popular by tidyverse packages such as `dplyr`. Although piping in
`galah` is optional, it can make things much easier to understand, and so we use
it in (nearly) all our examples.

To see what we mean, let's look at an example of how `dplyr::filter()` works. 
Notice how `dplyr::filter` and `galah_filter` both require logical arguments to 
be added by using the `==` sign:

```{r}
library(dplyr)

mtcars |> 
  filter(mpg == 21)

galah_call() |>
  galah_filter(year == 2021) |>
  atlas_counts()
```

As another example, notice how `galah_group_by()` + `atlas_counts()` works very 
similarly to `dplyr::group_by()` + `dplyr::count()`:

```{r}
mtcars |>
  group_by(vs) |> 
  count()

galah_call() |>
  galah_group_by(biome) |>
  atlas_counts()
```

We made this move towards tidy evaluation to make it possible to use 
piping for building queries to the Atlas of Living Australia. In practice, this 
means that data queries can be filtered just like how you might 
filter a `data.frame` with the `tidyverse` suite of functions. 

# Piping with `galah_call()`
You may have noticed in the above examples that `dplyr` pipes begin with some 
data, while `galah` pipes all begin with `galah_call()` (be sure to add the 
parentheses!). This function tells `galah` that you will be using 
pipes to construct your query. Follow this with your preferred pipe (`|>` from 
`base` or `%>%` from `magrittr`). You can then narrow your query line-by-line 
using `galah_` functions. Finally, end with an `atlas_` function to identify 
what type of data you want from your query.  
  
Here is an example using counts of bandicoot records:

```{r}
galah_call() |>
  galah_identify("perameles") |>
  galah_filter(year >= 2020) |>
  galah_group_by(species, year) |>
  atlas_counts()
```

And a second example, to download occurrence records of bandicoots 
in 2021, and also to include information on which records had zero coordinates:

```{r}
galah_call() |>
  galah_identify("perameles") |>
  galah_filter(year == 2021) |>
  galah_select(group = "basic", ZERO_COORDINATE) |>
  atlas_occurrences() |>
  head()
```

Note that the order in which `galah_` functions are added doesn't matter, as long
as `galah_call()` goes first, and an `atlas_` function comes last.

# Using `dplyr` functions in `galah`
As of version 1.5.1, it is possible to call `dplyr` functions natively within 
`galah` to amend how queries are processed, i.e.:

```{r}
# galah syntax
galah_call() |>
  galah_filter(year >= 2020) |>
  galah_group_by(year) |>
  atlas_counts()
  
# dplyr syntax
galah_call() |>
  filter(year >= 2020) |>
  group_by(year) |>
  count()
```
The full list of masked functions is: 

* `identify()` (`{graphics}`) as a synonym for `galah_identify()`
* `select()` (`{dplyr}`) as a synonym for `galah_select()`
* `group_by()` (`{dplyr}`) as a synonym for `galah_group_by()`
* `slice_head()` (`{dplyr}`) as a synonym for the `limit` argument in `atlas_counts()`
* `st_crop()` (`{sf}`) as a synonym for `galah_polygon()`
* `count()` (`{dplyr}`) as a synonym for `atlas_counts()`