---
title: "Revamped syntax in galah 1.4.0"
author: "Dax Kellie"
date: "20/12/2021"
output: html_document
editor_options: 
  chunk_output_type: inline
---

`galah` 1.4.0 implements new, revised syntax for function names. These new 
function names are intended to improve users' ability to know what each function 
does and what output they can expect. <br>

First, let's have a look at all the changes, then go through each major syntax 
change one-by-one.

```{r, echo = FALSE, warning = FALSE, message = FALSE}
library(galah)
library(kableExtra)
library(tibble)
library(magrittr)
library(dplyr)

tribble(
  ~New, ~Old,
  "galah_filter", "select_filters",
  "galah_select", "select_columns",
  "galah_geolocate", "select_locations",
  "galah_group_by", " ",
  "search_taxa", "select_taxa",
  "`atlas_counts`", "`ala_counts`",
  "atlas_occurrences", "ala_occurrences",
  "atlas_species", "ala_species",
  "atlas_media", "ala_media",
  "atlas_taxonomy", "ala_taxonomy",
  "atlas_citation", "ala_citation",
  "show_all_fields", "",
  "show_all_profiles", "find_profiles",
  "show_all_ranks", "find_ranks",
  "show_all_cached_files", "find_cached_files",
  "show_all_atlases", "find_atlases",
  "show_all_reasons", "find_reasons"
) %>% 
  rename("galah 1.4.0" = "New") %>% 
  rename("galah 1.3.1 and earlier" = "Old") %>%
  kbl() %>%
  kable_styling(full_width = FALSE) %>%
  kable_paper() %>%
  row_spec(1:4, bold = T, background = "#f5b2d0") %>%
  row_spec(5, bold = T, background = "#f064a4") %>% 
  row_spec(6:11, bold = T, background = "#c0e6e8") %>%
  row_spec(12:17, bold = T, background = "#78cccc")
```


## `galah_` functions

Functions that alter or filter data requests use the prefix `galah_`. These functions include:

-   `galah_filter`
-   `galah_select`
-   `galah_group_by`
-   `galah_geolocate`

These functions replace or extend functions previously prefixed by `select_`. 
Renaming `select_` functions to `galah_` functions reflects `galah`'s embrace of
`dplyr`. This change can be seen in the names of `galah_` functions; they echo 
`dplyr`'s `filter`, `select` and `group_by` functions.

The similarity of `galah_` functions to `dplyr` doesn't end there. `galah_filter`, 
`galah_select` and `galah_group_by` also use `dplyr` tidy evaluation and syntax. 
This means that the way you use `dplyr` functions is also how you use `galah_` 
functions.

Let's look at a few examples to show you what we mean.

Use `galah_filter` to filter the rows of queries:

```{r}
# Get total record count since 2000
atlas_counts(filter = galah_filter(year > 2000))

# Get total record count for iNaturalist in 2021
atlas_counts(
  filter = galah_filter(year == 2021,
                        dataResourceName == "iNaturalist Australia"))
```

Use `galah_group_by` to group record counts and summarise counts by specified fields:

```{r}
# Get record counts since 2010, grouped by year and basis of record
galah_config(verbose = FALSE)
atlas_counts(
  filter = galah_filter(year > 2015 & year <= 2020),
  group_by = galah_group_by(year, basisOfRecord, expand = TRUE)
  )
```

Use `galah_select` to choose columns returned when downloading records:

```{r, eval = FALSE}
# Get records from 1930, but only 'eventDate' and 'kingdom' columns
atlas_occurrences(
  filter = galah_filter(year == 1930),
  select = galah_select(eventDate, kingdom)
  ) |>
  head() # only return first 5 lines
```

Use `galah_geolocate` to specify a geographic area or region to limit your search:

```{r, eval = FALSE}
# Get list of parameles species only in area specified:
# (Note: This can also be specified by a shapefile)
wkt <- "POLYGON((131.36328125 -22.506468769126,135.23046875 -23.396716654542,134.17578125 -27.287832521411,127.40820312499 -26.661206402316,128.111328125 -21.037340349154,131.36328125 -22.506468769126))"

species <- atlas_species(geolocate = galah_geolocate(wkt))
```

`galah_` functions also evaluate arguments just like `dplyr`. To see what we mean, 
let's look at an example of how `dplyr::filter()` works. Notice how `dplyr::filter` 
and `galah_filter` both require logical arguments to be added by using the `==` sign:

```{r}
library(dplyr)

mtcars %>% filter(mpg == 21)
```

```{r}
atlas_counts(galah_filter(year == 2021))
```

As another example, notice how `galah_group_by` works very similarly to
 `dplyr::group_by` + `dplyr::summarise(sum())`:

```{r}
mtcars %>% 
  group_by(vs) %>% 
  summarise(sum(mpg))

atlas_counts(group_by = galah_group_by(biome))
```


We made this move towards tidy evaluation to eventually make it possible to use
 piping to create a query to the Atlas of Living Australia just like how you might 
 edit a `data.frame` with the `tidyverse`. We are not ready to add these changes, 
 but we imagine that getting the number of records, for example, could look 
 something like this in the future:

```{r, eval = FALSE}
galah_call() %>%
  search_taxa("parameles") %>%
  galah_filter(year == 2021) %>%
  galah_group_by(species, year) %>%
  atlas_counts()
```


## `search_taxa`

`search_taxa` replaces the previously named `select_taxa`. This change in syntax 
reflects the function's primary use - to search for taxonomic information. For 
example, to search for reptiles, we first need to identify whether we have the 
correct query and verify using additional taxonomic information:

```{r}
search_taxa("Reptilia")
```

The output confirms that *Reptilia* is the correct search term, which we can use 
in `atlas_` functions to narrow our results or records. This output is consistent 
with the other `search_` function, `search_fields`.


## `atlas_` functions

The prefix `atlas_` replaces `ala_` for the functions

-   `atlas_counts`
-   `atlas_occurrences`
-   `atlas_species`
-   `atlas_media`
-   `atlas_taxonomy`
-   `atlas_citation`

This change was made to reflect the ability for functions like `atlas_counts` and 
`atlas_occurrences` to use international atlases since galah 1.2.0 
(see `vignette("international_atlases")`).

`atlas_` functions work the same as previous `ala_` functions, but with changes 
to the names of arguments they accept. Argument names are consistent with the 
functions that they use. With the new syntax of `galah_` functions and the
 update to `search_taxa`, these argument changes look like this:

```{r, eval = FALSE}
# Get species list for Perameles (aka Bandicoots)
atlas_species(taxa = search_taxa("perameles"))

# Get record counts of Perameles by year since 2010
atlas_counts(taxa = search_taxa("perameles"),
             filter = galah_filter(year > 2010),
             group_by = galah_group_by (year))

# Get records of Perameles from 2010, with "basis of record" included as a column
atlas_occurrences(taxa = search_taxa("perameles"),
                  filter = galah_filter(year == 2010),
                  select = galah_select(basisOfRecord, group = "basic"),
                  geolocate = wkt) # wkt was defined in earlier example

# Get taxonomic tree of Peramelemorphia (aka bandicoots & bilbies) down to genus
atlas_taxonomy(taxa = search_taxa("Peramelemorphia"),
               down_to = "genus")

# Download media of Regent Honeyeater from 2010
atlas_media(taxa = search_taxa("Regent Honeyeater"),
            filter = galah_filter(year == 2010),
            download_dir = "media")
```

See R help files for more information on using `atlas_` functions with updated syntax.


## `show_all_` functions

Functions with the prefix `show_all_` return a `data.frame` doing exactly that 
- showing all the possible values of the category specified. These functions include:

-   `show_all_fields`
-   `show_all_atlases`
-   `show_all_ranks`
-   `show_all_profiles`
-   `show_all_reasons`
-   `show_all_cached_files`

`show_all_` functions require no arguments. Simply call the function and it will 
return all accepted values:

```{r}
show_all_atlases()
show_all_reasons()
```


## Deprecated syntax

Old syntax will now return an error when used, suggesting the new syntax. 

New syntax are not fully decided on and can be changed in future versions of 
`galah`. We would appreciate any feedback from users about what works or what 
doesn't work. It is our goal to create a package that is as easy and intuitive 
for users as possible!

