---
title: "galah"
author: "Matilda Stevenson"
date: '`r Sys.Date()`'
output:
  rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{galah}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
library(knitr)
options(width=120)
```

# About
`galah` is an R interface to biodiversity data hosted by the 
[Atlas of Living Australia](https://ala.org.au) (ALA). The ALA is a repository 
of biodiversity data, focussed primarily on observations of individual life forms. 
Like the Global Biodiversity Information Facility ([GBIF](https://www.gbif.org)), 
the basic unit of data at ALA is an **occurrence** record, based on the 
['Darwin Core'](https://dwc.tdwg.org) data standard.

`galah` enables users to locate and download species observations, taxonomic
information, record counts, or associated media such as images or sounds. Users 
can restrict their queries to particular taxa or locations by specifying which 
columns and rows are returned by a query, or by restricting their results to 
observations that meet particular quality-control criteria. All functions 
return a `tibble` as their standard format.

Functions in `galah` are designed according to a nested architecture. Users
that require data should begin by locating the relevant `atlas_` function, 
which determines the type of data that will be downloaded 
(see [downloading data section](#Download-data)). 
Users can then filter their data queries with filtering functions like 
`search_taxa` and the [`galah_` functions](#Filter-data). The specific fields 
and values that users can filter their data by can be found using `show_all_`, or 
`find_` functions. 

This nested architecture allows a method of step-by-step filtering prior to 
downloading data. To make this easier, as of `galah` 1.4.0, 
data queries can also be built using piping syntax (e.g., `%>%` or `|>`) by first 
using the `galah_call()` function (see the `vignette("taxonomic_information")`). 

For a better view of the relationships between functions in `galah`, here is a 
diagram of how they all link together:


```{r, eval = FALSE, echo = FALSE}
DiagrammeR::grViz("
digraph boxes_and_circles {

  # a 'graph' statement
  graph [overlap = true, fontsize = 15, rankdir = LR]

  # several 'node' statements
  node [shape = box,
        fontname = Helvetica,
        fixedsize = TRUE,
        width = 2.0,
        height = 0.5,
        fontcolor = '#E06E53',
        color = '#E06E53']
  atlas_counts; atlas_species; atlas_occurrences; atlas_media; atlas_taxonomy

  node  [shape = box,
        fontname = Helvetica,
        fontcolor = '#c7902a'
        color = '#c7902a']
  galah_filter; galah_select; galah_geolocate; galah_group_by; galah_down_to
  
  node  [shape = box,
        fontname = Helvetica,
        fontcolor = '#7f9959',
        color = '#7f9959']
  search_taxa; show_all_fields; search_fields; show_all_profiles; show_all_ranks; find_field_values; find_profile_attributes
  
  edge [ color = 'grey50' , dir = 'none']
  atlas_counts->search_taxa
  atlas_counts->galah_filter
  atlas_counts->galah_geolocate
  atlas_counts->galah_group_by
  atlas_species->search_taxa
  atlas_species->galah_filter
  atlas_species->galah_geolocate
  atlas_media->search_taxa
  atlas_media->galah_filter
  atlas_media->galah_select
  atlas_media->galah_geolocate
  atlas_occurrences->search_taxa 
  atlas_occurrences->galah_filter
  atlas_occurrences->galah_select
  atlas_occurrences->galah_geolocate
  atlas_taxonomy->search_taxa
  atlas_taxonomy->galah_down_to
  galah_group_by->search_fields
  galah_group_by->show_all_fields
  galah_filter->search_fields
  galah_filter->show_all_fields
  galah_filter->show_all_profiles->find_profile_attributes
  galah_select->search_fields
  galah_select->show_all_fields
  show_all_fields->find_field_values
  search_fields->find_field_values
  galah_down_to->show_all_ranks 
}
", width = 1000, height = 500)
```
<img src="galah-DiagrammeR-plot.png" title="plot of function relationships" alt="plot of function relationships" width="100%" />

## Installation

Install from CRAN:
```{r eval=FALSE}
install.packages("galah")
```

Install the development version from GitHub:
```{r eval=FALSE}
install.packages("remotes")
remotes::install_github("AtlasOfLivingAustralia/galah")
```

See the [README](https://github.com/AtlasOfLivingAustralia/galah/blob/master/README.md) for system requirements.

Load the package
```{r}
library(galah)
galah_config(atlas = "Australia") # This is the default atlas
```

# Filter data queries

Each occurrence record contains taxonomic information and 
information about the observation itself, like its location and the date
of observation. These pieces of information are recorded and categorised into 
respective **fields**. When you import a `data.frame`, **columns** of the 
`data.frame` correspond to these **fields**.

Data fields are important because they provide a means to *filter*
occurrence records;  i.e. to return only the information that you need, and
no more. Consequently, much of the architecture of `galah` has been
designed to make filtering as simple as possible. Let's look at some of ways 
you can filter data requests in `galah`.

## Taxonomic filtering
`search_taxa()` enables users to search for taxonomic names, check that the results
are 'correct', and use their results to download data.
The function allows both free-text searches and searches that specify by rank(s). 
Specifying additional ranks in a `data.frame` or `tibble` can be useful when 
names are ambiguous.
```{r}
# Free-text search
taxa <- search_taxa("Eolophus")

# Search specifying ranks
search_taxa(query = data.frame(genus = "Eolophus", kingdom = "Aves"))
```

For more detailed taxonomic information, you can also use `atlas_taxonomy()`, 
as outlined in `vignette("taxonomic_information")`


## Field-based filtering
All occurrence records in the ALA contain additional
information about each record, stored in **fields**.  
  
Narrow searches by filtering rows with `galah_filter()`.
```{r}
filter <- galah_filter(basisOfRecord == "HumanObservation")
```

It is also possible to pass other kinds of logical statements to
`galah_filter`.
```{r}
filter <- galah_filter(basisOfRecord == "HumanObservation",
                       year >= 2010,
                       occurrenceStatus != "absent")
```

Narrow searches by filtering columns with `galah_select`.
```{r}
select <- galah_select(year, eventDate, group = "basic")
```

It is also possible to use helper functions from `dplyr::select` with 
`galah_select`.
```{r}
select <- galah_select(starts_with("el") & ends_with("on"))
```

When downloading summary data (like in `atlas_counts`), group data with 
`galah_group_by`.
```{r}
group_by <- galah_group_by(year, species)
```

### Find valid fields
To find available fields and corresponding valid values, use the field lookup 
functions `show_all_fields`, `search_fields` and `find_field_values`.  
  
To see a listing of all valid fields, use `show_all_fields`. To find specific 
field names, use `search_fields()`. To find valid values of a specific field to 
filter your data query by, use `find_field_values()`.
```{r}
search_fields("basis")
field_values <- find_field_values("basisOfRecord")
```

### Data quality profiles
A notable extention of the filtering approach is to remove records with low
'quality'. ALA performs quality control checks on all records that it stores.
These checks are used to generate new fields, that can then be used to filter
out records that are unsuitable for particular applications. However, there
are many possible data quality checks, and it is not always clear which are
most appropriate in a given instance. Therefore, `galah` supports ALA
data quality **profiles**, which can be passed to `galah_filter()`to quickly
remove undesirable records. To see a full list of data quality profiles, use
`show_all_profiles()`.

```{r}
profiles <- show_all_profiles()
```
View filters included in a profile
```{r}
find_profile_attributes("ALA")
```
Include a profile in the filters
```{r}
filters <- galah_filter(basisOfRecord == "HumanObservation",
                        profile = "ALA")
```

## Location-based filtering
Narrow searches to specific locations with `galah_geolocate`. 
Users can provide an `sf` object or a Well-Known Text (WKT) string for
location-based filtering.
```{r eval = FALSE}
locations <- galah_geolocate(query = st_read('act_rect.shp'))
```


# Download data

Functions that return data from ALA (or other atlases) are named with the 
prefix `atlas_`, followed by a suffix describing the information that they 
provide.

By combining different filter functions, it is possible to build complex
queries to return only the most valuable information for a given problem.
Once you have retrieved taxon information, you can use this to [search for
occurrence records](#occurrence-data) with `atlas_occurrences()`, 
[download data on species](#species-data) with `atlas_species()`, 
[return taxonomic trees](#taxonomic-trees) with `atlas_taxonomy`, 
[retrieve numbers of records](#record-counts) with `atlas_counts()`, or 
[download media content](#media_downloads) (largely images) with `atlas_media()`.

## Occurrence data

To download occurrence data you will need to specify your email in
`galah_config()`. This email must be associated with an active ALA account. See
more information in the [config section](#config)
```{r include = FALSE}
galah_config(email = "ala4r@ala.org.au", atlas = "Australia", caching = FALSE, 
verbose = FALSE)
```

```{r eval = FALSE}
galah_config(email = your_email_here, atlas = "Australia")
```

Download occurrence records for *Eolophus roseicapilla*
```{r}
occ <- atlas_occurrences(taxa = search_taxa("Eolophus roseicapilla"),
                         filter = galah_filter(stateProvince == "Australian Capital Territory",
                                               year >= 2010,
                                               profile = "ALA"),
                         select = galah_select(institutionID, group = "basic"))
```

```{r}
head(occ)
```

As of `galah` 1.4.0, you can also do the same as above by piping with `%>%` 
or `|>`:
```{r}
library(magrittr)

occ <-
  galah_call() %>%
  search_taxa("Eolophus roseicapilla") %>%
  galah_filter(
    stateProvince == "Australian Capital Territory",
    year >= 2010,
    profile = "ALA"
  ) %>%
  galah_select(institutionID, group = "basic") %>%
  atlas_occurrences()
  
occ %>% head()
```

## Species data
A common use case of the ALA is to identify which species occur in a specified
region, time period, or taxonomic group. `atlas_species()` enables users to 
look up this information, using the common set of filter functions.
```{r include = FALSE}
galah_config(cache_directory = tempdir())
```

```{r}
# List rodent species in the NT
species <- atlas_species(taxa = search_taxa("Rodentia"),
            filter = galah_filter(stateProvince == "Northern Territory"))
head(species)
```

As of `galah` 1.4.0, you can also do the same as above by piping with `%>%` 
or `|>`:
```{r}
library(magrittr)

species <-
  galah_call() %>%
  search_taxa("Rodentia") %>%
  galah_filter(stateProvince == "Northern Territory") %>%
  atlas_species()
  
species %>% head()
```

## Record counts
`atlas_counts()` provides summary counts on records in the ALA, without needing
to download all the records. In addition to the filter arguments, it has an
optional `group_by` argument, which provides counts binned by the requested
field.
```{r warning = FALSE}
# Total number of records in the ALA
atlas_counts()

# Total number of records, broken down by kindgom
atlas_counts(group_by = galah_group_by(kingdom))
```

As of `galah` 1.4.0, you can also do the same as above by piping with `%>%` 
or `|>`:
```{r warning = FALSE}
library(magrittr)

galah_call() %>%
  galah_group_by(kingdom) %>%
  atlas_counts()
```

## Taxonomic trees
`atlas_taxonomy` provides a way to build taxonomic trees from one clade down to 
another using ALA's internal taxonomy. Specify which taxonomic level your tree 
will go down to with `galah_down_to`.
```{r}
# Taxonomic tree of Fungi to phylum level
atlas_taxonomy(taxa = search_taxa("fungi"),
               down_to = galah_down_to(phylum))
```

As of `galah` 1.4.0, you can also do the same as above by piping with `%>%` 
or `|>`:
```{r warning = FALSE}
library(magrittr)

galah_call() %>%
  search_taxa("fungi") %>%
  galah_down_to(phylum) %>%
  atlas_taxonomy()
```

## Media downloads
In addition to text data describing individual occurrences and their attributes, 
ALA stores images, sounds and videos associated with a given record. These can 
be downloaded to `R` using `atlas_media()` and the same set of filters as the 
other data download functions.

```{r warning=FALSE, message=FALSE, eval = FALSE}
# Use the occurrences previously downloaded
media_data <- atlas_media(
     taxa = search_taxa("Eolophus roseicapilla"),
     filter = galah_filter(year == 2020),
     download_dir = "media")
```

As of `galah` 1.4.0, you can also do the same as above by piping with `%>%` 
or `|>`:
```{r warning=FALSE, message=FALSE, eval = FALSE}
library(magrittr)

media_data <- galah_call() %>%
  search_taxa("Eolophus roseicapilla") %>%
  galah_filter(year == 2020) %>%
  atlas_media(download_dir = "media")
```


# Config
Various aspects of the galah package can be customized. To preserve
configuration for future sessions, set `profile_path` to a location of a
`.Rprofile` file.

## Email
To download occurrence records, you will need to provide an email address
registered with the ALA. You can create an account [here](https://auth.ala.org.au/userdetails/registration/createAccount).
Once an email is registered with the ALA, it should be stored in the config:
```{r eval=FALSE}
galah_config(email = "myemail@gmail.com")
```

## Caching
`galah` can cache most results to local files. This means that if the same code
is run multiple times, the second and subsequent iterations will be faster.

By default, this caching is session-based, meaning that the local files are
stored in a temporary directory that is automatically deleted when the R
session is ended. This behaviour can be altered so that caching is permanent,
by setting the caching directory to a non-temporary location.

```{r eval=FALSE}
galah_config(cache_directory = "example/dir")
```

By default, caching is turned off. To turn caching on, run
```{r eval=FALSE}
galah_config(caching = FALSE)
```


## Debugging
If things aren't working as expected, more detail (particularly about web 
requests and caching behaviour) can be obtained by setting the `verbose` 
configuration option:

```{r eval=FALSE}
galah_config(verbose = TRUE)
```

## Setting the download reason
ALA requires that you provide a reason when downloading occurrence data 
(via the galah `atlas_occurrences()` function). The reason is set as 
"scientific research" by default, but you can change this using `galah_config()`. 
See `show_all_reasons()` for valid download reasons.

```{r eval=FALSE}
galah_config(download_reason_id = your_reason_id)
```
